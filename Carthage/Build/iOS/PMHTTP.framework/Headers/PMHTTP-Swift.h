#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.3 effective-4.1.50 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PMHTTP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSHTTPURLResponse;
@class HTTPManagerTask;

/// The <code>HTTPAuth</code> protocol defines the common interface that authentication mechanisms can use.
/// This includes the ability to set headers and to handle authorization failures.
SWIFT_PROTOCOL("_TtP6PMHTTP8HTTPAuth_")
@protocol HTTPAuth
/// Returns the headers that should be added to the given request.
/// This is most commonly used to set the <code>"Authorization"</code> header.
/// note:
/// This method may be called from any thread.
/// note:
/// <code>HTTPAuth</code> is not allowed to set <code>"Content-Type"</code>, <code>"Content-Length"</code>, or
/// <code>"Accept"</code>, and any attempt to do so will be ignored.
/// \param request The <code>URLRequest</code> that the headers should be added to.
///
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns an opaque token that is associated with the request.
/// If implemented, this method is called immediately after<code> headers(for:)</code>.
/// note:
/// This method is not guaranteed to be called every time <code>headers(for:)</code> is. Notably,
/// when <code>preparedURLRequest</code> is accessed, <code>headers(for:)</code> will be invoked but not
/// <code>opaqueToken(for:)</code>.
/// This token can be used to uniquely identify the authorization information used for the
/// request. Then in <code>handleUnauthorized(_:for:token:completion:)</code> you can use this token to
/// determine if you’ve already refreshed your stored authorization information or if you need
/// to do extra work (such as fetching a new OAuth2 token) before you can retry the request.
- (id _Nullable)opaqueTokenForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Invoked when a 401 Unauthorized response is received.
/// This method is only called once per request. If this method is invoked and requests a retry,
/// and the subsequent retry fails due to 401 Unauthorized, this is considered a permanent
/// failure. Note that a 403 Forbidden after a 401 Unauthorized may trigger a second retry.
/// note:
/// This method will be called on an arbitrary background thread.
/// note:
/// Special care must be taken when implementing this method. Multiple tasks may be
/// created with the same authorization headers in parallel and may all fail even after you’ve
/// refreshed your authorization information (e.g. with OAuth2). You can use
/// <code>opaqueToken(for:)</code> in order to keep track of whether a given request was created with old
/// authorization information or whether you need to refresh your authorization information.
/// important:
/// The completion block <em>MUST</em> be called once and only once. Failing to call the
/// completion block will leave the task stuck in the processing state forever. Calling the
/// completion block multiple times may cause bad behavior.
/// note:
/// When the completion block is invoked, if the task is not retried, the task’s own
/// completion block may run synchronously on the current queue.
/// \param response The <code>HTTPURLResponse</code> that was received.
///
/// \param body The body that was received.
///
/// \param task The <code>HTTPManagerTask</code> that received the response.
///
/// \param token The opaque token returned from <code>opaqueToken(for:)</code>, otherwise <code>nil</code>.
///
/// \param completion A completion block that must be called when the <code>HTTPAuth</code> object
/// has finished handling the response. This block may be called synchronously, or it may be
/// called from any thread.
///
- (void)handleUnauthorizedResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
/// Invoked when a 403 Forbidden response is received.
/// This is intended for situations where you can’t access a resource with your existing
/// credentials but you can request new credentials that have greater access.
/// This method is only called once per request. If this method is invoked and requests a retry,
/// and the subsequent retry fails due to 403 Forbidden or 401 Unauthorized, this is considered
/// a permanent failure.
/// note:
/// This method will be called on an arbitrary background thread.
/// note:
/// Special care must be taken when implementing this method. Multiple tasks may be
/// created with the same authorization headers in parallel and may all fail even after you’ve
/// refreshed your authorization information (e.g. with OAuth2). You can use
/// <code>opaqueToken(for:)</code> in order to keep track of whether a given request was created with old
/// authorization information or whether you need to refresh your authorization information.
/// important:
/// The completion block <em>MUST</em> be called once and only once. Failing to call the
/// completion block will leave the task stuck in the processing state forever. Calling the
/// completion block multiple times may cause bad behavior.
/// note:
/// When the completion block is invoked, if the task is not retried, the task’s own
/// completion block may run synchronously on the current queue.
/// \param response The <code>HTTPURLResponse</code> that was received.
///
/// \param body The body that was received.
///
/// \param task The <code>HTTPManagerTask</code> that received the response.
///
/// \param token The opaque token returned from <code>opaqueToken(for:)</code>, otherwise <code>nil</code>.
///
/// \param completion A completion block that must be called when the <code>HTTPAuth</code> object
/// has finished handling the response. This block may be called synchronously, or it may be
/// called from any thread.
///
- (void)handleForbiddenResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
/// Returns the localized description for an unauthorized error.
/// \param error The unauthorized error. This will always be an instance of
/// <code>HTTPManagerError.unauthorized</code>.
///
///
/// returns:
/// The string to use for the localized description, or <code>nil</code> to use the default
/// description.
- (NSString * _Nullable)localizedDescriptionForError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLCredential;

/// An <code>HTTPAuth</code> implementation that provides basic auth.
SWIFT_CLASS("_TtC6PMHTTP13HTTPBasicAuth")
@interface HTTPBasicAuth : NSObject <HTTPAuth>
/// The <code>URLCredential</code> that the <code>HTTPBasicAuth</code> was initialized with.
/// This is guaranteed to be a password-based credential.
@property (nonatomic, readonly, strong) NSURLCredential * _Nonnull credential;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Returns a new instance of <code>HTTPBasicAuth</code> from a given password-based credential.
/// \param credential A <code>URLCredential</code>. This must be a password-based credential.
///
///
/// returns:
/// An <code>HTTPBasicAuth</code> instance, or <code>nil</code> if <code>credential</code> isn’t a password-based
/// credential.
- (nullable instancetype)initWithCredential:(NSURLCredential * _Nonnull)credential OBJC_DESIGNATED_INITIALIZER;
/// Returns a new instance of <code>HTTPBasicAuth</code> with the given username and password.
/// note:
/// The <code>URLCredential</code> that this creates has a persistence of <code>.none</code>.
/// \param username The username to use.
///
/// \param password The password to use.
///
///
/// returns:
/// An <code>HTTPBasicAuth</code> instance.
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class HTTPManagerEnvironment;
@class NSURLSessionConfiguration;
@class NSURLAuthenticationChallenge;
@class HTTPManagerMetricsCallback;
@class HTTPManagerRetryBehavior;
@class HTTPMockManager;

/// Manages access to a REST API.
/// This class is thread-safe. Requests may be created and used from any thread.
/// <code>HTTPManagerRequest</code>s support concurrent reading from multiple threads, but it is not safe to mutate
/// a request while concurrently accessing it from another thread. <code>HTTPManagerTask</code>s are safe to access
/// from any thread.
SWIFT_CLASS("_TtC6PMHTTP11HTTPManager")
@interface HTTPManager : NSObject
/// A block that is invoked whenever the number of outstanding <code>HTTPManagerTask</code>s changes.
/// If the value of this property changes while there are outstanding tasks, the old
/// value is not invoked, but the new value will be invoked asynchronously with the current
/// number of tasks. If there are no outstanding tasks the new value will not be invoked.
/// note:
/// This block is always invoked on the main thread.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable networkActivityHandler)(NSInteger);)
+ (void (^ _Nullable)(NSInteger))networkActivityHandler SWIFT_WARN_UNUSED_RESULT;
+ (void)setNetworkActivityHandler:(void (^ _Nullable)(NSInteger))newValue;
/// The current environment. The default value is <code>nil</code>.
/// Changes to this property affects any newly-created requests but do not
/// affect any existing requests or any tasks that are in-progress.
/// Changing this property also resets the default auth if the new value differs from the old
/// one. Setting this property to the existing value has no effect.
/// important:
/// If <code>environment</code> is <code>nil</code>, requests created with relative paths will fail,
/// but requests created with absolute URLs will continue to work. See <code>HTTPManagerConfigurable</code>
/// for how to configure the shared <code>HTTPManager</code> prior to first use.
/// seealso:
/// <code>resetSession()</code>, <code>HTTPManagerConfigurable</code>, <code>defaultAuth</code>,
/// <code>defaultServerRequiresContentLength</code>.
@property (nonatomic, strong) HTTPManagerEnvironment * _Nullable environment;
/// The URL session configuration.
/// Changing mutable values within the configuration object has no effect on the
/// HTTP manager, but you can reassign this property with the modified
/// configuration object.
/// Changing this property affects all newly-created tasks but does not cancel
/// any tasks that are in-flight. You can use <code>resetSession()</code> if you need to
/// cancel any in-flight tasks.
/// seealso:
/// <code>resetSession()</code>
@property (nonatomic, strong) NSURLSessionConfiguration * _Nonnull sessionConfiguration;
/// The authentication handler for session-level authentication challenges.
/// This handler is invoked for all session-level authentication challenges. At the time of this
/// writing, these challenges are <code>NSURLAuthenticationMethodNTLM</code>,
/// <code>NSURLAuthenticationMethodNegotiate</code>, <code>NSURLAuthenticationMethodClientCertificate</code>, and
/// <code>NSURLAuthenticationMethodServerTrust</code>.
/// The default value of <code>nil</code> means to use the system-provided default behavior.
/// This property is typically used to implement SSL Pinning using something like
/// <a href="https://github.com/datatheorem/TrustKit">TrustKit</a>.
/// important:
/// This handler must invoke its completion handler.
/// seealso:
/// <code>URLSessionDelegate.urlSession(_:didReceive:completionHandler:)</code>.
/// \param httpManager The <code>HTTPManager</code> that the session belongs to.
///
/// \param challenge the <code>URLAuthenticationChallenge</code> that contains the request for
/// authentication.
///
/// \param completionHandler A completion block that must be invoked with the results.
///
@property (nonatomic, copy) void (^ _Nullable sessionLevelAuthenticationHandler)(HTTPManager * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));
/// The callback that will be invoked whenever task metrics are collected.
/// This callback is invoked every time the underlying <code>URLSession</code> collects task metrics for a
/// task. This means if the task is automatically retried, metrics may be collected multiple
/// times.
/// note:
/// As task metric collection is not free, task metrics are only collected for tasks
/// when the <code>metricsCallback</code> was non-<code>nil</code> prior to the task being created. Furthermore,
/// assigning the <code>metricsCallback</code> to <code>nil</code> disables task metric reporting for all
/// outstanding tasks, even if the <code>metricsCallback</code> is subsequently assigned to a non-<code>nil</code>
/// value again before the outstanding task completes.
/// note:
/// The callback will be scheduled on the configured operation queue immediately from
/// within the <code>URLSession</code> delegate method. This means that if the same serial operation
/// queue is used both for the metrics callback and as the completion queue for the task
/// itself, the metrics will be collected before the task’s completion block is executed.
/// note:
/// Changing or clearing this property after a task has finished but before it has
/// executed the metrics callback won’t prevent the old callback from executing, even if this
/// property is cleared from the same operation queue that the callback is scheduled on.
@property (nonatomic, strong) HTTPManagerMetricsCallback * _Nullable metricsCallback SWIFT_AVAILABILITY(watchos,introduced=3) SWIFT_AVAILABILITY(tvos,introduced=10) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10);
/// The auth to use for HTTP requests. The default value is <code>nil</code>.
/// Individual requests may override this auth with their own auth.
/// Changes to this property affect any newly-created requests but do not affect any existing
/// requests or any tasks that are in-progress.
/// note:
/// This auth is only used for HTTP requests that are located within the current
/// environment’s base URL. If a request is created with an absolute path or absolute URL, and
/// the resulting URL does not represent a resource found within the environment’s base URL,
/// the request will not be assigned the default auth.
/// seealso:
/// <code>environment</code>, <code>HTTPBasicAuth</code>, <code>HTTPManagerRequest.auth</code>.
@property (nonatomic, strong) id <HTTPAuth> _Nullable defaultAuth;
/// The default retry behavior to use for requests. The default value is <code>nil</code>.
/// Individual requests may override this behavior with their own behavior.
/// Changes to this property affect any newly-created requests but do not affect
/// any existing requests or any tasks that are in-progress.
/// seealso:
/// <code>HTTPManagerRequest.retryBehavior</code>.
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable defaultRetryBehavior;
/// Whether errors should be assumed to be JSON. The default value is <code>false</code>.
/// If <code>true</code>, all error bodies are parsed as JSON regardless of their declared
/// Content-Type. This setting is intended to work around bad servers that
/// don’t declare their Content-Types properly.
/// Changes to this property affect any newly-created requests but do not affect
/// any existing requests or any tasks that are in-progress.
/// seealso:
/// <code>HTTPManagerRequest.assumeErrorsAreJSON</code>.
@property (nonatomic) BOOL defaultAssumeErrorsAreJSON;
/// If <code>true</code>, assume the server requires the <code>Content-Length</code> header for uploads. The default
/// value is <code>false</code>.
/// Setting this to <code>true</code> forces JSON and multipart/mixed uploads to be encoded synchronously
/// when the request is performed rather than happening in the background.
/// note:
/// This property is only used for HTTP requests that are located within the current
/// environment’s base URL. If a request is created with an absolute path or absolute URL, and
/// the resulting URL does not represent a resource found within the environment’s base URL,
/// the request will not be assigned this value.
/// Changes to this property affect any newly-created requests but do not affect any existing
/// requests or any tasks that are in-progress.
/// seealso:
/// <code>environment</code>, <code>HTTPManagerRequest.serverRequiresContentLength</code>.
@property (nonatomic) BOOL defaultServerRequiresContentLength;
/// The user agent that’s passed to every request.
@property (nonatomic, readonly, copy) NSString * _Nonnull userAgent;
/// An <code>HTTPMockManager</code> that can be used to define mocks for this <code>HTTPManager</code>.
@property (nonatomic, readonly, strong) HTTPMockManager * _Nonnull mockManager;
/// Invalidates all in-flight network operations and resets the URL session.
/// note:
/// Any tasks that have finished their network portion and are processing
/// the results are not canceled.
- (void)resetSession;
/// Creates and returns a new <code>HTTPManager</code>.
/// The returned <code>HTTPManager</code> needs its <code>environment</code> set, but is otherwise ready
/// for use.
/// important:
/// Unlike the global <code>HTTP</code> property, calling this initializer does
/// not go through <code>HTTPManagerConfigurable</code>. The calling code must configure
/// the returned <code>HTTPManager</code> instance as appropriate.
/// seealso:
/// <code>HTTP</code>.
- (nonnull instancetype)init;
@end






@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable defaultCredential SWIFT_DEPRECATED_MSG("use 'defaultAuth' with HTTPBasicAuth");
@end

@class NSURLResponse;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// Parses the <code>Date</code> header from a URL response and returns it.
/// \param response A <code>URLResponse</code> that the header is pulled from. If this
/// is not an <code>HTTPURLResponse</code>, <code>nil</code> is returned.
///
///
/// returns:
/// An <code>NSDate</code>, or <code>nil</code> if the header doesn’t exist or has an invalid format.
+ (NSDate * _Nullable)parsedDateHeaderFromResponse:(NSURLResponse * _Nonnull)response SWIFT_WARN_UNUSED_RESULT;
/// Parses a header value that is formatted like the “Date” HTTP header.
/// This parses the specific format allowed for the “Date” header, and any
/// other header that uses the <code>HTTP-date</code> production.
/// See <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">section 3.3.1 of RFC 2616</a> for details.
/// \param dateString The string value of the HTTP header.
///
///
/// returns:
/// An <code>NSDate</code>, or <code>nil</code> if <code>dateString</code> contains an invalid format.
+ (NSDate * _Nullable)parsedDateHeaderFromString:(NSString * _Nonnull)dateString SWIFT_WARN_UNUSED_RESULT;
@end

@class HTTPManagerDataRequest;
@class HTTPManagerActionRequest;
@class HTTPManagerUploadFormRequest;
@class HTTPManagerUploadDataRequest;
@class HTTPManagerUploadJSONRequest;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// The default <code>HTTPManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HTTPManager * _Nonnull defaultManager;)
+ (HTTPManager * _Nonnull)defaultManager SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull defaultHeaderFields;
/// Adds an HTTP header to the list of default header fields.
/// If a value was previously set for the specified <em>field</em>, the supplied <em>value</em> is appended
/// to the existing value using the appropriate field delimiter.
/// \param value The value for the header field.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)addValue:(NSString * _Nonnull)value forDefaultHeaderField:(NSString * _Nonnull)field;
/// Sets a specified default HTTP header field.
/// \param value The value for the header field. If <code>nil</code> the header is deleted.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)setValue:(NSString * _Nullable)value forDefaultHeaderField:(NSString * _Nonnull)field;
/// Returns a specified default HTTP header field, if set.
/// \param field The name of the header field. Header fields are case-insensitive.
///
///
/// returns:
/// The value for the header field, or <code>nil</code> if no value was set.
- (NSString * _Nullable)valueForDefaultHeaderField:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPOSTWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPUTWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPATCHWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end


/// An HTTP request.
/// <em>Thread safety:</em>
/// This class can be safely read from concurrent threads, but any modifications require exclusive access.
SWIFT_CLASS("_TtC6PMHTTP18HTTPManagerRequest")
@interface HTTPManagerRequest : NSObject <NSCopying>
/// The URL for the request, including any query items as appropriate.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The Content-Type for the request.
/// If no data is being submitted in the request body, the <code>contentType</code>
/// will be empty.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// The request parameters, or <code>[]</code> if there are no parameters.
/// The parameters are passed by default in the URL query string.
/// Subclasses may override this behavior.
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/// The <code>HTTPAuth</code> value to use for the request. Default is the value of
/// <code>HTTPManager.defaultAuth</code> for requests in the current environment, otherwise <code>nil</code>.
/// seealso:
/// <code>HTTPBasicAuth</code>, <code>HTTPManager.defaultAuth</code>.
@property (nonatomic, strong) id <HTTPAuth> _Nullable auth;
/// The default cache storage policy to use for the response if the response does not
/// include appropriate caching headers. If the response does include appropriate headers
/// such as <code>Cache-Control</code> or <code>Expires</code>, this property is ignored.
/// This property only establishes an upper bound on the cache storage allowed. If the
/// URL session proposes to store the cached response in-memory only and the default policy
/// is set to <code>.allowed</code>, the response will still be stored in-memory only, and if the URL
/// session proposes to not cache the response at all, the response will not be cached.
/// The default value is <code>.allowed</code> for most requests, and <code>.notAllowed</code> for parse requests
/// created from <code>parseAsJSON()</code> or <code>parseAsJSON(with:)</code>.
@property (nonatomic) NSURLCacheStoragePolicy defaultResponseCacheStoragePolicy;
/// <code>true</code> iff redirects should be followed when processing the response.
/// If <code>false</code>, network requests return a successful result containing the redirection
/// response, and parse requests return an error with <code>HTTPManagerError.unexpectedRedirect</code>.
/// Default is <code>true</code>.
@property (nonatomic) BOOL shouldFollowRedirects;
/// Indicates whether the request is allowed to use the cellular radio. Default is <code>true</code>.
/// If the session configuration’s <code>allowsCellularAccess</code> is <code>false</code>, access to the cellular
/// radio is always denied regardless of the request’s <code>allowsCellularAccess</code> property.
@property (nonatomic) BOOL allowsCellularAccess;
/// The main document URL associated with the request.
/// This URL is used for the cookie “same domain as main document” policy.
/// seealso:
/// <code>URLRequest.mainDocumentURL</code>.
@property (nonatomic, copy) NSURL * _Nullable mainDocumentURL;
/// Indicates whether cookies will be sent with and set for this request. Default is <code>true</code>.
@property (nonatomic) BOOL httpShouldHandleCookies;
/// Whether the request represents an action the user is waiting on.
/// Set this to <code>true</code> to increase the priority. Default is <code>false</code>.
@property (nonatomic) BOOL userInitiated;
/// The retry behavior to use for the request. Default is the value of
/// <code>HTTPManager.defaultRetryBehavior</code> for requests in the current environment, otherwise <code>nil</code>.
/// seealso:
/// <code>HTTPManager.defaultRetryBehavior</code>.
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
/// Whether errors should be assumed to be JSON.
/// If <code>true</code>, all error bodies are parsed as JSON regardless of their declared
/// Content-Type. This setting is intended to work around bad servers that
/// don’t declare their Content-Types properly.
/// The default value is provided by <code>HTTPManager.defaultAssumeErrorsAreJSON</code>.
/// seealso:
/// <code>HTTPManager.defaultAssumeErrorsAreJSON</code>.
@property (nonatomic) BOOL assumeErrorsAreJSON;
/// If <code>true</code>, assume the server requires the <code>Content-Length</code> header for uploads. The default
/// value is <code>false</code>.
/// Setting this to <code>true</code> forces JSON and multipart/mixed uploads to be encoded synchronously
/// when the request is performed rather than happening in the background.
/// The default value is provided by <code>HTTPManager.defaultServerRequiresContentLength</code>.
/// seealso:
/// <code>HTTPManager.defaultServerRequiresContentLength</code>.
@property (nonatomic) BOOL serverRequiresContentLength;
/// Whether tasks created from this request should affect the visiblity of the
/// network activity indicator. Default is <code>true</code>.
/// Strictly speaking, this controls whether the task is visible to the network activity
/// handler (if any), and it’s the handler’s job to show the activity indicator.
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
/// Sets properties whose default values depend on the environment.
/// This will set all properties whose default value depends on the environment to the value
/// they would have if the request was located within the environment. For example, this will
/// set the <code>auth</code> property to <code>HTTP.defaultAuth</code>.
/// This is intended for use with requests that are constructed using an absolute path (and
/// therefore are still at the same domain), but want to be treated as though they’re within the
/// environment path.
/// <em>Example:</em>
/// \code
/// HTTP.request(GET: "/foo")
///     .with({ $0.setDefaultEnvironmentalProperties() })
///     .performRequest { task, result in
///         // ....
/// }
///
/// \endcode
- (void)setDefaultEnvironmentalProperties;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An HTTP request that does not yet have a parse handler.
SWIFT_CLASS("_TtC6PMHTTP25HTTPManagerNetworkRequest")
@interface HTTPManagerNetworkRequest : HTTPManagerRequest
/// The request parameters, or <code>[]</code> if there are no parameters.
/// The parameters are passed by default in the URL query string.
/// Subclasses may override this behavior.
@property (nonatomic, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/// Creates and returns a <code>URLRequest</code> object from the properties of <code>self</code>.
/// For upload requests, the request will include the <code>HTTPBody</code> or <code>HTTPBodyStream</code>
/// as appropriate.
@property (nonatomic, readonly, copy) NSURLRequest * _Nonnull preparedURLRequest;
@end


/// An HTTP POST/PUT/PATCH/DELETE request that does not yet have a parse handler.
/// Similar to an <code>HTTPManagerDataRequest</code> except that it handles 204 No Content
/// instead of throwing <code>HTTPManagerError.unexpectedNoContent</code>.
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerActionRequest")
@interface HTTPManagerActionRequest : HTTPManagerNetworkRequest
@end



@class HTTPManagerObjectParseRequest;
@class NSError;

@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as JSON.
/// Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// The parse result is <code>nil</code> if and only if the server responded with
/// 204 No Content.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON.
/// note:
/// The parse result is <code>nil</code> if and only if the server responded with
/// 204 No Content.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler. Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the <code>json</code> argument to the handler is <code>nil</code>, this means the server
/// responded with 204 No Content and the <code>response</code> argument is guaranteed
/// to be an instance of <code>NSHTTPURLResponse</code>.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler.
/// note:
/// If the <code>json</code> argument to the handler is <code>nil</code>, this means the server
/// responded with 204 No Content and the <code>response</code> argument is guaranteed
/// to be an instance of <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the parse result is <code>nil</code>, this means the server responded with 204 No
/// Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImage SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the parse result is <code>nil</code>, this means the server responded with 204 No
/// Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// \param scale The scale to use for the resulting image.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the <code>value</code> argument to the handler is <code>nil</code>, this means the server responded
/// with 204 No Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the <code>value</code> argument to the handler is <code>nil</code>, this means the server responded
/// with 204 No Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param scale The scale to use for the resulting image.
///
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale handler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


/// A protocol that provides hooks for configuring the shared <code>HTTPManager</code>.
/// If the application delegate conforms to this protocol, it will be asked to configure the shared <code>HTTPManager</code>.
/// This will occur on first access to the global <code>HTTP</code> property.
SWIFT_PROTOCOL("_TtP6PMHTTP23HTTPManagerConfigurable_")
@protocol HTTPManagerConfigurable
/// Invoked on first access to the global <code>HTTP</code> property.
/// note:
/// You should not create any requests from within this method. Doing so is not
/// supported and will likely result in a misconfigured request.
/// important:
/// You MUST NOT access the global <code>HTTP</code> property from within this method.
/// Any attempt to do so will deadlock as the property has not finished initializing.
- (void)configureWithHttpManager:(HTTPManager * _Nonnull)httpManager;
- (void)configureHTTPManager:(HTTPManager * _Nonnull)httpManager SWIFT_UNAVAILABLE_MSG("'configureHTTPManager' has been renamed to 'configureWithHttpManager:'");
@end


/// An HTTP GET/HEAD request that does not yet have a parse handler.
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerDataRequest")
@interface HTTPManagerDataRequest : HTTPManagerNetworkRequest
@end




@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImage SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// \param scale The scale to use for the resulting image.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param scale The scale to use for the resulting image.
///
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale handler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
/// The cache policy to use for the request. If <code>NSURLRequestUseProtocolCachePolicy</code>,
/// the default cache policy is used. Default is <code>NSURLRequestUseProtocolCachePolicy</code>.
@property (nonatomic) NSURLRequestCachePolicy cachePolicy;
/// Returns a new request that parses the data as JSON.
/// Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler. Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


/// The environment for an <code>HTTPManager</code>.
/// This class does not define any default environments. You can extend this class in your application
/// to add environment definitions for convenient access. For example:
/// \code
/// extension HTTPManagerEnvironment {
///     /// The Production environment.
///     @nonobjc static let Production = HTTPManagerEnvironment(baseURL: URL(string: "https://example.com/api/v1")!)!
///     /// The Staging environment.
///     @nonobjc static let Staging = HTTPManagerEnvironment(baseURL: URL(string: "https://stage.example.com/api/v1")!)!
/// }
///
/// \endcodeYou can also use <code>HTTPManagerConfigurable</code> to configure the initial environment on the shared <code>HTTPManager</code>.
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerEnvironment")
@interface HTTPManagerEnvironment : NSObject
/// The base URL for the environment.
/// invariant:
/// The URL is an absolute URL that is valid according to RFC 3986, the URL’s path
/// is either empty or has a trailing slash, and the URL has no query or fragment component.
@property (nonatomic, readonly, copy) NSURL * _Nonnull baseURL;
/// Initializes an environment with a base URL.
/// note:
/// If <code>baseURL</code> has a non-empty <code>path</code> that does not end in a slash, the path is modified to
/// include a trailing slash. If <code>baseURL</code> has a query or fragment component, these components are
/// stripped.
/// \param baseURL The base URL to use for the environment. Must be a valid absolute URL
/// according to RFC 3986.
///
///
/// returns:
/// An <code>HTTPManagerEnvironment</code> if the base URL is a valid absolute URL, <code>nil</code> otherwise.
- (nullable instancetype)initWithBaseURL:(NSURL * _Nonnull)baseURL;
- (nullable instancetype)initWithString:(NSString * _Nonnull)string;
/// Returns <code>true</code> if <code>url</code> is prefixed by <code>self.baseURL</code>, <code>false</code> otherwise.
/// For one URL to prefix another, both URLs must have the same scheme, authority info,
/// host, and port, and the first URL’s path must be a prefix of the second URL’s path.
/// Scheme and host are compared case-insensitively, and if the port is nil, an appropriate
/// default value is assumed for the HTTP and HTTPS schemes.
/// \param url The URL to compare against. Must be a valid absolute URL according to RFC 3986,
/// otherwise this method always returns <code>false</code>.
///
- (BOOL)isPrefixOf:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM_NAMED(NSInteger, PMHTTPImageError, "HTTPManagerImageError", closed) {
/// The image returned by the server could not be decoded.
  PMHTTPImageErrorCannotDecode = 0,
};
static NSString * _Nonnull const PMHTTPImageErrorDomain = @"PMHTTP.HTTPManagerImageError";

@class NSOperationQueue;
@class NSURLSessionTask;
@class NSURLSessionTaskMetrics;

/// An object that encapsultes a callback for task metrics and the queue to invoke it on.
SWIFT_CLASS("_TtC6PMHTTP26HTTPManagerMetricsCallback") SWIFT_AVAILABILITY(watchos,introduced=3) SWIFT_AVAILABILITY(tvos,introduced=10) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10)
@interface HTTPManagerMetricsCallback : NSObject
/// The operation queue that the callback will be invoked on.
/// If <code>nil</code>, the callback will be invoked on a global background queue with the <code>.utility</code> QoS.
@property (nonatomic, readonly, strong) NSOperationQueue * _Nullable queue;
/// The callback that will be invoked with task metrics.
/// \param task The task for which metrics were collected.
///
/// \param urlTask The underlying network task for which metrics were collected.
/// This may be different than <code>task.networkTask</code> if the task is configured with
/// automatic retry behavior.
///
/// \param metrics The task metrics that were collected.
///
@property (nonatomic, readonly, copy) void (^ _Nonnull handler)(HTTPManagerTask * _Nonnull, NSURLSessionTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull);
/// The callback that will be invoked with task metrics.
/// \param task The task for which metrics were collected.
///
/// \param metrics The task metrics that were collected.
///
@property (nonatomic, readonly, copy) void (^ _Nonnull callback)(HTTPManagerTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull) SWIFT_DEPRECATED_MSG("Use .handler instead");
/// Returns a new <code>HTTPManagerMetricsCallback</code> object.
/// \param queue The operation queue that the callback will be invoked on. If <code>nil</code>, the
/// callback will be invoked on a global background queue with the <code>.utility</code> QoS.
///
/// \param handler The callback that will be invoked with task metrics.
///
/// \param task The task for which metrics were collected.
///
/// \param urlTask The underlying network task for which metrics were collected.
/// This may be different than <code>task.networkTask</code> if the task is configured with
/// automatic retry behavior.
///
/// \param metrics The task metrics that were collected.
///
- (nonnull instancetype)initWithQueue:(NSOperationQueue * _Nullable)queue handler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSURLSessionTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>HTTPManagerMetricsCallback</code> object.
/// \param queue The operation queue that the callback will be invoked on. If <code>nil</code>, the
/// callback will be invoked on a global background queue with the <code>.utility</code> QoS.
///
/// \param callback The callback that will be invoked with task metrics.
///
/// \param task The task for which metrics were collected.
///
/// \param metrics The task metrics that were collected.
///
- (nonnull instancetype)initWithQueue:(NSOperationQueue * _Nullable)queue callback:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull))callback SWIFT_DEPRECATED_MSG("Use init(queue:handler:) instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that returns a mock response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
/// Retursn a new request that returns a mock plain text response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock plain text response.
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
@end



@class PMHTTPDataResult;

@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data with the specified handler.
/// note:
/// If the server responds with 204 No Content, the parse handler is
/// invoked with an empty data. The handler may choose to return the error
/// <code>HTTPManagerError.unexpectedNoContent</code> if it does not handle this case.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, NSData * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>-resume</code> method.
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>resume()</code> method.
/// \param queue The queue to call the handler on. <code>nil</code> means the handler will
/// be called on a global concurrent queue.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param completion The handler to call when the request is done. This
/// handler is called on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param queue The queue to call the handler on. May be <code>nil</code>.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
@end

@class PMHTTPResult;

/// An HTTP request that has a parse handler.
/// note:
/// This class is only meant to be used from Obj-C.
SWIFT_CLASS("_TtC6PMHTTP29HTTPManagerObjectParseRequest")
@interface HTTPManagerObjectParseRequest : HTTPManagerRequest
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
@property (nonatomic, strong) id <HTTPAuth> _Nullable auth;
@property (nonatomic) BOOL shouldFollowRedirects;
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@property (nonatomic) BOOL allowsCellularAccess;
@property (nonatomic, copy) NSURL * _Nullable mainDocumentURL;
@property (nonatomic) BOOL httpShouldHandleCookies;
@property (nonatomic) BOOL userInitiated;
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
@property (nonatomic) BOOL assumeErrorsAreJSON;
@property (nonatomic) BOOL serverRequiresContentLength;
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
/// The expected MIME type of the response. Defaults to <code>["application/json"]</code>
/// for JSON parse requests, or <code>[]</code> for requests created with <code>-parseWithHandler:</code>.
/// This property is used to generate the <code>Accept</code> header, if not otherwise specified by
/// the request. If multiple values are provided, they’re treated as a priority list
/// for the purposes of the <code>Accept</code> header.
/// This property is also used to validate the MIME type of the response. If the
/// response is a 204 No Content, the MIME type is not checked. For all other 2xx
/// responses, if at least one expected content type is provided, the MIME type
/// must match one of them. If it doesn’t match any, the parse handler will be
/// skipped and <code>HTTPManagerError.unexpectedContentType</code> will be returned as the result.
/// note:
/// The MIME type is only tested if the response includes a <code>Content-Type</code> header.
/// If the <code>Content-Type</code> header is missing, the response will always be assumed to be
/// valid. The value is tested against both the <code>Content-Type</code> header and, if it differs,
/// the <code>NSURLResponse</code> property <code>MIMEType</code>. This is to account for cases where the
/// protocol implementation detects a different content type than the server declared.
/// Each media type in the list may include parameters. These parameters will be included
/// in the <code>Accept</code> header, but will be ignored for the purposes of comparing against the
/// resulting MIME type. If the media type includes a parameter named <code>q</code>, this parameter
/// should be last, as it will be interpreted by the <code>Accept</code> header as the priority
/// instead of as a parameter of the media type.
/// note:
/// Changing the <code>expectedContentTypes</code> does not affect the behavior of the parse
/// handler. If you create a request using <code>-parseAsJSON</code> and then change the
/// <code>expectedContentTypes</code> to <code>["text/plain"]</code>, if the server returns a <code>"text/plain"</code>
/// response, the parse handler will still assume it’s JSON and attempt to decode it.
/// important:
/// The media types in this list will not be checked for validity. They must
/// follow the rules for well-formed media types, otherwise the server may handle the
/// request incorrectly.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull expectedContentTypes;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>-resume</code> method.
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>resume()</code> method.
/// \param queue The queue to call the handler on. <code>nil</code> means the handler will
/// be called on a global concurrent queue.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param completion The handler to call when the request is done. This
/// handler is called on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param queue The queue to call the handler on. May be <code>nil</code>.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that returns a mock response.
/// Requests with a mock response will not hit the network and will not invoke the
/// parse handler.
/// Any network mock inherited from an <code>HTTPManagerNetworkRequest</code> will be overwritten
/// by this method.
/// seealso:
/// <code>mock(headers:value:delay:)</code>.
/// \param value The parsed value to return.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (HTTPManagerObjectParseRequest * _Nonnull)mock:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that returns a mock response.
/// Requests with a mock response will not hit the network and will not invoke the
/// parse handler.
/// Any network mock inherited from an <code>HTTPManagerNetworkRequest</code> will be overwritten
/// by this method.
/// \param headers A collection of HTTP headers to return.
///
/// \param value The parsed object to return.
///
/// \param delay The amount of time in seconds to wait before returning the
/// response.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (HTTPManagerObjectParseRequest * _Nonnull)mockWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers value:(id _Nullable)value delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' with HTTPBasicAuth");
@end





@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' with HTTPBasicAuth");
@end

@class NSNumber;

@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
/// The request method.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestMethod;
/// <code>true</code> if the request is idempotent, otherwise <code>false</code>. A request is idempotent if
/// the side-effects of N > 0 identical requests is the same as for a single request,
/// or in other words, the request can be repeated without changing anything.
/// note:
/// A sequence of several idempotent requests may not be idempotent as a whole.
/// This could be because a later request in the sequence changes something that
/// affects an earlier request.
/// This property normally only affects retry behavior for failed requests, although
/// it could be used for external functionality such as showing a Retry button in an
/// error dialog. The value of this property is exposed on <code>HTTPManagerTask</code> as well.
/// note:
/// When writing external functionality that uses <code>isIdempotent</code> (such as showing
/// a Retry button) it’s generally a good idea to only repeat requests that failed.
/// It should be safe to repeat successful idempotent network requests, but parse requests
/// may have parse handlers with side-effects. If you care about idempotence for successful
/// or canceled requests, you should ensure that all parse handlers are idempotent or
/// mark any relevant parse requests as non-idempotent.
/// The default value is <code>true</code> for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests,
/// and <code>false</code> for POST, PATCH, CONNECT, or unknown request methods.
@property (nonatomic, getter=isIdempotent) BOOL idempotent;
/// The timeout interval of the request, in seconds. If <code>nil</code>, the session’s default
/// timeout interval is used. Default is <code>nil</code>.
@property (nonatomic, strong) NSNumber * _Nullable timeoutInterval;
/// The cache policy to use for the request. If <code>NSURLRequestUseProtocolCachePolicy</code>,
/// the default cache policy is used. Default is <code>NSURLRequestUseProtocolCachePolicy</code>
/// for GET/HEAD requests and <code>NSURLRequestReloadIgnoringLocalCacheData</code> for
/// POST/PUT/PATCH/DELETE requests.
@property (nonatomic, readonly) NSURLRequestCachePolicy cachePolicy;
/// Additional HTTP header fields to pass in the request. Default is the value of
/// <code>HTTPManager.defaultHeaderFields</code> for requests in the current environment, otherwise <code>@{}</code>.
/// If not specified, the request will fill in <code>Accept</code> and <code>Accept-Language</code>
/// automatically when performing the request.
/// note:
/// If <code>self.credential</code> is non-<code>nil</code>, the <code>Authorization</code> header will be
/// ignored. <code>Content-Type</code> and <code>Content-Length</code> are always ignored.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headerFields;
/// Adds an HTTP header to the list of header fields.
/// If a value was previously set for the specified <em>field</em>, the supplied <em>value</em> is appended
/// to the existing value using the appropriate field delimiter.
/// \param value The value for the header field.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)addValue:(NSString * _Nonnull)value forHeaderField:(NSString * _Nonnull)field;
/// Sets a specified HTTP header field.
/// \param value The value for the header field. If <code>nil</code> the header is deleted.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)setValue:(NSString * _Nullable)value forHeaderField:(NSString * _Nonnull)field;
/// Returns a specified HTTP header field, if set.
/// \param field The name of the header field. Header fields are case-insensitive.
///
///
/// returns:
/// The value for the header field, or <code>nil</code> if no value was set.
- (NSString * _Nullable)valueForHeaderField:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents the retry behavior for an HTTP request.
/// Retry behaviors provide a mechanism for requests to automatically retry upon failure before
/// notifying the caller about the failure. Any arbitrary retry behavior can be implemented, but
/// convenience methods are provided for some of the more common behaviors.
/// Unless otherwise specified, retry behaviors are only evaluated for idempotent requests.
/// This is controlled by the <code>isIdempotent</code> property of <code>HTTPManagerRequest</code>, which defaults to
/// <code>true</code> for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests, and <code>false</code> otherwise.
/// note:
/// Retry behaviors are evaluated on an arbitrary dispatch queue.
/// note:
/// If a task is retried after an authentication failure through the use of an <code>HTTPAuth</code>
/// object, the attempt count for <code>HTTPManagerRetryBehavior</code> is reset to zero.
/// note:
/// If the request fails due to a 401 Unauthorized, and the request’s <code>auth</code> property was
/// set, the <code>HTTPManagerRetryBehavior</code> is not consulted. When the <code>auth</code> property is set, the
/// only way to retry a 401 Unauthorized is via the <code>HTTPAuth</code> object.
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerRetryBehavior")
@interface HTTPManagerRetryBehavior : NSObject
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated only for idempotent requests. If the request involves
/// redirections, the original request will be evaluated for idempotence (and in the event of a retry,
/// the original request is the one that is retried).
/// note:
/// The block will be executed on an arbitrary dispatch queue.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)init:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated for all requests regardless of whether the request
/// is idempotent. If the request involves redirections, the original request is the one that is retried.
/// important:
/// Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
/// and only retry those requests where performing the request twice is safe. Your handler shold consult
/// the <code>originalRequest</code> property of the task for making this determination.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)initWithIgnoringIdempotence:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a retry behavior that evaluates an array of behaviors until one of them succeeds.
/// The returned behavior will evaluate the first behavior in the array. If that invokes the
/// callback with <code>false</code> it will evaluate the second, and so on until some behavior has invoked
/// the callback with <code>true</code> or all behaviors have been exhausted.
/// \param retryBehaviors The array of retry behaviors to try in turn.
///
- (nonnull instancetype)initWithAnyRetryBehavior:(NSArray<HTTPManagerRetryBehavior *> * _Nonnull)retryBehaviors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTTPManagerRetryBehavior (SWIFT_EXTENSION(PMHTTP))
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated only for idempotent requests. If the request involves
/// redirections, the original request will be evaluated for idempotence (and in the event of a retry,
/// the original request is the one that is retried).
/// note:
/// The block will be executed on an arbitrary dispatch queue.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)retryBehaviorWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler SWIFT_METHOD_FAMILY(init);
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated for all requests regardless of whether the request
/// is idempotent. If the request involves redirections, the original request is the one that is retried.
/// important:
/// Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
/// and only retry those requests where performing the request twice is safe. Your handler shold consult
/// the <code>originalRequest</code> property of the task for making this determination.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)retryBehaviorIgnoringIdempotenceWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler SWIFT_METHOD_FAMILY(init);
/// Returns a retry behavior that retries once automatically for networking errors.
/// A networking error is defined as many errors in the <code>NSURLErrorDomain</code>, or a
/// <code>PMJSON.JSONParserError</code> with a code of <code>.unexpectedEOF</code> (as this may indicate a
/// truncated response). The request will not be retried for networking errors that
/// are unlikely to change when retrying.
/// If the request is non-idempotent, it only retries if the error indicates that a
/// connection was never made to the server (such as cannot find host).
/// \param including503ServiceUnavailable If <code>YES</code>, retries on a 503 Service Unavailable
/// response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
/// as the server did not handle the original request. If <code>NO</code>, only networking failures
/// are retried.
///
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureOnceIncluding503ServiceUnavailable:(BOOL)including503ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
/// Returns a retry behavior that retries twice automatically for networking errors.
/// The first retry happens immediately, and the second retry happens after a given
/// delay.
/// A networking error is defined as many errors in the <code>NSURLErrorDomain</code>, or a
/// <code>PMJSON.JSONParserError</code> with a code of <code>.unexpectedEOF</code> (as this may indicate a
/// truncated response). The request will not be retried for networking errors that
/// are unlikely to change when retrying.
/// If the request is non-idempotent, it only retries if the error indicates that a
/// connection was never made to the server (such as cannot find host).
/// \param delay The amount of time in seconds to wait before the second retry.
///
/// \param including503ServiceUnavailable If <code>YES</code>, retries on a 503 Service Unavailable
/// response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
/// as the server did not handle the original request. If <code>NO</code>, only networking failures
/// are retried.
///
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureTwiceWithDelay:(NSTimeInterval)delay including503ServiceUnavailable:(BOOL)including503ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
@end

enum HTTPManagerTaskState : unsigned char;

/// An initiated HTTP operation.
/// <em>Thread safety:</em> All methods in this class are safe to call from any thread.
SWIFT_CLASS("_TtC6PMHTTP15HTTPManagerTask")
@interface HTTPManagerTask : NSObject
/// The underlying <code>URLSessionTask</code>.
/// If a failed request is automatically retried, this property value
/// will change.
/// note:
/// This property supports key-value observing.
@property (nonatomic, readonly, strong) NSURLSessionTask * _Nonnull networkTask;
/// The <code>HTTPAuth</code> used to authenticate the request, if any.
@property (nonatomic, readonly, strong) id <HTTPAuth> _Nullable auth;
/// The current state of the task.
/// note:
/// This property is thread-safe and may be accessed concurrently.
/// note:
/// This property supports KVO. The KVO notifications will execute
/// on an arbitrary thread.
@property (nonatomic, readonly) enum HTTPManagerTaskState state;
/// The value of the original request’s <code>userInitiated</code> property.
/// If <code>true</code> this means the task executed at a higher priority than it would have if this
/// property were <code>false</code>.
/// This property can be used to make decisions about things such as what dispatch queue to use
/// when implementing custom retry logic.
@property (nonatomic, readonly) BOOL userInitiated;
+ (BOOL)automaticallyNotifiesObserversForKey:(NSString * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
/// Invokes <code>resume()</code> on the underlying <code>URLSessionTask</code>.
/// important:
/// You should always use this method instead of invoking <code>resume()</code>
/// on the <code>networkTask</code>.
/// note:
/// To suspend the underlying task you can access it with the
/// <code>networkTask</code> property. However, suspending the task will not remove it from
/// the list of outstanding tasks used to control the network activity indicator.
- (void)resume;
/// Cancels the operation, if it hasn’t already completed.
/// If the operation is still talking to the network, the underlying network
/// task is canceled. If the operation is processing the results, the
/// results processor is canceled at the earliest opportunity.
/// Calling this on a task that’s already moved to <code>.completed</code> is a no-op.
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, readonly, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' instead");
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
/// <code>true</code> if the request is idempotent, otherwise <code>false</code>. A request is idempotent if
/// the side-effects of N > 0 identical requests is the same as for a single request,
/// or in other words, the request can be repeated without changing anything.
/// note:
/// A sequence of several idempotent requests may not be idempotent as a whole.
/// This could be because a later request in the sequence changes something that
/// affects an earlier request.
/// This property normally only affects retry behavior for failed requests, although
/// it could be used for external functionality such as showing a Retry button in an
/// error dialog.
@property (nonatomic, readonly, getter=isIdempotent) BOOL idempotent;
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// The state of an <code>HTTPManagerTask</code>.
typedef SWIFT_ENUM(unsigned char, HTTPManagerTaskState, closed) {
/// The task is currently running.
  HTTPManagerTaskStateRunning = 0,
/// The task is processing results (e.g. parsing JSON).
  HTTPManagerTaskStateProcessing = 1,
/// The task has been canceled. The completion handler may or may not
/// have been invoked yet.
  HTTPManagerTaskStateCanceled = 2,
/// The task has completed. The completion handler may or may not have
/// been invoked yet.
  HTTPManagerTaskStateCompleted = 3,
};


/// An HTTP POST/PUT/PATCH request with binary data that does not yet have a parse handler.
/// The body of this request is a given <code>NSData</code> object. Any <code>parameters</code> are passed in the
/// query string.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadDataRequest")
@interface HTTPManagerUploadDataRequest : HTTPManagerActionRequest
/// The data to upload.
@property (nonatomic, copy) NSData * _Nonnull uploadData;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@end

@class HTTPManagerUploadMultipart;

/// An HTTP POST/PUT/PATCH request with form data that does not yet have a parse handler.
/// By default, any request parameters (see <code>HTTPManagerRequest.parameters</code>) are
/// passed as <code>application/x-www-form-urlencoded</code>. Adding any multipart bodies
/// passes everything as <code>multipart/form-data</code> instead. When mixing <em>parameters</em>
/// and multipart bodies, the <em>parameters</em> are sent prior to any multipart bodies.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadFormRequest")
@interface HTTPManagerUploadFormRequest : HTTPManagerActionRequest
/// The URL for the request, including any query items as appropriate.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The Content-Type for the request.
///
/// returns:
/// Either <code>"application/x-www-form-urlencoded"</code> or <code>"multipart/form-data"</code>
/// depending on the nature of the upload.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// Specifies a named multipart body for this request.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> and <code>filename</code> are assumed to be ASCII and not need any escaping.
/// \param data The data for the multipart body, such as an image or text.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
/// \param mimeType The MIME content type of the multipart body. Optional.
///
/// \param filename The filename of the attachment. Optional.
///
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/// Specifies a named multipart body for this request.
/// The Content-Type of the multipart body will always be
/// <code>text/plain; charset=utf-8</code>.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> is assumed to be ASCII and not need any escaping.
/// \param text The text of the multipart body.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
/// Adds a block that’s invoked asynchronously to provide multipart bodies for this request.
/// The block is invoked on an arbitrary thread when task requests a new body stream.
/// Any multipart bodies added by the block will be inserted into the request body.
/// The associated block will only ever be invoked once even if the request is used to create
/// multiple tasks.
/// note:
/// Using this method means that the <code>Content-Length</code> cannot be calculated for this
/// request. When calling APIs that need a defined <code>Content-Length</code> you must provide all
/// of the upload data up-front.
/// seealso:
/// <code>addMultipart(data:withName:mimeType:filename:)</code>,
/// <code>addMultipart(text:withName:)</code>.
/// \param block The block that provides the multipart bodies. This block is
/// invoked on an arbitrary background thread. The <code>HTTPManagerUploadMultipart</code>
/// parameter can be used to add multipart bodies to the request. This object is
/// only valid for the duration of the block’s execution.
///
- (void)addMultipartBodyWithBlock:(void (^ _Nonnull)(HTTPManagerUploadMultipart * _Nonnull))block;
@end






/// An HTTP POST/PUT/PATCH for JSON data that does not yet have a parse handler.
/// The body of this request is a JSON blob. Any <code>parameters</code> are passed in the
/// query string.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadJSONRequest")
@interface HTTPManagerUploadJSONRequest : HTTPManagerActionRequest
/// The Content-Type for the request.
///
/// returns:
/// <code>"application/json"</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@end


@interface HTTPManagerUploadJSONRequest (SWIFT_EXTENSION(PMHTTP))
/// The JSON data to upload.
/// requires:
/// Values assigned to this property must be json-compatible.
@property (nonatomic) id _Nonnull uploadJSON;
@end


/// Helper class for <code>HTTPManagerUploadFormRequest.addMultipartBody(with:)</code>.
SWIFT_CLASS("_TtC6PMHTTP26HTTPManagerUploadMultipart")
@interface HTTPManagerUploadMultipart : NSObject
/// Specifies a named multipart body for this request.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> and <code>filename</code> are assumed to be ASCII and not need any escaping.
/// \param data The data for the multipart body, such as an image or text.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
/// \param mimeType The MIME content type of the multipart body. Optional.
///
/// \param filename The filename of the attachment. Optional.
///
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/// Specifies a named multipart body for this request.
/// The Content-Type of the multipart body will always be
/// <code>text/plain; charset=utf-8</code>.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> is assumed to be ASCII and not need any escaping.
/// \param text The text of the multipart body.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@protocol HTTPMockToken;
@class HTTPMockSequence;

/// Manages a set of mocks for the <code>HTTPManager</code>.
/// The mocks associated with this class may match requests based on path (relative to the environment)
/// or absolute URL. If the path or URL contains any path component of the form <code>:name</code>, any (non-empty)
/// component value will match and the matched value will be made available to block-based mocks.
/// For example the path <code>"users/:id"</code> will match a request for <code>"users/1234"</code> but will not match
/// a request for <code>"users"</code>.
/// All mocks are evaluated in reverse order of addition. This means that if two mocks would match the
/// same URL, whichever mock was added last is used.
/// <em>Thread safety:</em> All methods in this class are safe to call from any thread.
SWIFT_CLASS("_TtC6PMHTTP15HTTPMockManager")
@interface HTTPMockManager : NSObject
/// If <code>true</code>, any URL that is part of the current environment but not handled by any mocks
/// will return an error. The default value is <code>false</code>.
/// note:
/// Testing for unmocked intercepted requests should be done with
/// <code>URLResponse.isUnmockedInterceptedRequest</code>.
/// seealso:
/// interceptUnhandledExternalURLs
@property (nonatomic) BOOL interceptUnhandledEnvironmentURLs;
/// If <code>true</code>, any URL that is not part of the current environment but not handled by any mocks
/// will return an error. The default value is <code>false</code>.
/// note:
/// Testing for unmocked intercepted requests should be done with
/// <code>URLResponse.isUnmockedInterceptedRequest</code>.
/// seealso:
/// interceptUnhandledEnvironmentURLs
@property (nonatomic) BOOL interceptUnhandledExternalURLs;
/// Adds a mock to the mock manager that returns a given response.
/// All requests that match this mock will be given the same response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/// Adds a mock to the mock manager that returns a given plain text response.
/// All requests that match this mock will be given the same response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
/// Adds a mock to the mock manager that returns a given sequence of responses.
/// Each request that matches this mock will be given the next response in the sequence.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param sequence an <code>HTTPMockSequence</code> with the sequence of responses to provide.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod sequence:(HTTPMockSequence * _Nonnull)sequence;
/// Adds a mock to the mock manager that evaluates a block to provide the response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param queue (Optional) A <code>dispatch_queue_t</code> to run the handler on. The default value
/// of <code>nil</code> means to use a private serial queue.
///
/// \param handler A block to execute in order to provide the mock response. The block
/// has arguments <code>request</code>, <code>parameters</code>, and <code>completion</code>. <code>request</code> is the <code>URLRequest</code>
/// that matched the mock. <code>parameters</code> is a dictionary that contains a value for each <code>:name</code>
/// token from the <code>url</code> (note: the key is just <code>"name"</code>, not <code>":name"</code>). <code>completion</code> is a
/// block that must be invoked to provide the response. The <code>completion</code> block may be invoked
/// from any queue, but it is an error to not invoke it at all or to invoke it twice.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod queue:(dispatch_queue_t _Nullable)queue handler:(void (^ _Nonnull)(NSURLRequest * _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull, void (^ _Nonnull)(NSHTTPURLResponse * _Nonnull, NSData * _Nonnull)))handler;
/// Removes a previously-registered mock from the mock manager.
/// Calling this with a token that was already removed, or with a token from another mock
/// manager, is a no-op.
/// \param token An <code>HTTPMockToken</code> returned by a previous call to <code>addMock</code>.
///
- (void)removeMock:(id <HTTPMockToken> _Nonnull)token;
/// Removes all mocks from the mock manager.
- (void)removeAllMocks;
/// Resets the mock manager back to the defaults.
/// This removes all mocks and resets all properties back to their default values.
- (void)reset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPMockManager (SWIFT_EXTENSION(PMHTTP))
/// A convenience function for reading the body data from a <code>URLRequest</code>.
/// If the request has <code>HTTPBody</code> set, it is returned, otherwise if it has <code>HTTPBodyStream</code>,
/// the stream is read to exhaustion. If the request has no body, an empty <code>NSData</code> is returned.
/// warning:
/// If the request has an <code>HTTPBodyStream</code> but it cannot be opened (e.g. because it
/// has already been read), an empty <code>NSData</code> is returned. Similarly, if the stream takes longer
/// than 400ms to open, an empty <code>NSData</code> is returned.
/// This function is primarily intended to be used from within a handler block passed to
/// <code>addMock(for:httpMethod:queue:handler:)</code>.
- (NSData * _Nonnull)dataFromRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@end




/// Represents a sequence of mock responses that will be returned from successive requests
/// that are handled by the same mock.
/// Responses added to the sequence are returned in the same order. If more requests are made
/// than responses added to the sequence, all subsequence requests will return a generic
/// 500 Internal Server Error response. The property <code>repeatsLastResponse</code> can be used to
/// instead repeat the final response over and over.
/// <em>Thread safety:</em> Instances of this class may not be accessed concurrently from multiple
/// threads at the same time.
SWIFT_CLASS("_TtC6PMHTTP16HTTPMockSequence")
@interface HTTPMockSequence : NSObject
/// If <code>true</code>, the last response in the sequence is repeated for all future requests.
/// Otherwise, once the sequence has been exhausted, future requests will serve up a
/// 500 Internal Server Error response. The default value is <code>false</code>.
@property (nonatomic) BOOL repeatsLastResponse;
/// Adds a mock to the sequence that returns a given response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/// Adds a mock to the sequence that returns a given plain text response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A token that can be used to unregister a mock from an <code>HTTPMockManager</code>.
SWIFT_PROTOCOL("_TtP6PMHTTP13HTTPMockToken_")
@protocol HTTPMockToken
@end

@class NSCachedURLResponse;
@protocol NSURLProtocolClient;

SWIFT_CLASS("_TtC6PMHTTP19HTTPMockURLProtocol")
@interface HTTPMockURLProtocol : NSURLProtocol
+ (BOOL)canInitWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
+ (NSURLRequest * _Nonnull)canonicalRequestForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id <NSURLProtocolClient> _Nullable)client OBJC_DESIGNATED_INITIALIZER;
- (void)startLoading;
- (void)stopLoading;
@end


/// The base class for <code>HTTPAuth</code> implementations that refresh their authentication automatically.
/// This class provides support for refreshing authentication information, e.g. for OAuth2 token
/// refresh. It is recommended that you subclass this class in order to provide your own
/// initializer.
/// note:
/// This class assumes that each instance manages a single authentication realm, and makes
/// no provision for refreshing authentication for multiple realms simultaneously.
SWIFT_CLASS("_TtC6PMHTTP19HTTPRefreshableAuth")
@interface HTTPRefreshableAuth : NSObject <HTTPAuth>
/// Returns a new <code>HTTPRefreshableAuth</code>.
/// \param info A value that is used to calculate authentication headers and refresh
/// authentication information. This parameter may have any type, as long as it’s thread-safe.
///
/// \param authenticationHeadersBlock A block that is used to return the authentication
/// headers for a request. The <code>info</code> parameter is provided to this block.
/// This block may be called from any thread.
///
/// \param authenticationRefreshBlock A block that is invoked in response to a 401
/// Unauthorized response in order to refresh the authentication information. This block will
/// not be invoked multiple times concurrent with each other. Any requests that fail while
/// refreshing will use the results of the outstanding refresh.
/// This block returns an optional <code>HTTPManagerTask</code>. If non-<code>nil</code>, the task will be tracked
/// and will be canceled if the <code>HTTPRefreshableAuth</code> is deinited.
/// This block may be called from any thread.
/// The <code>completion</code> parameter to this block must be invoked with the results of the refresh.
/// The first parameter to this block is the new <code>info</code> value that represents the new
/// authentication information, or <code>nil</code> if there is no new info. The second parameter is a
/// boolean that indicates whether the refresh succeeded. If this parameter is <code>true</code> all
/// pending failed tasks are retried with the new info. If <code>false</code> all pending failed tasks
/// will complete with the error <code>HTTPManagerError.unauthorized</code>. The <code>completion</code> block may
/// be invoked from any thread, including being invoked synchronously from
/// <code>authenticationRefreshBlock</code>.
///
- (nonnull instancetype)initWithInfo:(id _Nonnull)info authenticationHeadersBlock:(NSDictionary<NSString *, NSString *> * _Nonnull (^ _Nonnull)(NSURLRequest * _Nonnull, id _Nonnull))authenticationHeadersBlock authenticationRefreshBlock:(HTTPManagerTask * _Nullable (^ _Nonnull)(NSHTTPURLResponse * _Nonnull, NSData * _Nonnull, id _Nonnull, void (^ _Nonnull)(id _Nullable, BOOL)))authenticationRefreshBlock;
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)opaqueTokenForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Invoked when a 401 Unauthorized response is received.
/// The default implementation refreshes the authentication information if necessary. If you
/// override this method, you should call <code>super</code> unless you want to skip refreshing
/// authentication information for any reason.
- (void)handleUnauthorizedResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC6PMHTTP22NetworkActivityManager")
@interface NetworkActivityManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The results of an HTTP request.
SWIFT_CLASS("_TtC6PMHTTP12PMHTTPResult")
@interface PMHTTPResult : NSObject <NSCopying>
/// <code>true</code> iff the task finished successfully.
@property (nonatomic, readonly) BOOL isSuccess;
/// <code>true</code> iff the task failed with an error.
@property (nonatomic, readonly) BOOL isError;
/// <code>true</code> iff the task was canceled before it finished.
@property (nonatomic, readonly) BOOL isCanceled;
/// If the task finished successfully, returns the resulting value, if any.
/// Otherwise, returns <code>nil</code>.
/// note:
/// A successful result may still have a <code>nil</code> value if the parse handler
/// returns <code>nil</code> or if it’s a POST/PUT/PATCH/DELETE request and the response
/// is 204 No Content.
@property (nonatomic, readonly) id _Nullable value;
/// If the task finished successfully, or if it failed with an error
/// during processing after receiving the response, returns the <code>NSURLResponse</code>.
/// Otherwise, if the task failed with a networking error or was canceled,
/// returns <code>nil</code>.
@property (nonatomic, readonly, strong) NSURLResponse * _Nullable response;
/// If the task failed with an error, returns the <code>NSError</code>.
/// Otherwise, returns <code>nil</code>.
/// note:
/// Canceled tasks are not considered to be in error and therefore
/// return <code>nil</code> from both <code>value</code> and <code>error</code>.
@property (nonatomic, readonly, strong) NSError * _Nullable error;
/// Returns the error or canceled state as an <code>NSError</code>, or <code>nil</code> if successful.
/// Canceled results are converted into <code>NSURLErrorCancelled</code> errors.
@property (nonatomic, readonly, strong) NSError * _Nullable objcError;
/// Creates and returns a new <code>PMHTTPResult</code> representing a successful result.
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPResult</code> representing a failed task.
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPResult</code> representing a canceled task.
+ (PMHTTPResult * _Nonnull)canceledResult SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The results of an HTTP request that returns an <code>NSData</code>.
SWIFT_CLASS("_TtC6PMHTTP16PMHTTPDataResult")
@interface PMHTTPDataResult : PMHTTPResult
/// If the task finished successfully, returns the resulting <code>Data</code>, if any.
/// Otherwise, returns <code>nil</code>.
/// note:
/// A successful result may still have a <code>nil</code> value if it’s a
/// POST/PUT/PATCH/DELETE request and the response is 204 No Content.
/// Successful GET/HEAD requests will never have a <code>nil</code> value.
/// note:
/// This property returns the same value that <code>value</code> does.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a successful result.
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a failed task.
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a canceled task.
+ (PMHTTPDataResult * _Nonnull)canceledResult SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response SWIFT_UNAVAILABLE;
@end





@interface NSURLProtocol (SWIFT_EXTENSION(PMHTTP))
/// Returns the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param key The key of the desired property.
///
/// \param request The request whose properties are to be queried.
///
///
/// returns:
/// The property associated with <code>key</code>, or <code>nil</code> if no property has been stored for
/// <code>key</code>.
+ (id _Nullable)propertyForKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Sets the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param value The value to set for the specified property.
///
/// \param key The key for the specified property.
///
/// \param request The request for which to create the property.
///
+ (void)setProperty:(id _Nonnull)value forKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request;
/// Removes the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param key The key whose value should be removed.
///
/// \param request The request from which to remove the property value.
///
+ (void)removePropertyForKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request;
@end


@interface NSURLResponse (SWIFT_EXTENSION(PMHTTP))
/// Returns whether the response represents an unmocked intercepted request.
/// When <code>HTTPMockManager</code> is configured to intercept unmocked requests, this property will
/// return <code>true</code> for the response generated for any such intercepted request. Otherwise it will
/// return <code>false</code> for any mocked request or any request that wasn’t intercepted.
@property (nonatomic, readonly) BOOL pmhttp_IsUnmockedInterceptedRequest;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.3 effective-4.1.50 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PMHTTP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSHTTPURLResponse;
@class HTTPManagerTask;

/// The <code>HTTPAuth</code> protocol defines the common interface that authentication mechanisms can use.
/// This includes the ability to set headers and to handle authorization failures.
SWIFT_PROTOCOL("_TtP6PMHTTP8HTTPAuth_")
@protocol HTTPAuth
/// Returns the headers that should be added to the given request.
/// This is most commonly used to set the <code>"Authorization"</code> header.
/// note:
/// This method may be called from any thread.
/// note:
/// <code>HTTPAuth</code> is not allowed to set <code>"Content-Type"</code>, <code>"Content-Length"</code>, or
/// <code>"Accept"</code>, and any attempt to do so will be ignored.
/// \param request The <code>URLRequest</code> that the headers should be added to.
///
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns an opaque token that is associated with the request.
/// If implemented, this method is called immediately after<code> headers(for:)</code>.
/// note:
/// This method is not guaranteed to be called every time <code>headers(for:)</code> is. Notably,
/// when <code>preparedURLRequest</code> is accessed, <code>headers(for:)</code> will be invoked but not
/// <code>opaqueToken(for:)</code>.
/// This token can be used to uniquely identify the authorization information used for the
/// request. Then in <code>handleUnauthorized(_:for:token:completion:)</code> you can use this token to
/// determine if you’ve already refreshed your stored authorization information or if you need
/// to do extra work (such as fetching a new OAuth2 token) before you can retry the request.
- (id _Nullable)opaqueTokenForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Invoked when a 401 Unauthorized response is received.
/// This method is only called once per request. If this method is invoked and requests a retry,
/// and the subsequent retry fails due to 401 Unauthorized, this is considered a permanent
/// failure. Note that a 403 Forbidden after a 401 Unauthorized may trigger a second retry.
/// note:
/// This method will be called on an arbitrary background thread.
/// note:
/// Special care must be taken when implementing this method. Multiple tasks may be
/// created with the same authorization headers in parallel and may all fail even after you’ve
/// refreshed your authorization information (e.g. with OAuth2). You can use
/// <code>opaqueToken(for:)</code> in order to keep track of whether a given request was created with old
/// authorization information or whether you need to refresh your authorization information.
/// important:
/// The completion block <em>MUST</em> be called once and only once. Failing to call the
/// completion block will leave the task stuck in the processing state forever. Calling the
/// completion block multiple times may cause bad behavior.
/// note:
/// When the completion block is invoked, if the task is not retried, the task’s own
/// completion block may run synchronously on the current queue.
/// \param response The <code>HTTPURLResponse</code> that was received.
///
/// \param body The body that was received.
///
/// \param task The <code>HTTPManagerTask</code> that received the response.
///
/// \param token The opaque token returned from <code>opaqueToken(for:)</code>, otherwise <code>nil</code>.
///
/// \param completion A completion block that must be called when the <code>HTTPAuth</code> object
/// has finished handling the response. This block may be called synchronously, or it may be
/// called from any thread.
///
- (void)handleUnauthorizedResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
/// Invoked when a 403 Forbidden response is received.
/// This is intended for situations where you can’t access a resource with your existing
/// credentials but you can request new credentials that have greater access.
/// This method is only called once per request. If this method is invoked and requests a retry,
/// and the subsequent retry fails due to 403 Forbidden or 401 Unauthorized, this is considered
/// a permanent failure.
/// note:
/// This method will be called on an arbitrary background thread.
/// note:
/// Special care must be taken when implementing this method. Multiple tasks may be
/// created with the same authorization headers in parallel and may all fail even after you’ve
/// refreshed your authorization information (e.g. with OAuth2). You can use
/// <code>opaqueToken(for:)</code> in order to keep track of whether a given request was created with old
/// authorization information or whether you need to refresh your authorization information.
/// important:
/// The completion block <em>MUST</em> be called once and only once. Failing to call the
/// completion block will leave the task stuck in the processing state forever. Calling the
/// completion block multiple times may cause bad behavior.
/// note:
/// When the completion block is invoked, if the task is not retried, the task’s own
/// completion block may run synchronously on the current queue.
/// \param response The <code>HTTPURLResponse</code> that was received.
///
/// \param body The body that was received.
///
/// \param task The <code>HTTPManagerTask</code> that received the response.
///
/// \param token The opaque token returned from <code>opaqueToken(for:)</code>, otherwise <code>nil</code>.
///
/// \param completion A completion block that must be called when the <code>HTTPAuth</code> object
/// has finished handling the response. This block may be called synchronously, or it may be
/// called from any thread.
///
- (void)handleForbiddenResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
/// Returns the localized description for an unauthorized error.
/// \param error The unauthorized error. This will always be an instance of
/// <code>HTTPManagerError.unauthorized</code>.
///
///
/// returns:
/// The string to use for the localized description, or <code>nil</code> to use the default
/// description.
- (NSString * _Nullable)localizedDescriptionForError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLCredential;

/// An <code>HTTPAuth</code> implementation that provides basic auth.
SWIFT_CLASS("_TtC6PMHTTP13HTTPBasicAuth")
@interface HTTPBasicAuth : NSObject <HTTPAuth>
/// The <code>URLCredential</code> that the <code>HTTPBasicAuth</code> was initialized with.
/// This is guaranteed to be a password-based credential.
@property (nonatomic, readonly, strong) NSURLCredential * _Nonnull credential;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Returns a new instance of <code>HTTPBasicAuth</code> from a given password-based credential.
/// \param credential A <code>URLCredential</code>. This must be a password-based credential.
///
///
/// returns:
/// An <code>HTTPBasicAuth</code> instance, or <code>nil</code> if <code>credential</code> isn’t a password-based
/// credential.
- (nullable instancetype)initWithCredential:(NSURLCredential * _Nonnull)credential OBJC_DESIGNATED_INITIALIZER;
/// Returns a new instance of <code>HTTPBasicAuth</code> with the given username and password.
/// note:
/// The <code>URLCredential</code> that this creates has a persistence of <code>.none</code>.
/// \param username The username to use.
///
/// \param password The password to use.
///
///
/// returns:
/// An <code>HTTPBasicAuth</code> instance.
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class HTTPManagerEnvironment;
@class NSURLSessionConfiguration;
@class NSURLAuthenticationChallenge;
@class HTTPManagerMetricsCallback;
@class HTTPManagerRetryBehavior;
@class HTTPMockManager;

/// Manages access to a REST API.
/// This class is thread-safe. Requests may be created and used from any thread.
/// <code>HTTPManagerRequest</code>s support concurrent reading from multiple threads, but it is not safe to mutate
/// a request while concurrently accessing it from another thread. <code>HTTPManagerTask</code>s are safe to access
/// from any thread.
SWIFT_CLASS("_TtC6PMHTTP11HTTPManager")
@interface HTTPManager : NSObject
/// A block that is invoked whenever the number of outstanding <code>HTTPManagerTask</code>s changes.
/// If the value of this property changes while there are outstanding tasks, the old
/// value is not invoked, but the new value will be invoked asynchronously with the current
/// number of tasks. If there are no outstanding tasks the new value will not be invoked.
/// note:
/// This block is always invoked on the main thread.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable networkActivityHandler)(NSInteger);)
+ (void (^ _Nullable)(NSInteger))networkActivityHandler SWIFT_WARN_UNUSED_RESULT;
+ (void)setNetworkActivityHandler:(void (^ _Nullable)(NSInteger))newValue;
/// The current environment. The default value is <code>nil</code>.
/// Changes to this property affects any newly-created requests but do not
/// affect any existing requests or any tasks that are in-progress.
/// Changing this property also resets the default auth if the new value differs from the old
/// one. Setting this property to the existing value has no effect.
/// important:
/// If <code>environment</code> is <code>nil</code>, requests created with relative paths will fail,
/// but requests created with absolute URLs will continue to work. See <code>HTTPManagerConfigurable</code>
/// for how to configure the shared <code>HTTPManager</code> prior to first use.
/// seealso:
/// <code>resetSession()</code>, <code>HTTPManagerConfigurable</code>, <code>defaultAuth</code>,
/// <code>defaultServerRequiresContentLength</code>.
@property (nonatomic, strong) HTTPManagerEnvironment * _Nullable environment;
/// The URL session configuration.
/// Changing mutable values within the configuration object has no effect on the
/// HTTP manager, but you can reassign this property with the modified
/// configuration object.
/// Changing this property affects all newly-created tasks but does not cancel
/// any tasks that are in-flight. You can use <code>resetSession()</code> if you need to
/// cancel any in-flight tasks.
/// seealso:
/// <code>resetSession()</code>
@property (nonatomic, strong) NSURLSessionConfiguration * _Nonnull sessionConfiguration;
/// The authentication handler for session-level authentication challenges.
/// This handler is invoked for all session-level authentication challenges. At the time of this
/// writing, these challenges are <code>NSURLAuthenticationMethodNTLM</code>,
/// <code>NSURLAuthenticationMethodNegotiate</code>, <code>NSURLAuthenticationMethodClientCertificate</code>, and
/// <code>NSURLAuthenticationMethodServerTrust</code>.
/// The default value of <code>nil</code> means to use the system-provided default behavior.
/// This property is typically used to implement SSL Pinning using something like
/// <a href="https://github.com/datatheorem/TrustKit">TrustKit</a>.
/// important:
/// This handler must invoke its completion handler.
/// seealso:
/// <code>URLSessionDelegate.urlSession(_:didReceive:completionHandler:)</code>.
/// \param httpManager The <code>HTTPManager</code> that the session belongs to.
///
/// \param challenge the <code>URLAuthenticationChallenge</code> that contains the request for
/// authentication.
///
/// \param completionHandler A completion block that must be invoked with the results.
///
@property (nonatomic, copy) void (^ _Nullable sessionLevelAuthenticationHandler)(HTTPManager * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));
/// The callback that will be invoked whenever task metrics are collected.
/// This callback is invoked every time the underlying <code>URLSession</code> collects task metrics for a
/// task. This means if the task is automatically retried, metrics may be collected multiple
/// times.
/// note:
/// As task metric collection is not free, task metrics are only collected for tasks
/// when the <code>metricsCallback</code> was non-<code>nil</code> prior to the task being created. Furthermore,
/// assigning the <code>metricsCallback</code> to <code>nil</code> disables task metric reporting for all
/// outstanding tasks, even if the <code>metricsCallback</code> is subsequently assigned to a non-<code>nil</code>
/// value again before the outstanding task completes.
/// note:
/// The callback will be scheduled on the configured operation queue immediately from
/// within the <code>URLSession</code> delegate method. This means that if the same serial operation
/// queue is used both for the metrics callback and as the completion queue for the task
/// itself, the metrics will be collected before the task’s completion block is executed.
/// note:
/// Changing or clearing this property after a task has finished but before it has
/// executed the metrics callback won’t prevent the old callback from executing, even if this
/// property is cleared from the same operation queue that the callback is scheduled on.
@property (nonatomic, strong) HTTPManagerMetricsCallback * _Nullable metricsCallback SWIFT_AVAILABILITY(watchos,introduced=3) SWIFT_AVAILABILITY(tvos,introduced=10) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10);
/// The auth to use for HTTP requests. The default value is <code>nil</code>.
/// Individual requests may override this auth with their own auth.
/// Changes to this property affect any newly-created requests but do not affect any existing
/// requests or any tasks that are in-progress.
/// note:
/// This auth is only used for HTTP requests that are located within the current
/// environment’s base URL. If a request is created with an absolute path or absolute URL, and
/// the resulting URL does not represent a resource found within the environment’s base URL,
/// the request will not be assigned the default auth.
/// seealso:
/// <code>environment</code>, <code>HTTPBasicAuth</code>, <code>HTTPManagerRequest.auth</code>.
@property (nonatomic, strong) id <HTTPAuth> _Nullable defaultAuth;
/// The default retry behavior to use for requests. The default value is <code>nil</code>.
/// Individual requests may override this behavior with their own behavior.
/// Changes to this property affect any newly-created requests but do not affect
/// any existing requests or any tasks that are in-progress.
/// seealso:
/// <code>HTTPManagerRequest.retryBehavior</code>.
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable defaultRetryBehavior;
/// Whether errors should be assumed to be JSON. The default value is <code>false</code>.
/// If <code>true</code>, all error bodies are parsed as JSON regardless of their declared
/// Content-Type. This setting is intended to work around bad servers that
/// don’t declare their Content-Types properly.
/// Changes to this property affect any newly-created requests but do not affect
/// any existing requests or any tasks that are in-progress.
/// seealso:
/// <code>HTTPManagerRequest.assumeErrorsAreJSON</code>.
@property (nonatomic) BOOL defaultAssumeErrorsAreJSON;
/// If <code>true</code>, assume the server requires the <code>Content-Length</code> header for uploads. The default
/// value is <code>false</code>.
/// Setting this to <code>true</code> forces JSON and multipart/mixed uploads to be encoded synchronously
/// when the request is performed rather than happening in the background.
/// note:
/// This property is only used for HTTP requests that are located within the current
/// environment’s base URL. If a request is created with an absolute path or absolute URL, and
/// the resulting URL does not represent a resource found within the environment’s base URL,
/// the request will not be assigned this value.
/// Changes to this property affect any newly-created requests but do not affect any existing
/// requests or any tasks that are in-progress.
/// seealso:
/// <code>environment</code>, <code>HTTPManagerRequest.serverRequiresContentLength</code>.
@property (nonatomic) BOOL defaultServerRequiresContentLength;
/// The user agent that’s passed to every request.
@property (nonatomic, readonly, copy) NSString * _Nonnull userAgent;
/// An <code>HTTPMockManager</code> that can be used to define mocks for this <code>HTTPManager</code>.
@property (nonatomic, readonly, strong) HTTPMockManager * _Nonnull mockManager;
/// Invalidates all in-flight network operations and resets the URL session.
/// note:
/// Any tasks that have finished their network portion and are processing
/// the results are not canceled.
- (void)resetSession;
/// Creates and returns a new <code>HTTPManager</code>.
/// The returned <code>HTTPManager</code> needs its <code>environment</code> set, but is otherwise ready
/// for use.
/// important:
/// Unlike the global <code>HTTP</code> property, calling this initializer does
/// not go through <code>HTTPManagerConfigurable</code>. The calling code must configure
/// the returned <code>HTTPManager</code> instance as appropriate.
/// seealso:
/// <code>HTTP</code>.
- (nonnull instancetype)init;
@end






@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable defaultCredential SWIFT_DEPRECATED_MSG("use 'defaultAuth' with HTTPBasicAuth");
@end

@class NSURLResponse;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// Parses the <code>Date</code> header from a URL response and returns it.
/// \param response A <code>URLResponse</code> that the header is pulled from. If this
/// is not an <code>HTTPURLResponse</code>, <code>nil</code> is returned.
///
///
/// returns:
/// An <code>NSDate</code>, or <code>nil</code> if the header doesn’t exist or has an invalid format.
+ (NSDate * _Nullable)parsedDateHeaderFromResponse:(NSURLResponse * _Nonnull)response SWIFT_WARN_UNUSED_RESULT;
/// Parses a header value that is formatted like the “Date” HTTP header.
/// This parses the specific format allowed for the “Date” header, and any
/// other header that uses the <code>HTTP-date</code> production.
/// See <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">section 3.3.1 of RFC 2616</a> for details.
/// \param dateString The string value of the HTTP header.
///
///
/// returns:
/// An <code>NSDate</code>, or <code>nil</code> if <code>dateString</code> contains an invalid format.
+ (NSDate * _Nullable)parsedDateHeaderFromString:(NSString * _Nonnull)dateString SWIFT_WARN_UNUSED_RESULT;
@end

@class HTTPManagerDataRequest;
@class HTTPManagerActionRequest;
@class HTTPManagerUploadFormRequest;
@class HTTPManagerUploadDataRequest;
@class HTTPManagerUploadJSONRequest;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// The default <code>HTTPManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HTTPManager * _Nonnull defaultManager;)
+ (HTTPManager * _Nonnull)defaultManager SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull defaultHeaderFields;
/// Adds an HTTP header to the list of default header fields.
/// If a value was previously set for the specified <em>field</em>, the supplied <em>value</em> is appended
/// to the existing value using the appropriate field delimiter.
/// \param value The value for the header field.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)addValue:(NSString * _Nonnull)value forDefaultHeaderField:(NSString * _Nonnull)field;
/// Sets a specified default HTTP header field.
/// \param value The value for the header field. If <code>nil</code> the header is deleted.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)setValue:(NSString * _Nullable)value forDefaultHeaderField:(NSString * _Nonnull)field;
/// Returns a specified default HTTP header field, if set.
/// \param field The name of the header field. Header fields are case-insensitive.
///
///
/// returns:
/// The value for the header field, or <code>nil</code> if no value was set.
- (NSString * _Nullable)valueForDefaultHeaderField:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPOSTWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPUTWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPATCHWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end


/// An HTTP request.
/// <em>Thread safety:</em>
/// This class can be safely read from concurrent threads, but any modifications require exclusive access.
SWIFT_CLASS("_TtC6PMHTTP18HTTPManagerRequest")
@interface HTTPManagerRequest : NSObject <NSCopying>
/// The URL for the request, including any query items as appropriate.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The Content-Type for the request.
/// If no data is being submitted in the request body, the <code>contentType</code>
/// will be empty.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// The request parameters, or <code>[]</code> if there are no parameters.
/// The parameters are passed by default in the URL query string.
/// Subclasses may override this behavior.
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/// The <code>HTTPAuth</code> value to use for the request. Default is the value of
/// <code>HTTPManager.defaultAuth</code> for requests in the current environment, otherwise <code>nil</code>.
/// seealso:
/// <code>HTTPBasicAuth</code>, <code>HTTPManager.defaultAuth</code>.
@property (nonatomic, strong) id <HTTPAuth> _Nullable auth;
/// The default cache storage policy to use for the response if the response does not
/// include appropriate caching headers. If the response does include appropriate headers
/// such as <code>Cache-Control</code> or <code>Expires</code>, this property is ignored.
/// This property only establishes an upper bound on the cache storage allowed. If the
/// URL session proposes to store the cached response in-memory only and the default policy
/// is set to <code>.allowed</code>, the response will still be stored in-memory only, and if the URL
/// session proposes to not cache the response at all, the response will not be cached.
/// The default value is <code>.allowed</code> for most requests, and <code>.notAllowed</code> for parse requests
/// created from <code>parseAsJSON()</code> or <code>parseAsJSON(with:)</code>.
@property (nonatomic) NSURLCacheStoragePolicy defaultResponseCacheStoragePolicy;
/// <code>true</code> iff redirects should be followed when processing the response.
/// If <code>false</code>, network requests return a successful result containing the redirection
/// response, and parse requests return an error with <code>HTTPManagerError.unexpectedRedirect</code>.
/// Default is <code>true</code>.
@property (nonatomic) BOOL shouldFollowRedirects;
/// Indicates whether the request is allowed to use the cellular radio. Default is <code>true</code>.
/// If the session configuration’s <code>allowsCellularAccess</code> is <code>false</code>, access to the cellular
/// radio is always denied regardless of the request’s <code>allowsCellularAccess</code> property.
@property (nonatomic) BOOL allowsCellularAccess;
/// The main document URL associated with the request.
/// This URL is used for the cookie “same domain as main document” policy.
/// seealso:
/// <code>URLRequest.mainDocumentURL</code>.
@property (nonatomic, copy) NSURL * _Nullable mainDocumentURL;
/// Indicates whether cookies will be sent with and set for this request. Default is <code>true</code>.
@property (nonatomic) BOOL httpShouldHandleCookies;
/// Whether the request represents an action the user is waiting on.
/// Set this to <code>true</code> to increase the priority. Default is <code>false</code>.
@property (nonatomic) BOOL userInitiated;
/// The retry behavior to use for the request. Default is the value of
/// <code>HTTPManager.defaultRetryBehavior</code> for requests in the current environment, otherwise <code>nil</code>.
/// seealso:
/// <code>HTTPManager.defaultRetryBehavior</code>.
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
/// Whether errors should be assumed to be JSON.
/// If <code>true</code>, all error bodies are parsed as JSON regardless of their declared
/// Content-Type. This setting is intended to work around bad servers that
/// don’t declare their Content-Types properly.
/// The default value is provided by <code>HTTPManager.defaultAssumeErrorsAreJSON</code>.
/// seealso:
/// <code>HTTPManager.defaultAssumeErrorsAreJSON</code>.
@property (nonatomic) BOOL assumeErrorsAreJSON;
/// If <code>true</code>, assume the server requires the <code>Content-Length</code> header for uploads. The default
/// value is <code>false</code>.
/// Setting this to <code>true</code> forces JSON and multipart/mixed uploads to be encoded synchronously
/// when the request is performed rather than happening in the background.
/// The default value is provided by <code>HTTPManager.defaultServerRequiresContentLength</code>.
/// seealso:
/// <code>HTTPManager.defaultServerRequiresContentLength</code>.
@property (nonatomic) BOOL serverRequiresContentLength;
/// Whether tasks created from this request should affect the visiblity of the
/// network activity indicator. Default is <code>true</code>.
/// Strictly speaking, this controls whether the task is visible to the network activity
/// handler (if any), and it’s the handler’s job to show the activity indicator.
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
/// Sets properties whose default values depend on the environment.
/// This will set all properties whose default value depends on the environment to the value
/// they would have if the request was located within the environment. For example, this will
/// set the <code>auth</code> property to <code>HTTP.defaultAuth</code>.
/// This is intended for use with requests that are constructed using an absolute path (and
/// therefore are still at the same domain), but want to be treated as though they’re within the
/// environment path.
/// <em>Example:</em>
/// \code
/// HTTP.request(GET: "/foo")
///     .with({ $0.setDefaultEnvironmentalProperties() })
///     .performRequest { task, result in
///         // ....
/// }
///
/// \endcode
- (void)setDefaultEnvironmentalProperties;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An HTTP request that does not yet have a parse handler.
SWIFT_CLASS("_TtC6PMHTTP25HTTPManagerNetworkRequest")
@interface HTTPManagerNetworkRequest : HTTPManagerRequest
/// The request parameters, or <code>[]</code> if there are no parameters.
/// The parameters are passed by default in the URL query string.
/// Subclasses may override this behavior.
@property (nonatomic, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/// Creates and returns a <code>URLRequest</code> object from the properties of <code>self</code>.
/// For upload requests, the request will include the <code>HTTPBody</code> or <code>HTTPBodyStream</code>
/// as appropriate.
@property (nonatomic, readonly, copy) NSURLRequest * _Nonnull preparedURLRequest;
@end


/// An HTTP POST/PUT/PATCH/DELETE request that does not yet have a parse handler.
/// Similar to an <code>HTTPManagerDataRequest</code> except that it handles 204 No Content
/// instead of throwing <code>HTTPManagerError.unexpectedNoContent</code>.
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerActionRequest")
@interface HTTPManagerActionRequest : HTTPManagerNetworkRequest
@end



@class HTTPManagerObjectParseRequest;
@class NSError;

@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as JSON.
/// Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// The parse result is <code>nil</code> if and only if the server responded with
/// 204 No Content.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON.
/// note:
/// The parse result is <code>nil</code> if and only if the server responded with
/// 204 No Content.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler. Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the <code>json</code> argument to the handler is <code>nil</code>, this means the server
/// responded with 204 No Content and the <code>response</code> argument is guaranteed
/// to be an instance of <code>NSHTTPURLResponse</code>.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler.
/// note:
/// If the <code>json</code> argument to the handler is <code>nil</code>, this means the server
/// responded with 204 No Content and the <code>response</code> argument is guaranteed
/// to be an instance of <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the parse result is <code>nil</code>, this means the server responded with 204 No
/// Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImage SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the parse result is <code>nil</code>, this means the server responded with 204 No
/// Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// \param scale The scale to use for the resulting image.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the <code>value</code> argument to the handler is <code>nil</code>, this means the server responded
/// with 204 No Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the <code>value</code> argument to the handler is <code>nil</code>, this means the server responded
/// with 204 No Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param scale The scale to use for the resulting image.
///
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale handler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


/// A protocol that provides hooks for configuring the shared <code>HTTPManager</code>.
/// If the application delegate conforms to this protocol, it will be asked to configure the shared <code>HTTPManager</code>.
/// This will occur on first access to the global <code>HTTP</code> property.
SWIFT_PROTOCOL("_TtP6PMHTTP23HTTPManagerConfigurable_")
@protocol HTTPManagerConfigurable
/// Invoked on first access to the global <code>HTTP</code> property.
/// note:
/// You should not create any requests from within this method. Doing so is not
/// supported and will likely result in a misconfigured request.
/// important:
/// You MUST NOT access the global <code>HTTP</code> property from within this method.
/// Any attempt to do so will deadlock as the property has not finished initializing.
- (void)configureWithHttpManager:(HTTPManager * _Nonnull)httpManager;
- (void)configureHTTPManager:(HTTPManager * _Nonnull)httpManager SWIFT_UNAVAILABLE_MSG("'configureHTTPManager' has been renamed to 'configureWithHttpManager:'");
@end


/// An HTTP GET/HEAD request that does not yet have a parse handler.
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerDataRequest")
@interface HTTPManagerDataRequest : HTTPManagerNetworkRequest
@end




@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImage SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// \param scale The scale to use for the resulting image.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param scale The scale to use for the resulting image.
///
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale handler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
/// The cache policy to use for the request. If <code>NSURLRequestUseProtocolCachePolicy</code>,
/// the default cache policy is used. Default is <code>NSURLRequestUseProtocolCachePolicy</code>.
@property (nonatomic) NSURLRequestCachePolicy cachePolicy;
/// Returns a new request that parses the data as JSON.
/// Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler. Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


/// The environment for an <code>HTTPManager</code>.
/// This class does not define any default environments. You can extend this class in your application
/// to add environment definitions for convenient access. For example:
/// \code
/// extension HTTPManagerEnvironment {
///     /// The Production environment.
///     @nonobjc static let Production = HTTPManagerEnvironment(baseURL: URL(string: "https://example.com/api/v1")!)!
///     /// The Staging environment.
///     @nonobjc static let Staging = HTTPManagerEnvironment(baseURL: URL(string: "https://stage.example.com/api/v1")!)!
/// }
///
/// \endcodeYou can also use <code>HTTPManagerConfigurable</code> to configure the initial environment on the shared <code>HTTPManager</code>.
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerEnvironment")
@interface HTTPManagerEnvironment : NSObject
/// The base URL for the environment.
/// invariant:
/// The URL is an absolute URL that is valid according to RFC 3986, the URL’s path
/// is either empty or has a trailing slash, and the URL has no query or fragment component.
@property (nonatomic, readonly, copy) NSURL * _Nonnull baseURL;
/// Initializes an environment with a base URL.
/// note:
/// If <code>baseURL</code> has a non-empty <code>path</code> that does not end in a slash, the path is modified to
/// include a trailing slash. If <code>baseURL</code> has a query or fragment component, these components are
/// stripped.
/// \param baseURL The base URL to use for the environment. Must be a valid absolute URL
/// according to RFC 3986.
///
///
/// returns:
/// An <code>HTTPManagerEnvironment</code> if the base URL is a valid absolute URL, <code>nil</code> otherwise.
- (nullable instancetype)initWithBaseURL:(NSURL * _Nonnull)baseURL;
- (nullable instancetype)initWithString:(NSString * _Nonnull)string;
/// Returns <code>true</code> if <code>url</code> is prefixed by <code>self.baseURL</code>, <code>false</code> otherwise.
/// For one URL to prefix another, both URLs must have the same scheme, authority info,
/// host, and port, and the first URL’s path must be a prefix of the second URL’s path.
/// Scheme and host are compared case-insensitively, and if the port is nil, an appropriate
/// default value is assumed for the HTTP and HTTPS schemes.
/// \param url The URL to compare against. Must be a valid absolute URL according to RFC 3986,
/// otherwise this method always returns <code>false</code>.
///
- (BOOL)isPrefixOf:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM_NAMED(NSInteger, PMHTTPImageError, "HTTPManagerImageError", closed) {
/// The image returned by the server could not be decoded.
  PMHTTPImageErrorCannotDecode = 0,
};
static NSString * _Nonnull const PMHTTPImageErrorDomain = @"PMHTTP.HTTPManagerImageError";

@class NSOperationQueue;
@class NSURLSessionTask;
@class NSURLSessionTaskMetrics;

/// An object that encapsultes a callback for task metrics and the queue to invoke it on.
SWIFT_CLASS("_TtC6PMHTTP26HTTPManagerMetricsCallback") SWIFT_AVAILABILITY(watchos,introduced=3) SWIFT_AVAILABILITY(tvos,introduced=10) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10)
@interface HTTPManagerMetricsCallback : NSObject
/// The operation queue that the callback will be invoked on.
/// If <code>nil</code>, the callback will be invoked on a global background queue with the <code>.utility</code> QoS.
@property (nonatomic, readonly, strong) NSOperationQueue * _Nullable queue;
/// The callback that will be invoked with task metrics.
/// \param task The task for which metrics were collected.
///
/// \param urlTask The underlying network task for which metrics were collected.
/// This may be different than <code>task.networkTask</code> if the task is configured with
/// automatic retry behavior.
///
/// \param metrics The task metrics that were collected.
///
@property (nonatomic, readonly, copy) void (^ _Nonnull handler)(HTTPManagerTask * _Nonnull, NSURLSessionTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull);
/// The callback that will be invoked with task metrics.
/// \param task The task for which metrics were collected.
///
/// \param metrics The task metrics that were collected.
///
@property (nonatomic, readonly, copy) void (^ _Nonnull callback)(HTTPManagerTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull) SWIFT_DEPRECATED_MSG("Use .handler instead");
/// Returns a new <code>HTTPManagerMetricsCallback</code> object.
/// \param queue The operation queue that the callback will be invoked on. If <code>nil</code>, the
/// callback will be invoked on a global background queue with the <code>.utility</code> QoS.
///
/// \param handler The callback that will be invoked with task metrics.
///
/// \param task The task for which metrics were collected.
///
/// \param urlTask The underlying network task for which metrics were collected.
/// This may be different than <code>task.networkTask</code> if the task is configured with
/// automatic retry behavior.
///
/// \param metrics The task metrics that were collected.
///
- (nonnull instancetype)initWithQueue:(NSOperationQueue * _Nullable)queue handler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSURLSessionTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>HTTPManagerMetricsCallback</code> object.
/// \param queue The operation queue that the callback will be invoked on. If <code>nil</code>, the
/// callback will be invoked on a global background queue with the <code>.utility</code> QoS.
///
/// \param callback The callback that will be invoked with task metrics.
///
/// \param task The task for which metrics were collected.
///
/// \param metrics The task metrics that were collected.
///
- (nonnull instancetype)initWithQueue:(NSOperationQueue * _Nullable)queue callback:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull))callback SWIFT_DEPRECATED_MSG("Use init(queue:handler:) instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that returns a mock response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
/// Retursn a new request that returns a mock plain text response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock plain text response.
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
@end



@class PMHTTPDataResult;

@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data with the specified handler.
/// note:
/// If the server responds with 204 No Content, the parse handler is
/// invoked with an empty data. The handler may choose to return the error
/// <code>HTTPManagerError.unexpectedNoContent</code> if it does not handle this case.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, NSData * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>-resume</code> method.
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>resume()</code> method.
/// \param queue The queue to call the handler on. <code>nil</code> means the handler will
/// be called on a global concurrent queue.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param completion The handler to call when the request is done. This
/// handler is called on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param queue The queue to call the handler on. May be <code>nil</code>.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
@end

@class PMHTTPResult;

/// An HTTP request that has a parse handler.
/// note:
/// This class is only meant to be used from Obj-C.
SWIFT_CLASS("_TtC6PMHTTP29HTTPManagerObjectParseRequest")
@interface HTTPManagerObjectParseRequest : HTTPManagerRequest
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
@property (nonatomic, strong) id <HTTPAuth> _Nullable auth;
@property (nonatomic) BOOL shouldFollowRedirects;
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@property (nonatomic) BOOL allowsCellularAccess;
@property (nonatomic, copy) NSURL * _Nullable mainDocumentURL;
@property (nonatomic) BOOL httpShouldHandleCookies;
@property (nonatomic) BOOL userInitiated;
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
@property (nonatomic) BOOL assumeErrorsAreJSON;
@property (nonatomic) BOOL serverRequiresContentLength;
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
/// The expected MIME type of the response. Defaults to <code>["application/json"]</code>
/// for JSON parse requests, or <code>[]</code> for requests created with <code>-parseWithHandler:</code>.
/// This property is used to generate the <code>Accept</code> header, if not otherwise specified by
/// the request. If multiple values are provided, they’re treated as a priority list
/// for the purposes of the <code>Accept</code> header.
/// This property is also used to validate the MIME type of the response. If the
/// response is a 204 No Content, the MIME type is not checked. For all other 2xx
/// responses, if at least one expected content type is provided, the MIME type
/// must match one of them. If it doesn’t match any, the parse handler will be
/// skipped and <code>HTTPManagerError.unexpectedContentType</code> will be returned as the result.
/// note:
/// The MIME type is only tested if the response includes a <code>Content-Type</code> header.
/// If the <code>Content-Type</code> header is missing, the response will always be assumed to be
/// valid. The value is tested against both the <code>Content-Type</code> header and, if it differs,
/// the <code>NSURLResponse</code> property <code>MIMEType</code>. This is to account for cases where the
/// protocol implementation detects a different content type than the server declared.
/// Each media type in the list may include parameters. These parameters will be included
/// in the <code>Accept</code> header, but will be ignored for the purposes of comparing against the
/// resulting MIME type. If the media type includes a parameter named <code>q</code>, this parameter
/// should be last, as it will be interpreted by the <code>Accept</code> header as the priority
/// instead of as a parameter of the media type.
/// note:
/// Changing the <code>expectedContentTypes</code> does not affect the behavior of the parse
/// handler. If you create a request using <code>-parseAsJSON</code> and then change the
/// <code>expectedContentTypes</code> to <code>["text/plain"]</code>, if the server returns a <code>"text/plain"</code>
/// response, the parse handler will still assume it’s JSON and attempt to decode it.
/// important:
/// The media types in this list will not be checked for validity. They must
/// follow the rules for well-formed media types, otherwise the server may handle the
/// request incorrectly.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull expectedContentTypes;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>-resume</code> method.
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>resume()</code> method.
/// \param queue The queue to call the handler on. <code>nil</code> means the handler will
/// be called on a global concurrent queue.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param completion The handler to call when the request is done. This
/// handler is called on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param queue The queue to call the handler on. May be <code>nil</code>.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that returns a mock response.
/// Requests with a mock response will not hit the network and will not invoke the
/// parse handler.
/// Any network mock inherited from an <code>HTTPManagerNetworkRequest</code> will be overwritten
/// by this method.
/// seealso:
/// <code>mock(headers:value:delay:)</code>.
/// \param value The parsed value to return.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (HTTPManagerObjectParseRequest * _Nonnull)mock:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that returns a mock response.
/// Requests with a mock response will not hit the network and will not invoke the
/// parse handler.
/// Any network mock inherited from an <code>HTTPManagerNetworkRequest</code> will be overwritten
/// by this method.
/// \param headers A collection of HTTP headers to return.
///
/// \param value The parsed object to return.
///
/// \param delay The amount of time in seconds to wait before returning the
/// response.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (HTTPManagerObjectParseRequest * _Nonnull)mockWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers value:(id _Nullable)value delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' with HTTPBasicAuth");
@end





@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' with HTTPBasicAuth");
@end

@class NSNumber;

@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
/// The request method.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestMethod;
/// <code>true</code> if the request is idempotent, otherwise <code>false</code>. A request is idempotent if
/// the side-effects of N > 0 identical requests is the same as for a single request,
/// or in other words, the request can be repeated without changing anything.
/// note:
/// A sequence of several idempotent requests may not be idempotent as a whole.
/// This could be because a later request in the sequence changes something that
/// affects an earlier request.
/// This property normally only affects retry behavior for failed requests, although
/// it could be used for external functionality such as showing a Retry button in an
/// error dialog. The value of this property is exposed on <code>HTTPManagerTask</code> as well.
/// note:
/// When writing external functionality that uses <code>isIdempotent</code> (such as showing
/// a Retry button) it’s generally a good idea to only repeat requests that failed.
/// It should be safe to repeat successful idempotent network requests, but parse requests
/// may have parse handlers with side-effects. If you care about idempotence for successful
/// or canceled requests, you should ensure that all parse handlers are idempotent or
/// mark any relevant parse requests as non-idempotent.
/// The default value is <code>true</code> for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests,
/// and <code>false</code> for POST, PATCH, CONNECT, or unknown request methods.
@property (nonatomic, getter=isIdempotent) BOOL idempotent;
/// The timeout interval of the request, in seconds. If <code>nil</code>, the session’s default
/// timeout interval is used. Default is <code>nil</code>.
@property (nonatomic, strong) NSNumber * _Nullable timeoutInterval;
/// The cache policy to use for the request. If <code>NSURLRequestUseProtocolCachePolicy</code>,
/// the default cache policy is used. Default is <code>NSURLRequestUseProtocolCachePolicy</code>
/// for GET/HEAD requests and <code>NSURLRequestReloadIgnoringLocalCacheData</code> for
/// POST/PUT/PATCH/DELETE requests.
@property (nonatomic, readonly) NSURLRequestCachePolicy cachePolicy;
/// Additional HTTP header fields to pass in the request. Default is the value of
/// <code>HTTPManager.defaultHeaderFields</code> for requests in the current environment, otherwise <code>@{}</code>.
/// If not specified, the request will fill in <code>Accept</code> and <code>Accept-Language</code>
/// automatically when performing the request.
/// note:
/// If <code>self.credential</code> is non-<code>nil</code>, the <code>Authorization</code> header will be
/// ignored. <code>Content-Type</code> and <code>Content-Length</code> are always ignored.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headerFields;
/// Adds an HTTP header to the list of header fields.
/// If a value was previously set for the specified <em>field</em>, the supplied <em>value</em> is appended
/// to the existing value using the appropriate field delimiter.
/// \param value The value for the header field.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)addValue:(NSString * _Nonnull)value forHeaderField:(NSString * _Nonnull)field;
/// Sets a specified HTTP header field.
/// \param value The value for the header field. If <code>nil</code> the header is deleted.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)setValue:(NSString * _Nullable)value forHeaderField:(NSString * _Nonnull)field;
/// Returns a specified HTTP header field, if set.
/// \param field The name of the header field. Header fields are case-insensitive.
///
///
/// returns:
/// The value for the header field, or <code>nil</code> if no value was set.
- (NSString * _Nullable)valueForHeaderField:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents the retry behavior for an HTTP request.
/// Retry behaviors provide a mechanism for requests to automatically retry upon failure before
/// notifying the caller about the failure. Any arbitrary retry behavior can be implemented, but
/// convenience methods are provided for some of the more common behaviors.
/// Unless otherwise specified, retry behaviors are only evaluated for idempotent requests.
/// This is controlled by the <code>isIdempotent</code> property of <code>HTTPManagerRequest</code>, which defaults to
/// <code>true</code> for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests, and <code>false</code> otherwise.
/// note:
/// Retry behaviors are evaluated on an arbitrary dispatch queue.
/// note:
/// If a task is retried after an authentication failure through the use of an <code>HTTPAuth</code>
/// object, the attempt count for <code>HTTPManagerRetryBehavior</code> is reset to zero.
/// note:
/// If the request fails due to a 401 Unauthorized, and the request’s <code>auth</code> property was
/// set, the <code>HTTPManagerRetryBehavior</code> is not consulted. When the <code>auth</code> property is set, the
/// only way to retry a 401 Unauthorized is via the <code>HTTPAuth</code> object.
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerRetryBehavior")
@interface HTTPManagerRetryBehavior : NSObject
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated only for idempotent requests. If the request involves
/// redirections, the original request will be evaluated for idempotence (and in the event of a retry,
/// the original request is the one that is retried).
/// note:
/// The block will be executed on an arbitrary dispatch queue.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)init:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated for all requests regardless of whether the request
/// is idempotent. If the request involves redirections, the original request is the one that is retried.
/// important:
/// Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
/// and only retry those requests where performing the request twice is safe. Your handler shold consult
/// the <code>originalRequest</code> property of the task for making this determination.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)initWithIgnoringIdempotence:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a retry behavior that evaluates an array of behaviors until one of them succeeds.
/// The returned behavior will evaluate the first behavior in the array. If that invokes the
/// callback with <code>false</code> it will evaluate the second, and so on until some behavior has invoked
/// the callback with <code>true</code> or all behaviors have been exhausted.
/// \param retryBehaviors The array of retry behaviors to try in turn.
///
- (nonnull instancetype)initWithAnyRetryBehavior:(NSArray<HTTPManagerRetryBehavior *> * _Nonnull)retryBehaviors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTTPManagerRetryBehavior (SWIFT_EXTENSION(PMHTTP))
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated only for idempotent requests. If the request involves
/// redirections, the original request will be evaluated for idempotence (and in the event of a retry,
/// the original request is the one that is retried).
/// note:
/// The block will be executed on an arbitrary dispatch queue.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)retryBehaviorWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler SWIFT_METHOD_FAMILY(init);
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated for all requests regardless of whether the request
/// is idempotent. If the request involves redirections, the original request is the one that is retried.
/// important:
/// Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
/// and only retry those requests where performing the request twice is safe. Your handler shold consult
/// the <code>originalRequest</code> property of the task for making this determination.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)retryBehaviorIgnoringIdempotenceWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler SWIFT_METHOD_FAMILY(init);
/// Returns a retry behavior that retries once automatically for networking errors.
/// A networking error is defined as many errors in the <code>NSURLErrorDomain</code>, or a
/// <code>PMJSON.JSONParserError</code> with a code of <code>.unexpectedEOF</code> (as this may indicate a
/// truncated response). The request will not be retried for networking errors that
/// are unlikely to change when retrying.
/// If the request is non-idempotent, it only retries if the error indicates that a
/// connection was never made to the server (such as cannot find host).
/// \param including503ServiceUnavailable If <code>YES</code>, retries on a 503 Service Unavailable
/// response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
/// as the server did not handle the original request. If <code>NO</code>, only networking failures
/// are retried.
///
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureOnceIncluding503ServiceUnavailable:(BOOL)including503ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
/// Returns a retry behavior that retries twice automatically for networking errors.
/// The first retry happens immediately, and the second retry happens after a given
/// delay.
/// A networking error is defined as many errors in the <code>NSURLErrorDomain</code>, or a
/// <code>PMJSON.JSONParserError</code> with a code of <code>.unexpectedEOF</code> (as this may indicate a
/// truncated response). The request will not be retried for networking errors that
/// are unlikely to change when retrying.
/// If the request is non-idempotent, it only retries if the error indicates that a
/// connection was never made to the server (such as cannot find host).
/// \param delay The amount of time in seconds to wait before the second retry.
///
/// \param including503ServiceUnavailable If <code>YES</code>, retries on a 503 Service Unavailable
/// response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
/// as the server did not handle the original request. If <code>NO</code>, only networking failures
/// are retried.
///
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureTwiceWithDelay:(NSTimeInterval)delay including503ServiceUnavailable:(BOOL)including503ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
@end

enum HTTPManagerTaskState : unsigned char;

/// An initiated HTTP operation.
/// <em>Thread safety:</em> All methods in this class are safe to call from any thread.
SWIFT_CLASS("_TtC6PMHTTP15HTTPManagerTask")
@interface HTTPManagerTask : NSObject
/// The underlying <code>URLSessionTask</code>.
/// If a failed request is automatically retried, this property value
/// will change.
/// note:
/// This property supports key-value observing.
@property (nonatomic, readonly, strong) NSURLSessionTask * _Nonnull networkTask;
/// The <code>HTTPAuth</code> used to authenticate the request, if any.
@property (nonatomic, readonly, strong) id <HTTPAuth> _Nullable auth;
/// The current state of the task.
/// note:
/// This property is thread-safe and may be accessed concurrently.
/// note:
/// This property supports KVO. The KVO notifications will execute
/// on an arbitrary thread.
@property (nonatomic, readonly) enum HTTPManagerTaskState state;
/// The value of the original request’s <code>userInitiated</code> property.
/// If <code>true</code> this means the task executed at a higher priority than it would have if this
/// property were <code>false</code>.
/// This property can be used to make decisions about things such as what dispatch queue to use
/// when implementing custom retry logic.
@property (nonatomic, readonly) BOOL userInitiated;
+ (BOOL)automaticallyNotifiesObserversForKey:(NSString * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
/// Invokes <code>resume()</code> on the underlying <code>URLSessionTask</code>.
/// important:
/// You should always use this method instead of invoking <code>resume()</code>
/// on the <code>networkTask</code>.
/// note:
/// To suspend the underlying task you can access it with the
/// <code>networkTask</code> property. However, suspending the task will not remove it from
/// the list of outstanding tasks used to control the network activity indicator.
- (void)resume;
/// Cancels the operation, if it hasn’t already completed.
/// If the operation is still talking to the network, the underlying network
/// task is canceled. If the operation is processing the results, the
/// results processor is canceled at the earliest opportunity.
/// Calling this on a task that’s already moved to <code>.completed</code> is a no-op.
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, readonly, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' instead");
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
/// <code>true</code> if the request is idempotent, otherwise <code>false</code>. A request is idempotent if
/// the side-effects of N > 0 identical requests is the same as for a single request,
/// or in other words, the request can be repeated without changing anything.
/// note:
/// A sequence of several idempotent requests may not be idempotent as a whole.
/// This could be because a later request in the sequence changes something that
/// affects an earlier request.
/// This property normally only affects retry behavior for failed requests, although
/// it could be used for external functionality such as showing a Retry button in an
/// error dialog.
@property (nonatomic, readonly, getter=isIdempotent) BOOL idempotent;
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// The state of an <code>HTTPManagerTask</code>.
typedef SWIFT_ENUM(unsigned char, HTTPManagerTaskState, closed) {
/// The task is currently running.
  HTTPManagerTaskStateRunning = 0,
/// The task is processing results (e.g. parsing JSON).
  HTTPManagerTaskStateProcessing = 1,
/// The task has been canceled. The completion handler may or may not
/// have been invoked yet.
  HTTPManagerTaskStateCanceled = 2,
/// The task has completed. The completion handler may or may not have
/// been invoked yet.
  HTTPManagerTaskStateCompleted = 3,
};


/// An HTTP POST/PUT/PATCH request with binary data that does not yet have a parse handler.
/// The body of this request is a given <code>NSData</code> object. Any <code>parameters</code> are passed in the
/// query string.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadDataRequest")
@interface HTTPManagerUploadDataRequest : HTTPManagerActionRequest
/// The data to upload.
@property (nonatomic, copy) NSData * _Nonnull uploadData;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@end

@class HTTPManagerUploadMultipart;

/// An HTTP POST/PUT/PATCH request with form data that does not yet have a parse handler.
/// By default, any request parameters (see <code>HTTPManagerRequest.parameters</code>) are
/// passed as <code>application/x-www-form-urlencoded</code>. Adding any multipart bodies
/// passes everything as <code>multipart/form-data</code> instead. When mixing <em>parameters</em>
/// and multipart bodies, the <em>parameters</em> are sent prior to any multipart bodies.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadFormRequest")
@interface HTTPManagerUploadFormRequest : HTTPManagerActionRequest
/// The URL for the request, including any query items as appropriate.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The Content-Type for the request.
///
/// returns:
/// Either <code>"application/x-www-form-urlencoded"</code> or <code>"multipart/form-data"</code>
/// depending on the nature of the upload.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// Specifies a named multipart body for this request.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> and <code>filename</code> are assumed to be ASCII and not need any escaping.
/// \param data The data for the multipart body, such as an image or text.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
/// \param mimeType The MIME content type of the multipart body. Optional.
///
/// \param filename The filename of the attachment. Optional.
///
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/// Specifies a named multipart body for this request.
/// The Content-Type of the multipart body will always be
/// <code>text/plain; charset=utf-8</code>.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> is assumed to be ASCII and not need any escaping.
/// \param text The text of the multipart body.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
/// Adds a block that’s invoked asynchronously to provide multipart bodies for this request.
/// The block is invoked on an arbitrary thread when task requests a new body stream.
/// Any multipart bodies added by the block will be inserted into the request body.
/// The associated block will only ever be invoked once even if the request is used to create
/// multiple tasks.
/// note:
/// Using this method means that the <code>Content-Length</code> cannot be calculated for this
/// request. When calling APIs that need a defined <code>Content-Length</code> you must provide all
/// of the upload data up-front.
/// seealso:
/// <code>addMultipart(data:withName:mimeType:filename:)</code>,
/// <code>addMultipart(text:withName:)</code>.
/// \param block The block that provides the multipart bodies. This block is
/// invoked on an arbitrary background thread. The <code>HTTPManagerUploadMultipart</code>
/// parameter can be used to add multipart bodies to the request. This object is
/// only valid for the duration of the block’s execution.
///
- (void)addMultipartBodyWithBlock:(void (^ _Nonnull)(HTTPManagerUploadMultipart * _Nonnull))block;
@end






/// An HTTP POST/PUT/PATCH for JSON data that does not yet have a parse handler.
/// The body of this request is a JSON blob. Any <code>parameters</code> are passed in the
/// query string.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadJSONRequest")
@interface HTTPManagerUploadJSONRequest : HTTPManagerActionRequest
/// The Content-Type for the request.
///
/// returns:
/// <code>"application/json"</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@end


@interface HTTPManagerUploadJSONRequest (SWIFT_EXTENSION(PMHTTP))
/// The JSON data to upload.
/// requires:
/// Values assigned to this property must be json-compatible.
@property (nonatomic) id _Nonnull uploadJSON;
@end


/// Helper class for <code>HTTPManagerUploadFormRequest.addMultipartBody(with:)</code>.
SWIFT_CLASS("_TtC6PMHTTP26HTTPManagerUploadMultipart")
@interface HTTPManagerUploadMultipart : NSObject
/// Specifies a named multipart body for this request.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> and <code>filename</code> are assumed to be ASCII and not need any escaping.
/// \param data The data for the multipart body, such as an image or text.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
/// \param mimeType The MIME content type of the multipart body. Optional.
///
/// \param filename The filename of the attachment. Optional.
///
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/// Specifies a named multipart body for this request.
/// The Content-Type of the multipart body will always be
/// <code>text/plain; charset=utf-8</code>.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> is assumed to be ASCII and not need any escaping.
/// \param text The text of the multipart body.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@protocol HTTPMockToken;
@class HTTPMockSequence;

/// Manages a set of mocks for the <code>HTTPManager</code>.
/// The mocks associated with this class may match requests based on path (relative to the environment)
/// or absolute URL. If the path or URL contains any path component of the form <code>:name</code>, any (non-empty)
/// component value will match and the matched value will be made available to block-based mocks.
/// For example the path <code>"users/:id"</code> will match a request for <code>"users/1234"</code> but will not match
/// a request for <code>"users"</code>.
/// All mocks are evaluated in reverse order of addition. This means that if two mocks would match the
/// same URL, whichever mock was added last is used.
/// <em>Thread safety:</em> All methods in this class are safe to call from any thread.
SWIFT_CLASS("_TtC6PMHTTP15HTTPMockManager")
@interface HTTPMockManager : NSObject
/// If <code>true</code>, any URL that is part of the current environment but not handled by any mocks
/// will return an error. The default value is <code>false</code>.
/// note:
/// Testing for unmocked intercepted requests should be done with
/// <code>URLResponse.isUnmockedInterceptedRequest</code>.
/// seealso:
/// interceptUnhandledExternalURLs
@property (nonatomic) BOOL interceptUnhandledEnvironmentURLs;
/// If <code>true</code>, any URL that is not part of the current environment but not handled by any mocks
/// will return an error. The default value is <code>false</code>.
/// note:
/// Testing for unmocked intercepted requests should be done with
/// <code>URLResponse.isUnmockedInterceptedRequest</code>.
/// seealso:
/// interceptUnhandledEnvironmentURLs
@property (nonatomic) BOOL interceptUnhandledExternalURLs;
/// Adds a mock to the mock manager that returns a given response.
/// All requests that match this mock will be given the same response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/// Adds a mock to the mock manager that returns a given plain text response.
/// All requests that match this mock will be given the same response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
/// Adds a mock to the mock manager that returns a given sequence of responses.
/// Each request that matches this mock will be given the next response in the sequence.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param sequence an <code>HTTPMockSequence</code> with the sequence of responses to provide.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod sequence:(HTTPMockSequence * _Nonnull)sequence;
/// Adds a mock to the mock manager that evaluates a block to provide the response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param queue (Optional) A <code>dispatch_queue_t</code> to run the handler on. The default value
/// of <code>nil</code> means to use a private serial queue.
///
/// \param handler A block to execute in order to provide the mock response. The block
/// has arguments <code>request</code>, <code>parameters</code>, and <code>completion</code>. <code>request</code> is the <code>URLRequest</code>
/// that matched the mock. <code>parameters</code> is a dictionary that contains a value for each <code>:name</code>
/// token from the <code>url</code> (note: the key is just <code>"name"</code>, not <code>":name"</code>). <code>completion</code> is a
/// block that must be invoked to provide the response. The <code>completion</code> block may be invoked
/// from any queue, but it is an error to not invoke it at all or to invoke it twice.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod queue:(dispatch_queue_t _Nullable)queue handler:(void (^ _Nonnull)(NSURLRequest * _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull, void (^ _Nonnull)(NSHTTPURLResponse * _Nonnull, NSData * _Nonnull)))handler;
/// Removes a previously-registered mock from the mock manager.
/// Calling this with a token that was already removed, or with a token from another mock
/// manager, is a no-op.
/// \param token An <code>HTTPMockToken</code> returned by a previous call to <code>addMock</code>.
///
- (void)removeMock:(id <HTTPMockToken> _Nonnull)token;
/// Removes all mocks from the mock manager.
- (void)removeAllMocks;
/// Resets the mock manager back to the defaults.
/// This removes all mocks and resets all properties back to their default values.
- (void)reset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPMockManager (SWIFT_EXTENSION(PMHTTP))
/// A convenience function for reading the body data from a <code>URLRequest</code>.
/// If the request has <code>HTTPBody</code> set, it is returned, otherwise if it has <code>HTTPBodyStream</code>,
/// the stream is read to exhaustion. If the request has no body, an empty <code>NSData</code> is returned.
/// warning:
/// If the request has an <code>HTTPBodyStream</code> but it cannot be opened (e.g. because it
/// has already been read), an empty <code>NSData</code> is returned. Similarly, if the stream takes longer
/// than 400ms to open, an empty <code>NSData</code> is returned.
/// This function is primarily intended to be used from within a handler block passed to
/// <code>addMock(for:httpMethod:queue:handler:)</code>.
- (NSData * _Nonnull)dataFromRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@end




/// Represents a sequence of mock responses that will be returned from successive requests
/// that are handled by the same mock.
/// Responses added to the sequence are returned in the same order. If more requests are made
/// than responses added to the sequence, all subsequence requests will return a generic
/// 500 Internal Server Error response. The property <code>repeatsLastResponse</code> can be used to
/// instead repeat the final response over and over.
/// <em>Thread safety:</em> Instances of this class may not be accessed concurrently from multiple
/// threads at the same time.
SWIFT_CLASS("_TtC6PMHTTP16HTTPMockSequence")
@interface HTTPMockSequence : NSObject
/// If <code>true</code>, the last response in the sequence is repeated for all future requests.
/// Otherwise, once the sequence has been exhausted, future requests will serve up a
/// 500 Internal Server Error response. The default value is <code>false</code>.
@property (nonatomic) BOOL repeatsLastResponse;
/// Adds a mock to the sequence that returns a given response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/// Adds a mock to the sequence that returns a given plain text response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A token that can be used to unregister a mock from an <code>HTTPMockManager</code>.
SWIFT_PROTOCOL("_TtP6PMHTTP13HTTPMockToken_")
@protocol HTTPMockToken
@end

@class NSCachedURLResponse;
@protocol NSURLProtocolClient;

SWIFT_CLASS("_TtC6PMHTTP19HTTPMockURLProtocol")
@interface HTTPMockURLProtocol : NSURLProtocol
+ (BOOL)canInitWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
+ (NSURLRequest * _Nonnull)canonicalRequestForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id <NSURLProtocolClient> _Nullable)client OBJC_DESIGNATED_INITIALIZER;
- (void)startLoading;
- (void)stopLoading;
@end


/// The base class for <code>HTTPAuth</code> implementations that refresh their authentication automatically.
/// This class provides support for refreshing authentication information, e.g. for OAuth2 token
/// refresh. It is recommended that you subclass this class in order to provide your own
/// initializer.
/// note:
/// This class assumes that each instance manages a single authentication realm, and makes
/// no provision for refreshing authentication for multiple realms simultaneously.
SWIFT_CLASS("_TtC6PMHTTP19HTTPRefreshableAuth")
@interface HTTPRefreshableAuth : NSObject <HTTPAuth>
/// Returns a new <code>HTTPRefreshableAuth</code>.
/// \param info A value that is used to calculate authentication headers and refresh
/// authentication information. This parameter may have any type, as long as it’s thread-safe.
///
/// \param authenticationHeadersBlock A block that is used to return the authentication
/// headers for a request. The <code>info</code> parameter is provided to this block.
/// This block may be called from any thread.
///
/// \param authenticationRefreshBlock A block that is invoked in response to a 401
/// Unauthorized response in order to refresh the authentication information. This block will
/// not be invoked multiple times concurrent with each other. Any requests that fail while
/// refreshing will use the results of the outstanding refresh.
/// This block returns an optional <code>HTTPManagerTask</code>. If non-<code>nil</code>, the task will be tracked
/// and will be canceled if the <code>HTTPRefreshableAuth</code> is deinited.
/// This block may be called from any thread.
/// The <code>completion</code> parameter to this block must be invoked with the results of the refresh.
/// The first parameter to this block is the new <code>info</code> value that represents the new
/// authentication information, or <code>nil</code> if there is no new info. The second parameter is a
/// boolean that indicates whether the refresh succeeded. If this parameter is <code>true</code> all
/// pending failed tasks are retried with the new info. If <code>false</code> all pending failed tasks
/// will complete with the error <code>HTTPManagerError.unauthorized</code>. The <code>completion</code> block may
/// be invoked from any thread, including being invoked synchronously from
/// <code>authenticationRefreshBlock</code>.
///
- (nonnull instancetype)initWithInfo:(id _Nonnull)info authenticationHeadersBlock:(NSDictionary<NSString *, NSString *> * _Nonnull (^ _Nonnull)(NSURLRequest * _Nonnull, id _Nonnull))authenticationHeadersBlock authenticationRefreshBlock:(HTTPManagerTask * _Nullable (^ _Nonnull)(NSHTTPURLResponse * _Nonnull, NSData * _Nonnull, id _Nonnull, void (^ _Nonnull)(id _Nullable, BOOL)))authenticationRefreshBlock;
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)opaqueTokenForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Invoked when a 401 Unauthorized response is received.
/// The default implementation refreshes the authentication information if necessary. If you
/// override this method, you should call <code>super</code> unless you want to skip refreshing
/// authentication information for any reason.
- (void)handleUnauthorizedResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC6PMHTTP22NetworkActivityManager")
@interface NetworkActivityManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The results of an HTTP request.
SWIFT_CLASS("_TtC6PMHTTP12PMHTTPResult")
@interface PMHTTPResult : NSObject <NSCopying>
/// <code>true</code> iff the task finished successfully.
@property (nonatomic, readonly) BOOL isSuccess;
/// <code>true</code> iff the task failed with an error.
@property (nonatomic, readonly) BOOL isError;
/// <code>true</code> iff the task was canceled before it finished.
@property (nonatomic, readonly) BOOL isCanceled;
/// If the task finished successfully, returns the resulting value, if any.
/// Otherwise, returns <code>nil</code>.
/// note:
/// A successful result may still have a <code>nil</code> value if the parse handler
/// returns <code>nil</code> or if it’s a POST/PUT/PATCH/DELETE request and the response
/// is 204 No Content.
@property (nonatomic, readonly) id _Nullable value;
/// If the task finished successfully, or if it failed with an error
/// during processing after receiving the response, returns the <code>NSURLResponse</code>.
/// Otherwise, if the task failed with a networking error or was canceled,
/// returns <code>nil</code>.
@property (nonatomic, readonly, strong) NSURLResponse * _Nullable response;
/// If the task failed with an error, returns the <code>NSError</code>.
/// Otherwise, returns <code>nil</code>.
/// note:
/// Canceled tasks are not considered to be in error and therefore
/// return <code>nil</code> from both <code>value</code> and <code>error</code>.
@property (nonatomic, readonly, strong) NSError * _Nullable error;
/// Returns the error or canceled state as an <code>NSError</code>, or <code>nil</code> if successful.
/// Canceled results are converted into <code>NSURLErrorCancelled</code> errors.
@property (nonatomic, readonly, strong) NSError * _Nullable objcError;
/// Creates and returns a new <code>PMHTTPResult</code> representing a successful result.
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPResult</code> representing a failed task.
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPResult</code> representing a canceled task.
+ (PMHTTPResult * _Nonnull)canceledResult SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The results of an HTTP request that returns an <code>NSData</code>.
SWIFT_CLASS("_TtC6PMHTTP16PMHTTPDataResult")
@interface PMHTTPDataResult : PMHTTPResult
/// If the task finished successfully, returns the resulting <code>Data</code>, if any.
/// Otherwise, returns <code>nil</code>.
/// note:
/// A successful result may still have a <code>nil</code> value if it’s a
/// POST/PUT/PATCH/DELETE request and the response is 204 No Content.
/// Successful GET/HEAD requests will never have a <code>nil</code> value.
/// note:
/// This property returns the same value that <code>value</code> does.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a successful result.
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a failed task.
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a canceled task.
+ (PMHTTPDataResult * _Nonnull)canceledResult SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response SWIFT_UNAVAILABLE;
@end





@interface NSURLProtocol (SWIFT_EXTENSION(PMHTTP))
/// Returns the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param key The key of the desired property.
///
/// \param request The request whose properties are to be queried.
///
///
/// returns:
/// The property associated with <code>key</code>, or <code>nil</code> if no property has been stored for
/// <code>key</code>.
+ (id _Nullable)propertyForKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Sets the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param value The value to set for the specified property.
///
/// \param key The key for the specified property.
///
/// \param request The request for which to create the property.
///
+ (void)setProperty:(id _Nonnull)value forKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request;
/// Removes the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param key The key whose value should be removed.
///
/// \param request The request from which to remove the property value.
///
+ (void)removePropertyForKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request;
@end


@interface NSURLResponse (SWIFT_EXTENSION(PMHTTP))
/// Returns whether the response represents an unmocked intercepted request.
/// When <code>HTTPMockManager</code> is configured to intercept unmocked requests, this property will
/// return <code>true</code> for the response generated for any such intercepted request. Otherwise it will
/// return <code>false</code> for any mocked request or any request that wasn’t intercepted.
@property (nonatomic, readonly) BOOL pmhttp_IsUnmockedInterceptedRequest;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.3 effective-4.1.50 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PMHTTP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSHTTPURLResponse;
@class HTTPManagerTask;

/// The <code>HTTPAuth</code> protocol defines the common interface that authentication mechanisms can use.
/// This includes the ability to set headers and to handle authorization failures.
SWIFT_PROTOCOL("_TtP6PMHTTP8HTTPAuth_")
@protocol HTTPAuth
/// Returns the headers that should be added to the given request.
/// This is most commonly used to set the <code>"Authorization"</code> header.
/// note:
/// This method may be called from any thread.
/// note:
/// <code>HTTPAuth</code> is not allowed to set <code>"Content-Type"</code>, <code>"Content-Length"</code>, or
/// <code>"Accept"</code>, and any attempt to do so will be ignored.
/// \param request The <code>URLRequest</code> that the headers should be added to.
///
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns an opaque token that is associated with the request.
/// If implemented, this method is called immediately after<code> headers(for:)</code>.
/// note:
/// This method is not guaranteed to be called every time <code>headers(for:)</code> is. Notably,
/// when <code>preparedURLRequest</code> is accessed, <code>headers(for:)</code> will be invoked but not
/// <code>opaqueToken(for:)</code>.
/// This token can be used to uniquely identify the authorization information used for the
/// request. Then in <code>handleUnauthorized(_:for:token:completion:)</code> you can use this token to
/// determine if you’ve already refreshed your stored authorization information or if you need
/// to do extra work (such as fetching a new OAuth2 token) before you can retry the request.
- (id _Nullable)opaqueTokenForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Invoked when a 401 Unauthorized response is received.
/// This method is only called once per request. If this method is invoked and requests a retry,
/// and the subsequent retry fails due to 401 Unauthorized, this is considered a permanent
/// failure. Note that a 403 Forbidden after a 401 Unauthorized may trigger a second retry.
/// note:
/// This method will be called on an arbitrary background thread.
/// note:
/// Special care must be taken when implementing this method. Multiple tasks may be
/// created with the same authorization headers in parallel and may all fail even after you’ve
/// refreshed your authorization information (e.g. with OAuth2). You can use
/// <code>opaqueToken(for:)</code> in order to keep track of whether a given request was created with old
/// authorization information or whether you need to refresh your authorization information.
/// important:
/// The completion block <em>MUST</em> be called once and only once. Failing to call the
/// completion block will leave the task stuck in the processing state forever. Calling the
/// completion block multiple times may cause bad behavior.
/// note:
/// When the completion block is invoked, if the task is not retried, the task’s own
/// completion block may run synchronously on the current queue.
/// \param response The <code>HTTPURLResponse</code> that was received.
///
/// \param body The body that was received.
///
/// \param task The <code>HTTPManagerTask</code> that received the response.
///
/// \param token The opaque token returned from <code>opaqueToken(for:)</code>, otherwise <code>nil</code>.
///
/// \param completion A completion block that must be called when the <code>HTTPAuth</code> object
/// has finished handling the response. This block may be called synchronously, or it may be
/// called from any thread.
///
- (void)handleUnauthorizedResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
/// Invoked when a 403 Forbidden response is received.
/// This is intended for situations where you can’t access a resource with your existing
/// credentials but you can request new credentials that have greater access.
/// This method is only called once per request. If this method is invoked and requests a retry,
/// and the subsequent retry fails due to 403 Forbidden or 401 Unauthorized, this is considered
/// a permanent failure.
/// note:
/// This method will be called on an arbitrary background thread.
/// note:
/// Special care must be taken when implementing this method. Multiple tasks may be
/// created with the same authorization headers in parallel and may all fail even after you’ve
/// refreshed your authorization information (e.g. with OAuth2). You can use
/// <code>opaqueToken(for:)</code> in order to keep track of whether a given request was created with old
/// authorization information or whether you need to refresh your authorization information.
/// important:
/// The completion block <em>MUST</em> be called once and only once. Failing to call the
/// completion block will leave the task stuck in the processing state forever. Calling the
/// completion block multiple times may cause bad behavior.
/// note:
/// When the completion block is invoked, if the task is not retried, the task’s own
/// completion block may run synchronously on the current queue.
/// \param response The <code>HTTPURLResponse</code> that was received.
///
/// \param body The body that was received.
///
/// \param task The <code>HTTPManagerTask</code> that received the response.
///
/// \param token The opaque token returned from <code>opaqueToken(for:)</code>, otherwise <code>nil</code>.
///
/// \param completion A completion block that must be called when the <code>HTTPAuth</code> object
/// has finished handling the response. This block may be called synchronously, or it may be
/// called from any thread.
///
- (void)handleForbiddenResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
/// Returns the localized description for an unauthorized error.
/// \param error The unauthorized error. This will always be an instance of
/// <code>HTTPManagerError.unauthorized</code>.
///
///
/// returns:
/// The string to use for the localized description, or <code>nil</code> to use the default
/// description.
- (NSString * _Nullable)localizedDescriptionForError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLCredential;

/// An <code>HTTPAuth</code> implementation that provides basic auth.
SWIFT_CLASS("_TtC6PMHTTP13HTTPBasicAuth")
@interface HTTPBasicAuth : NSObject <HTTPAuth>
/// The <code>URLCredential</code> that the <code>HTTPBasicAuth</code> was initialized with.
/// This is guaranteed to be a password-based credential.
@property (nonatomic, readonly, strong) NSURLCredential * _Nonnull credential;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Returns a new instance of <code>HTTPBasicAuth</code> from a given password-based credential.
/// \param credential A <code>URLCredential</code>. This must be a password-based credential.
///
///
/// returns:
/// An <code>HTTPBasicAuth</code> instance, or <code>nil</code> if <code>credential</code> isn’t a password-based
/// credential.
- (nullable instancetype)initWithCredential:(NSURLCredential * _Nonnull)credential OBJC_DESIGNATED_INITIALIZER;
/// Returns a new instance of <code>HTTPBasicAuth</code> with the given username and password.
/// note:
/// The <code>URLCredential</code> that this creates has a persistence of <code>.none</code>.
/// \param username The username to use.
///
/// \param password The password to use.
///
///
/// returns:
/// An <code>HTTPBasicAuth</code> instance.
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class HTTPManagerEnvironment;
@class NSURLSessionConfiguration;
@class NSURLAuthenticationChallenge;
@class HTTPManagerMetricsCallback;
@class HTTPManagerRetryBehavior;
@class HTTPMockManager;

/// Manages access to a REST API.
/// This class is thread-safe. Requests may be created and used from any thread.
/// <code>HTTPManagerRequest</code>s support concurrent reading from multiple threads, but it is not safe to mutate
/// a request while concurrently accessing it from another thread. <code>HTTPManagerTask</code>s are safe to access
/// from any thread.
SWIFT_CLASS("_TtC6PMHTTP11HTTPManager")
@interface HTTPManager : NSObject
/// A block that is invoked whenever the number of outstanding <code>HTTPManagerTask</code>s changes.
/// If the value of this property changes while there are outstanding tasks, the old
/// value is not invoked, but the new value will be invoked asynchronously with the current
/// number of tasks. If there are no outstanding tasks the new value will not be invoked.
/// note:
/// This block is always invoked on the main thread.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable networkActivityHandler)(NSInteger);)
+ (void (^ _Nullable)(NSInteger))networkActivityHandler SWIFT_WARN_UNUSED_RESULT;
+ (void)setNetworkActivityHandler:(void (^ _Nullable)(NSInteger))newValue;
/// The current environment. The default value is <code>nil</code>.
/// Changes to this property affects any newly-created requests but do not
/// affect any existing requests or any tasks that are in-progress.
/// Changing this property also resets the default auth if the new value differs from the old
/// one. Setting this property to the existing value has no effect.
/// important:
/// If <code>environment</code> is <code>nil</code>, requests created with relative paths will fail,
/// but requests created with absolute URLs will continue to work. See <code>HTTPManagerConfigurable</code>
/// for how to configure the shared <code>HTTPManager</code> prior to first use.
/// seealso:
/// <code>resetSession()</code>, <code>HTTPManagerConfigurable</code>, <code>defaultAuth</code>,
/// <code>defaultServerRequiresContentLength</code>.
@property (nonatomic, strong) HTTPManagerEnvironment * _Nullable environment;
/// The URL session configuration.
/// Changing mutable values within the configuration object has no effect on the
/// HTTP manager, but you can reassign this property with the modified
/// configuration object.
/// Changing this property affects all newly-created tasks but does not cancel
/// any tasks that are in-flight. You can use <code>resetSession()</code> if you need to
/// cancel any in-flight tasks.
/// seealso:
/// <code>resetSession()</code>
@property (nonatomic, strong) NSURLSessionConfiguration * _Nonnull sessionConfiguration;
/// The authentication handler for session-level authentication challenges.
/// This handler is invoked for all session-level authentication challenges. At the time of this
/// writing, these challenges are <code>NSURLAuthenticationMethodNTLM</code>,
/// <code>NSURLAuthenticationMethodNegotiate</code>, <code>NSURLAuthenticationMethodClientCertificate</code>, and
/// <code>NSURLAuthenticationMethodServerTrust</code>.
/// The default value of <code>nil</code> means to use the system-provided default behavior.
/// This property is typically used to implement SSL Pinning using something like
/// <a href="https://github.com/datatheorem/TrustKit">TrustKit</a>.
/// important:
/// This handler must invoke its completion handler.
/// seealso:
/// <code>URLSessionDelegate.urlSession(_:didReceive:completionHandler:)</code>.
/// \param httpManager The <code>HTTPManager</code> that the session belongs to.
///
/// \param challenge the <code>URLAuthenticationChallenge</code> that contains the request for
/// authentication.
///
/// \param completionHandler A completion block that must be invoked with the results.
///
@property (nonatomic, copy) void (^ _Nullable sessionLevelAuthenticationHandler)(HTTPManager * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));
/// The callback that will be invoked whenever task metrics are collected.
/// This callback is invoked every time the underlying <code>URLSession</code> collects task metrics for a
/// task. This means if the task is automatically retried, metrics may be collected multiple
/// times.
/// note:
/// As task metric collection is not free, task metrics are only collected for tasks
/// when the <code>metricsCallback</code> was non-<code>nil</code> prior to the task being created. Furthermore,
/// assigning the <code>metricsCallback</code> to <code>nil</code> disables task metric reporting for all
/// outstanding tasks, even if the <code>metricsCallback</code> is subsequently assigned to a non-<code>nil</code>
/// value again before the outstanding task completes.
/// note:
/// The callback will be scheduled on the configured operation queue immediately from
/// within the <code>URLSession</code> delegate method. This means that if the same serial operation
/// queue is used both for the metrics callback and as the completion queue for the task
/// itself, the metrics will be collected before the task’s completion block is executed.
/// note:
/// Changing or clearing this property after a task has finished but before it has
/// executed the metrics callback won’t prevent the old callback from executing, even if this
/// property is cleared from the same operation queue that the callback is scheduled on.
@property (nonatomic, strong) HTTPManagerMetricsCallback * _Nullable metricsCallback SWIFT_AVAILABILITY(watchos,introduced=3) SWIFT_AVAILABILITY(tvos,introduced=10) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10);
/// The auth to use for HTTP requests. The default value is <code>nil</code>.
/// Individual requests may override this auth with their own auth.
/// Changes to this property affect any newly-created requests but do not affect any existing
/// requests or any tasks that are in-progress.
/// note:
/// This auth is only used for HTTP requests that are located within the current
/// environment’s base URL. If a request is created with an absolute path or absolute URL, and
/// the resulting URL does not represent a resource found within the environment’s base URL,
/// the request will not be assigned the default auth.
/// seealso:
/// <code>environment</code>, <code>HTTPBasicAuth</code>, <code>HTTPManagerRequest.auth</code>.
@property (nonatomic, strong) id <HTTPAuth> _Nullable defaultAuth;
/// The default retry behavior to use for requests. The default value is <code>nil</code>.
/// Individual requests may override this behavior with their own behavior.
/// Changes to this property affect any newly-created requests but do not affect
/// any existing requests or any tasks that are in-progress.
/// seealso:
/// <code>HTTPManagerRequest.retryBehavior</code>.
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable defaultRetryBehavior;
/// Whether errors should be assumed to be JSON. The default value is <code>false</code>.
/// If <code>true</code>, all error bodies are parsed as JSON regardless of their declared
/// Content-Type. This setting is intended to work around bad servers that
/// don’t declare their Content-Types properly.
/// Changes to this property affect any newly-created requests but do not affect
/// any existing requests or any tasks that are in-progress.
/// seealso:
/// <code>HTTPManagerRequest.assumeErrorsAreJSON</code>.
@property (nonatomic) BOOL defaultAssumeErrorsAreJSON;
/// If <code>true</code>, assume the server requires the <code>Content-Length</code> header for uploads. The default
/// value is <code>false</code>.
/// Setting this to <code>true</code> forces JSON and multipart/mixed uploads to be encoded synchronously
/// when the request is performed rather than happening in the background.
/// note:
/// This property is only used for HTTP requests that are located within the current
/// environment’s base URL. If a request is created with an absolute path or absolute URL, and
/// the resulting URL does not represent a resource found within the environment’s base URL,
/// the request will not be assigned this value.
/// Changes to this property affect any newly-created requests but do not affect any existing
/// requests or any tasks that are in-progress.
/// seealso:
/// <code>environment</code>, <code>HTTPManagerRequest.serverRequiresContentLength</code>.
@property (nonatomic) BOOL defaultServerRequiresContentLength;
/// The user agent that’s passed to every request.
@property (nonatomic, readonly, copy) NSString * _Nonnull userAgent;
/// An <code>HTTPMockManager</code> that can be used to define mocks for this <code>HTTPManager</code>.
@property (nonatomic, readonly, strong) HTTPMockManager * _Nonnull mockManager;
/// Invalidates all in-flight network operations and resets the URL session.
/// note:
/// Any tasks that have finished their network portion and are processing
/// the results are not canceled.
- (void)resetSession;
/// Creates and returns a new <code>HTTPManager</code>.
/// The returned <code>HTTPManager</code> needs its <code>environment</code> set, but is otherwise ready
/// for use.
/// important:
/// Unlike the global <code>HTTP</code> property, calling this initializer does
/// not go through <code>HTTPManagerConfigurable</code>. The calling code must configure
/// the returned <code>HTTPManager</code> instance as appropriate.
/// seealso:
/// <code>HTTP</code>.
- (nonnull instancetype)init;
@end






@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable defaultCredential SWIFT_DEPRECATED_MSG("use 'defaultAuth' with HTTPBasicAuth");
@end

@class NSURLResponse;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// Parses the <code>Date</code> header from a URL response and returns it.
/// \param response A <code>URLResponse</code> that the header is pulled from. If this
/// is not an <code>HTTPURLResponse</code>, <code>nil</code> is returned.
///
///
/// returns:
/// An <code>NSDate</code>, or <code>nil</code> if the header doesn’t exist or has an invalid format.
+ (NSDate * _Nullable)parsedDateHeaderFromResponse:(NSURLResponse * _Nonnull)response SWIFT_WARN_UNUSED_RESULT;
/// Parses a header value that is formatted like the “Date” HTTP header.
/// This parses the specific format allowed for the “Date” header, and any
/// other header that uses the <code>HTTP-date</code> production.
/// See <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">section 3.3.1 of RFC 2616</a> for details.
/// \param dateString The string value of the HTTP header.
///
///
/// returns:
/// An <code>NSDate</code>, or <code>nil</code> if <code>dateString</code> contains an invalid format.
+ (NSDate * _Nullable)parsedDateHeaderFromString:(NSString * _Nonnull)dateString SWIFT_WARN_UNUSED_RESULT;
@end

@class HTTPManagerDataRequest;
@class HTTPManagerActionRequest;
@class HTTPManagerUploadFormRequest;
@class HTTPManagerUploadDataRequest;
@class HTTPManagerUploadJSONRequest;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// The default <code>HTTPManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HTTPManager * _Nonnull defaultManager;)
+ (HTTPManager * _Nonnull)defaultManager SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull defaultHeaderFields;
/// Adds an HTTP header to the list of default header fields.
/// If a value was previously set for the specified <em>field</em>, the supplied <em>value</em> is appended
/// to the existing value using the appropriate field delimiter.
/// \param value The value for the header field.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)addValue:(NSString * _Nonnull)value forDefaultHeaderField:(NSString * _Nonnull)field;
/// Sets a specified default HTTP header field.
/// \param value The value for the header field. If <code>nil</code> the header is deleted.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)setValue:(NSString * _Nullable)value forDefaultHeaderField:(NSString * _Nonnull)field;
/// Returns a specified default HTTP header field, if set.
/// \param field The name of the header field. Header fields are case-insensitive.
///
///
/// returns:
/// The value for the header field, or <code>nil</code> if no value was set.
- (NSString * _Nullable)valueForDefaultHeaderField:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPOSTWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPUTWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPATCHWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end


/// An HTTP request.
/// <em>Thread safety:</em>
/// This class can be safely read from concurrent threads, but any modifications require exclusive access.
SWIFT_CLASS("_TtC6PMHTTP18HTTPManagerRequest")
@interface HTTPManagerRequest : NSObject <NSCopying>
/// The URL for the request, including any query items as appropriate.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The Content-Type for the request.
/// If no data is being submitted in the request body, the <code>contentType</code>
/// will be empty.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// The request parameters, or <code>[]</code> if there are no parameters.
/// The parameters are passed by default in the URL query string.
/// Subclasses may override this behavior.
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/// The <code>HTTPAuth</code> value to use for the request. Default is the value of
/// <code>HTTPManager.defaultAuth</code> for requests in the current environment, otherwise <code>nil</code>.
/// seealso:
/// <code>HTTPBasicAuth</code>, <code>HTTPManager.defaultAuth</code>.
@property (nonatomic, strong) id <HTTPAuth> _Nullable auth;
/// The default cache storage policy to use for the response if the response does not
/// include appropriate caching headers. If the response does include appropriate headers
/// such as <code>Cache-Control</code> or <code>Expires</code>, this property is ignored.
/// This property only establishes an upper bound on the cache storage allowed. If the
/// URL session proposes to store the cached response in-memory only and the default policy
/// is set to <code>.allowed</code>, the response will still be stored in-memory only, and if the URL
/// session proposes to not cache the response at all, the response will not be cached.
/// The default value is <code>.allowed</code> for most requests, and <code>.notAllowed</code> for parse requests
/// created from <code>parseAsJSON()</code> or <code>parseAsJSON(with:)</code>.
@property (nonatomic) NSURLCacheStoragePolicy defaultResponseCacheStoragePolicy;
/// <code>true</code> iff redirects should be followed when processing the response.
/// If <code>false</code>, network requests return a successful result containing the redirection
/// response, and parse requests return an error with <code>HTTPManagerError.unexpectedRedirect</code>.
/// Default is <code>true</code>.
@property (nonatomic) BOOL shouldFollowRedirects;
/// Indicates whether the request is allowed to use the cellular radio. Default is <code>true</code>.
/// If the session configuration’s <code>allowsCellularAccess</code> is <code>false</code>, access to the cellular
/// radio is always denied regardless of the request’s <code>allowsCellularAccess</code> property.
@property (nonatomic) BOOL allowsCellularAccess;
/// The main document URL associated with the request.
/// This URL is used for the cookie “same domain as main document” policy.
/// seealso:
/// <code>URLRequest.mainDocumentURL</code>.
@property (nonatomic, copy) NSURL * _Nullable mainDocumentURL;
/// Indicates whether cookies will be sent with and set for this request. Default is <code>true</code>.
@property (nonatomic) BOOL httpShouldHandleCookies;
/// Whether the request represents an action the user is waiting on.
/// Set this to <code>true</code> to increase the priority. Default is <code>false</code>.
@property (nonatomic) BOOL userInitiated;
/// The retry behavior to use for the request. Default is the value of
/// <code>HTTPManager.defaultRetryBehavior</code> for requests in the current environment, otherwise <code>nil</code>.
/// seealso:
/// <code>HTTPManager.defaultRetryBehavior</code>.
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
/// Whether errors should be assumed to be JSON.
/// If <code>true</code>, all error bodies are parsed as JSON regardless of their declared
/// Content-Type. This setting is intended to work around bad servers that
/// don’t declare their Content-Types properly.
/// The default value is provided by <code>HTTPManager.defaultAssumeErrorsAreJSON</code>.
/// seealso:
/// <code>HTTPManager.defaultAssumeErrorsAreJSON</code>.
@property (nonatomic) BOOL assumeErrorsAreJSON;
/// If <code>true</code>, assume the server requires the <code>Content-Length</code> header for uploads. The default
/// value is <code>false</code>.
/// Setting this to <code>true</code> forces JSON and multipart/mixed uploads to be encoded synchronously
/// when the request is performed rather than happening in the background.
/// The default value is provided by <code>HTTPManager.defaultServerRequiresContentLength</code>.
/// seealso:
/// <code>HTTPManager.defaultServerRequiresContentLength</code>.
@property (nonatomic) BOOL serverRequiresContentLength;
/// Whether tasks created from this request should affect the visiblity of the
/// network activity indicator. Default is <code>true</code>.
/// Strictly speaking, this controls whether the task is visible to the network activity
/// handler (if any), and it’s the handler’s job to show the activity indicator.
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
/// Sets properties whose default values depend on the environment.
/// This will set all properties whose default value depends on the environment to the value
/// they would have if the request was located within the environment. For example, this will
/// set the <code>auth</code> property to <code>HTTP.defaultAuth</code>.
/// This is intended for use with requests that are constructed using an absolute path (and
/// therefore are still at the same domain), but want to be treated as though they’re within the
/// environment path.
/// <em>Example:</em>
/// \code
/// HTTP.request(GET: "/foo")
///     .with({ $0.setDefaultEnvironmentalProperties() })
///     .performRequest { task, result in
///         // ....
/// }
///
/// \endcode
- (void)setDefaultEnvironmentalProperties;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An HTTP request that does not yet have a parse handler.
SWIFT_CLASS("_TtC6PMHTTP25HTTPManagerNetworkRequest")
@interface HTTPManagerNetworkRequest : HTTPManagerRequest
/// The request parameters, or <code>[]</code> if there are no parameters.
/// The parameters are passed by default in the URL query string.
/// Subclasses may override this behavior.
@property (nonatomic, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/// Creates and returns a <code>URLRequest</code> object from the properties of <code>self</code>.
/// For upload requests, the request will include the <code>HTTPBody</code> or <code>HTTPBodyStream</code>
/// as appropriate.
@property (nonatomic, readonly, copy) NSURLRequest * _Nonnull preparedURLRequest;
@end


/// An HTTP POST/PUT/PATCH/DELETE request that does not yet have a parse handler.
/// Similar to an <code>HTTPManagerDataRequest</code> except that it handles 204 No Content
/// instead of throwing <code>HTTPManagerError.unexpectedNoContent</code>.
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerActionRequest")
@interface HTTPManagerActionRequest : HTTPManagerNetworkRequest
@end



@class HTTPManagerObjectParseRequest;
@class NSError;

@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as JSON.
/// Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// The parse result is <code>nil</code> if and only if the server responded with
/// 204 No Content.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON.
/// note:
/// The parse result is <code>nil</code> if and only if the server responded with
/// 204 No Content.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler. Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the <code>json</code> argument to the handler is <code>nil</code>, this means the server
/// responded with 204 No Content and the <code>response</code> argument is guaranteed
/// to be an instance of <code>NSHTTPURLResponse</code>.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler.
/// note:
/// If the <code>json</code> argument to the handler is <code>nil</code>, this means the server
/// responded with 204 No Content and the <code>response</code> argument is guaranteed
/// to be an instance of <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the parse result is <code>nil</code>, this means the server responded with 204 No
/// Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImage SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the parse result is <code>nil</code>, this means the server responded with 204 No
/// Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// \param scale The scale to use for the resulting image.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the <code>value</code> argument to the handler is <code>nil</code>, this means the server responded
/// with 204 No Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the <code>value</code> argument to the handler is <code>nil</code>, this means the server responded
/// with 204 No Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param scale The scale to use for the resulting image.
///
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale handler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


/// A protocol that provides hooks for configuring the shared <code>HTTPManager</code>.
/// If the application delegate conforms to this protocol, it will be asked to configure the shared <code>HTTPManager</code>.
/// This will occur on first access to the global <code>HTTP</code> property.
SWIFT_PROTOCOL("_TtP6PMHTTP23HTTPManagerConfigurable_")
@protocol HTTPManagerConfigurable
/// Invoked on first access to the global <code>HTTP</code> property.
/// note:
/// You should not create any requests from within this method. Doing so is not
/// supported and will likely result in a misconfigured request.
/// important:
/// You MUST NOT access the global <code>HTTP</code> property from within this method.
/// Any attempt to do so will deadlock as the property has not finished initializing.
- (void)configureWithHttpManager:(HTTPManager * _Nonnull)httpManager;
- (void)configureHTTPManager:(HTTPManager * _Nonnull)httpManager SWIFT_UNAVAILABLE_MSG("'configureHTTPManager' has been renamed to 'configureWithHttpManager:'");
@end


/// An HTTP GET/HEAD request that does not yet have a parse handler.
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerDataRequest")
@interface HTTPManagerDataRequest : HTTPManagerNetworkRequest
@end




@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImage SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// \param scale The scale to use for the resulting image.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param scale The scale to use for the resulting image.
///
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale handler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
/// The cache policy to use for the request. If <code>NSURLRequestUseProtocolCachePolicy</code>,
/// the default cache policy is used. Default is <code>NSURLRequestUseProtocolCachePolicy</code>.
@property (nonatomic) NSURLRequestCachePolicy cachePolicy;
/// Returns a new request that parses the data as JSON.
/// Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler. Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


/// The environment for an <code>HTTPManager</code>.
/// This class does not define any default environments. You can extend this class in your application
/// to add environment definitions for convenient access. For example:
/// \code
/// extension HTTPManagerEnvironment {
///     /// The Production environment.
///     @nonobjc static let Production = HTTPManagerEnvironment(baseURL: URL(string: "https://example.com/api/v1")!)!
///     /// The Staging environment.
///     @nonobjc static let Staging = HTTPManagerEnvironment(baseURL: URL(string: "https://stage.example.com/api/v1")!)!
/// }
///
/// \endcodeYou can also use <code>HTTPManagerConfigurable</code> to configure the initial environment on the shared <code>HTTPManager</code>.
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerEnvironment")
@interface HTTPManagerEnvironment : NSObject
/// The base URL for the environment.
/// invariant:
/// The URL is an absolute URL that is valid according to RFC 3986, the URL’s path
/// is either empty or has a trailing slash, and the URL has no query or fragment component.
@property (nonatomic, readonly, copy) NSURL * _Nonnull baseURL;
/// Initializes an environment with a base URL.
/// note:
/// If <code>baseURL</code> has a non-empty <code>path</code> that does not end in a slash, the path is modified to
/// include a trailing slash. If <code>baseURL</code> has a query or fragment component, these components are
/// stripped.
/// \param baseURL The base URL to use for the environment. Must be a valid absolute URL
/// according to RFC 3986.
///
///
/// returns:
/// An <code>HTTPManagerEnvironment</code> if the base URL is a valid absolute URL, <code>nil</code> otherwise.
- (nullable instancetype)initWithBaseURL:(NSURL * _Nonnull)baseURL;
- (nullable instancetype)initWithString:(NSString * _Nonnull)string;
/// Returns <code>true</code> if <code>url</code> is prefixed by <code>self.baseURL</code>, <code>false</code> otherwise.
/// For one URL to prefix another, both URLs must have the same scheme, authority info,
/// host, and port, and the first URL’s path must be a prefix of the second URL’s path.
/// Scheme and host are compared case-insensitively, and if the port is nil, an appropriate
/// default value is assumed for the HTTP and HTTPS schemes.
/// \param url The URL to compare against. Must be a valid absolute URL according to RFC 3986,
/// otherwise this method always returns <code>false</code>.
///
- (BOOL)isPrefixOf:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM_NAMED(NSInteger, PMHTTPImageError, "HTTPManagerImageError", closed) {
/// The image returned by the server could not be decoded.
  PMHTTPImageErrorCannotDecode = 0,
};
static NSString * _Nonnull const PMHTTPImageErrorDomain = @"PMHTTP.HTTPManagerImageError";

@class NSOperationQueue;
@class NSURLSessionTask;
@class NSURLSessionTaskMetrics;

/// An object that encapsultes a callback for task metrics and the queue to invoke it on.
SWIFT_CLASS("_TtC6PMHTTP26HTTPManagerMetricsCallback") SWIFT_AVAILABILITY(watchos,introduced=3) SWIFT_AVAILABILITY(tvos,introduced=10) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10)
@interface HTTPManagerMetricsCallback : NSObject
/// The operation queue that the callback will be invoked on.
/// If <code>nil</code>, the callback will be invoked on a global background queue with the <code>.utility</code> QoS.
@property (nonatomic, readonly, strong) NSOperationQueue * _Nullable queue;
/// The callback that will be invoked with task metrics.
/// \param task The task for which metrics were collected.
///
/// \param urlTask The underlying network task for which metrics were collected.
/// This may be different than <code>task.networkTask</code> if the task is configured with
/// automatic retry behavior.
///
/// \param metrics The task metrics that were collected.
///
@property (nonatomic, readonly, copy) void (^ _Nonnull handler)(HTTPManagerTask * _Nonnull, NSURLSessionTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull);
/// The callback that will be invoked with task metrics.
/// \param task The task for which metrics were collected.
///
/// \param metrics The task metrics that were collected.
///
@property (nonatomic, readonly, copy) void (^ _Nonnull callback)(HTTPManagerTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull) SWIFT_DEPRECATED_MSG("Use .handler instead");
/// Returns a new <code>HTTPManagerMetricsCallback</code> object.
/// \param queue The operation queue that the callback will be invoked on. If <code>nil</code>, the
/// callback will be invoked on a global background queue with the <code>.utility</code> QoS.
///
/// \param handler The callback that will be invoked with task metrics.
///
/// \param task The task for which metrics were collected.
///
/// \param urlTask The underlying network task for which metrics were collected.
/// This may be different than <code>task.networkTask</code> if the task is configured with
/// automatic retry behavior.
///
/// \param metrics The task metrics that were collected.
///
- (nonnull instancetype)initWithQueue:(NSOperationQueue * _Nullable)queue handler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSURLSessionTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>HTTPManagerMetricsCallback</code> object.
/// \param queue The operation queue that the callback will be invoked on. If <code>nil</code>, the
/// callback will be invoked on a global background queue with the <code>.utility</code> QoS.
///
/// \param callback The callback that will be invoked with task metrics.
///
/// \param task The task for which metrics were collected.
///
/// \param metrics The task metrics that were collected.
///
- (nonnull instancetype)initWithQueue:(NSOperationQueue * _Nullable)queue callback:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull))callback SWIFT_DEPRECATED_MSG("Use init(queue:handler:) instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that returns a mock response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
/// Retursn a new request that returns a mock plain text response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock plain text response.
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
@end



@class PMHTTPDataResult;

@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data with the specified handler.
/// note:
/// If the server responds with 204 No Content, the parse handler is
/// invoked with an empty data. The handler may choose to return the error
/// <code>HTTPManagerError.unexpectedNoContent</code> if it does not handle this case.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, NSData * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>-resume</code> method.
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>resume()</code> method.
/// \param queue The queue to call the handler on. <code>nil</code> means the handler will
/// be called on a global concurrent queue.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param completion The handler to call when the request is done. This
/// handler is called on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param queue The queue to call the handler on. May be <code>nil</code>.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
@end

@class PMHTTPResult;

/// An HTTP request that has a parse handler.
/// note:
/// This class is only meant to be used from Obj-C.
SWIFT_CLASS("_TtC6PMHTTP29HTTPManagerObjectParseRequest")
@interface HTTPManagerObjectParseRequest : HTTPManagerRequest
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
@property (nonatomic, strong) id <HTTPAuth> _Nullable auth;
@property (nonatomic) BOOL shouldFollowRedirects;
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@property (nonatomic) BOOL allowsCellularAccess;
@property (nonatomic, copy) NSURL * _Nullable mainDocumentURL;
@property (nonatomic) BOOL httpShouldHandleCookies;
@property (nonatomic) BOOL userInitiated;
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
@property (nonatomic) BOOL assumeErrorsAreJSON;
@property (nonatomic) BOOL serverRequiresContentLength;
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
/// The expected MIME type of the response. Defaults to <code>["application/json"]</code>
/// for JSON parse requests, or <code>[]</code> for requests created with <code>-parseWithHandler:</code>.
/// This property is used to generate the <code>Accept</code> header, if not otherwise specified by
/// the request. If multiple values are provided, they’re treated as a priority list
/// for the purposes of the <code>Accept</code> header.
/// This property is also used to validate the MIME type of the response. If the
/// response is a 204 No Content, the MIME type is not checked. For all other 2xx
/// responses, if at least one expected content type is provided, the MIME type
/// must match one of them. If it doesn’t match any, the parse handler will be
/// skipped and <code>HTTPManagerError.unexpectedContentType</code> will be returned as the result.
/// note:
/// The MIME type is only tested if the response includes a <code>Content-Type</code> header.
/// If the <code>Content-Type</code> header is missing, the response will always be assumed to be
/// valid. The value is tested against both the <code>Content-Type</code> header and, if it differs,
/// the <code>NSURLResponse</code> property <code>MIMEType</code>. This is to account for cases where the
/// protocol implementation detects a different content type than the server declared.
/// Each media type in the list may include parameters. These parameters will be included
/// in the <code>Accept</code> header, but will be ignored for the purposes of comparing against the
/// resulting MIME type. If the media type includes a parameter named <code>q</code>, this parameter
/// should be last, as it will be interpreted by the <code>Accept</code> header as the priority
/// instead of as a parameter of the media type.
/// note:
/// Changing the <code>expectedContentTypes</code> does not affect the behavior of the parse
/// handler. If you create a request using <code>-parseAsJSON</code> and then change the
/// <code>expectedContentTypes</code> to <code>["text/plain"]</code>, if the server returns a <code>"text/plain"</code>
/// response, the parse handler will still assume it’s JSON and attempt to decode it.
/// important:
/// The media types in this list will not be checked for validity. They must
/// follow the rules for well-formed media types, otherwise the server may handle the
/// request incorrectly.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull expectedContentTypes;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>-resume</code> method.
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>resume()</code> method.
/// \param queue The queue to call the handler on. <code>nil</code> means the handler will
/// be called on a global concurrent queue.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param completion The handler to call when the request is done. This
/// handler is called on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param queue The queue to call the handler on. May be <code>nil</code>.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that returns a mock response.
/// Requests with a mock response will not hit the network and will not invoke the
/// parse handler.
/// Any network mock inherited from an <code>HTTPManagerNetworkRequest</code> will be overwritten
/// by this method.
/// seealso:
/// <code>mock(headers:value:delay:)</code>.
/// \param value The parsed value to return.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (HTTPManagerObjectParseRequest * _Nonnull)mock:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that returns a mock response.
/// Requests with a mock response will not hit the network and will not invoke the
/// parse handler.
/// Any network mock inherited from an <code>HTTPManagerNetworkRequest</code> will be overwritten
/// by this method.
/// \param headers A collection of HTTP headers to return.
///
/// \param value The parsed object to return.
///
/// \param delay The amount of time in seconds to wait before returning the
/// response.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (HTTPManagerObjectParseRequest * _Nonnull)mockWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers value:(id _Nullable)value delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' with HTTPBasicAuth");
@end





@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' with HTTPBasicAuth");
@end

@class NSNumber;

@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
/// The request method.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestMethod;
/// <code>true</code> if the request is idempotent, otherwise <code>false</code>. A request is idempotent if
/// the side-effects of N > 0 identical requests is the same as for a single request,
/// or in other words, the request can be repeated without changing anything.
/// note:
/// A sequence of several idempotent requests may not be idempotent as a whole.
/// This could be because a later request in the sequence changes something that
/// affects an earlier request.
/// This property normally only affects retry behavior for failed requests, although
/// it could be used for external functionality such as showing a Retry button in an
/// error dialog. The value of this property is exposed on <code>HTTPManagerTask</code> as well.
/// note:
/// When writing external functionality that uses <code>isIdempotent</code> (such as showing
/// a Retry button) it’s generally a good idea to only repeat requests that failed.
/// It should be safe to repeat successful idempotent network requests, but parse requests
/// may have parse handlers with side-effects. If you care about idempotence for successful
/// or canceled requests, you should ensure that all parse handlers are idempotent or
/// mark any relevant parse requests as non-idempotent.
/// The default value is <code>true</code> for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests,
/// and <code>false</code> for POST, PATCH, CONNECT, or unknown request methods.
@property (nonatomic, getter=isIdempotent) BOOL idempotent;
/// The timeout interval of the request, in seconds. If <code>nil</code>, the session’s default
/// timeout interval is used. Default is <code>nil</code>.
@property (nonatomic, strong) NSNumber * _Nullable timeoutInterval;
/// The cache policy to use for the request. If <code>NSURLRequestUseProtocolCachePolicy</code>,
/// the default cache policy is used. Default is <code>NSURLRequestUseProtocolCachePolicy</code>
/// for GET/HEAD requests and <code>NSURLRequestReloadIgnoringLocalCacheData</code> for
/// POST/PUT/PATCH/DELETE requests.
@property (nonatomic, readonly) NSURLRequestCachePolicy cachePolicy;
/// Additional HTTP header fields to pass in the request. Default is the value of
/// <code>HTTPManager.defaultHeaderFields</code> for requests in the current environment, otherwise <code>@{}</code>.
/// If not specified, the request will fill in <code>Accept</code> and <code>Accept-Language</code>
/// automatically when performing the request.
/// note:
/// If <code>self.credential</code> is non-<code>nil</code>, the <code>Authorization</code> header will be
/// ignored. <code>Content-Type</code> and <code>Content-Length</code> are always ignored.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headerFields;
/// Adds an HTTP header to the list of header fields.
/// If a value was previously set for the specified <em>field</em>, the supplied <em>value</em> is appended
/// to the existing value using the appropriate field delimiter.
/// \param value The value for the header field.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)addValue:(NSString * _Nonnull)value forHeaderField:(NSString * _Nonnull)field;
/// Sets a specified HTTP header field.
/// \param value The value for the header field. If <code>nil</code> the header is deleted.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)setValue:(NSString * _Nullable)value forHeaderField:(NSString * _Nonnull)field;
/// Returns a specified HTTP header field, if set.
/// \param field The name of the header field. Header fields are case-insensitive.
///
///
/// returns:
/// The value for the header field, or <code>nil</code> if no value was set.
- (NSString * _Nullable)valueForHeaderField:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents the retry behavior for an HTTP request.
/// Retry behaviors provide a mechanism for requests to automatically retry upon failure before
/// notifying the caller about the failure. Any arbitrary retry behavior can be implemented, but
/// convenience methods are provided for some of the more common behaviors.
/// Unless otherwise specified, retry behaviors are only evaluated for idempotent requests.
/// This is controlled by the <code>isIdempotent</code> property of <code>HTTPManagerRequest</code>, which defaults to
/// <code>true</code> for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests, and <code>false</code> otherwise.
/// note:
/// Retry behaviors are evaluated on an arbitrary dispatch queue.
/// note:
/// If a task is retried after an authentication failure through the use of an <code>HTTPAuth</code>
/// object, the attempt count for <code>HTTPManagerRetryBehavior</code> is reset to zero.
/// note:
/// If the request fails due to a 401 Unauthorized, and the request’s <code>auth</code> property was
/// set, the <code>HTTPManagerRetryBehavior</code> is not consulted. When the <code>auth</code> property is set, the
/// only way to retry a 401 Unauthorized is via the <code>HTTPAuth</code> object.
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerRetryBehavior")
@interface HTTPManagerRetryBehavior : NSObject
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated only for idempotent requests. If the request involves
/// redirections, the original request will be evaluated for idempotence (and in the event of a retry,
/// the original request is the one that is retried).
/// note:
/// The block will be executed on an arbitrary dispatch queue.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)init:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated for all requests regardless of whether the request
/// is idempotent. If the request involves redirections, the original request is the one that is retried.
/// important:
/// Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
/// and only retry those requests where performing the request twice is safe. Your handler shold consult
/// the <code>originalRequest</code> property of the task for making this determination.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)initWithIgnoringIdempotence:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a retry behavior that evaluates an array of behaviors until one of them succeeds.
/// The returned behavior will evaluate the first behavior in the array. If that invokes the
/// callback with <code>false</code> it will evaluate the second, and so on until some behavior has invoked
/// the callback with <code>true</code> or all behaviors have been exhausted.
/// \param retryBehaviors The array of retry behaviors to try in turn.
///
- (nonnull instancetype)initWithAnyRetryBehavior:(NSArray<HTTPManagerRetryBehavior *> * _Nonnull)retryBehaviors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTTPManagerRetryBehavior (SWIFT_EXTENSION(PMHTTP))
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated only for idempotent requests. If the request involves
/// redirections, the original request will be evaluated for idempotence (and in the event of a retry,
/// the original request is the one that is retried).
/// note:
/// The block will be executed on an arbitrary dispatch queue.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)retryBehaviorWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler SWIFT_METHOD_FAMILY(init);
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated for all requests regardless of whether the request
/// is idempotent. If the request involves redirections, the original request is the one that is retried.
/// important:
/// Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
/// and only retry those requests where performing the request twice is safe. Your handler shold consult
/// the <code>originalRequest</code> property of the task for making this determination.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)retryBehaviorIgnoringIdempotenceWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler SWIFT_METHOD_FAMILY(init);
/// Returns a retry behavior that retries once automatically for networking errors.
/// A networking error is defined as many errors in the <code>NSURLErrorDomain</code>, or a
/// <code>PMJSON.JSONParserError</code> with a code of <code>.unexpectedEOF</code> (as this may indicate a
/// truncated response). The request will not be retried for networking errors that
/// are unlikely to change when retrying.
/// If the request is non-idempotent, it only retries if the error indicates that a
/// connection was never made to the server (such as cannot find host).
/// \param including503ServiceUnavailable If <code>YES</code>, retries on a 503 Service Unavailable
/// response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
/// as the server did not handle the original request. If <code>NO</code>, only networking failures
/// are retried.
///
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureOnceIncluding503ServiceUnavailable:(BOOL)including503ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
/// Returns a retry behavior that retries twice automatically for networking errors.
/// The first retry happens immediately, and the second retry happens after a given
/// delay.
/// A networking error is defined as many errors in the <code>NSURLErrorDomain</code>, or a
/// <code>PMJSON.JSONParserError</code> with a code of <code>.unexpectedEOF</code> (as this may indicate a
/// truncated response). The request will not be retried for networking errors that
/// are unlikely to change when retrying.
/// If the request is non-idempotent, it only retries if the error indicates that a
/// connection was never made to the server (such as cannot find host).
/// \param delay The amount of time in seconds to wait before the second retry.
///
/// \param including503ServiceUnavailable If <code>YES</code>, retries on a 503 Service Unavailable
/// response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
/// as the server did not handle the original request. If <code>NO</code>, only networking failures
/// are retried.
///
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureTwiceWithDelay:(NSTimeInterval)delay including503ServiceUnavailable:(BOOL)including503ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
@end

enum HTTPManagerTaskState : unsigned char;

/// An initiated HTTP operation.
/// <em>Thread safety:</em> All methods in this class are safe to call from any thread.
SWIFT_CLASS("_TtC6PMHTTP15HTTPManagerTask")
@interface HTTPManagerTask : NSObject
/// The underlying <code>URLSessionTask</code>.
/// If a failed request is automatically retried, this property value
/// will change.
/// note:
/// This property supports key-value observing.
@property (nonatomic, readonly, strong) NSURLSessionTask * _Nonnull networkTask;
/// The <code>HTTPAuth</code> used to authenticate the request, if any.
@property (nonatomic, readonly, strong) id <HTTPAuth> _Nullable auth;
/// The current state of the task.
/// note:
/// This property is thread-safe and may be accessed concurrently.
/// note:
/// This property supports KVO. The KVO notifications will execute
/// on an arbitrary thread.
@property (nonatomic, readonly) enum HTTPManagerTaskState state;
/// The value of the original request’s <code>userInitiated</code> property.
/// If <code>true</code> this means the task executed at a higher priority than it would have if this
/// property were <code>false</code>.
/// This property can be used to make decisions about things such as what dispatch queue to use
/// when implementing custom retry logic.
@property (nonatomic, readonly) BOOL userInitiated;
+ (BOOL)automaticallyNotifiesObserversForKey:(NSString * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
/// Invokes <code>resume()</code> on the underlying <code>URLSessionTask</code>.
/// important:
/// You should always use this method instead of invoking <code>resume()</code>
/// on the <code>networkTask</code>.
/// note:
/// To suspend the underlying task you can access it with the
/// <code>networkTask</code> property. However, suspending the task will not remove it from
/// the list of outstanding tasks used to control the network activity indicator.
- (void)resume;
/// Cancels the operation, if it hasn’t already completed.
/// If the operation is still talking to the network, the underlying network
/// task is canceled. If the operation is processing the results, the
/// results processor is canceled at the earliest opportunity.
/// Calling this on a task that’s already moved to <code>.completed</code> is a no-op.
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, readonly, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' instead");
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
/// <code>true</code> if the request is idempotent, otherwise <code>false</code>. A request is idempotent if
/// the side-effects of N > 0 identical requests is the same as for a single request,
/// or in other words, the request can be repeated without changing anything.
/// note:
/// A sequence of several idempotent requests may not be idempotent as a whole.
/// This could be because a later request in the sequence changes something that
/// affects an earlier request.
/// This property normally only affects retry behavior for failed requests, although
/// it could be used for external functionality such as showing a Retry button in an
/// error dialog.
@property (nonatomic, readonly, getter=isIdempotent) BOOL idempotent;
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// The state of an <code>HTTPManagerTask</code>.
typedef SWIFT_ENUM(unsigned char, HTTPManagerTaskState, closed) {
/// The task is currently running.
  HTTPManagerTaskStateRunning = 0,
/// The task is processing results (e.g. parsing JSON).
  HTTPManagerTaskStateProcessing = 1,
/// The task has been canceled. The completion handler may or may not
/// have been invoked yet.
  HTTPManagerTaskStateCanceled = 2,
/// The task has completed. The completion handler may or may not have
/// been invoked yet.
  HTTPManagerTaskStateCompleted = 3,
};


/// An HTTP POST/PUT/PATCH request with binary data that does not yet have a parse handler.
/// The body of this request is a given <code>NSData</code> object. Any <code>parameters</code> are passed in the
/// query string.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadDataRequest")
@interface HTTPManagerUploadDataRequest : HTTPManagerActionRequest
/// The data to upload.
@property (nonatomic, copy) NSData * _Nonnull uploadData;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@end

@class HTTPManagerUploadMultipart;

/// An HTTP POST/PUT/PATCH request with form data that does not yet have a parse handler.
/// By default, any request parameters (see <code>HTTPManagerRequest.parameters</code>) are
/// passed as <code>application/x-www-form-urlencoded</code>. Adding any multipart bodies
/// passes everything as <code>multipart/form-data</code> instead. When mixing <em>parameters</em>
/// and multipart bodies, the <em>parameters</em> are sent prior to any multipart bodies.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadFormRequest")
@interface HTTPManagerUploadFormRequest : HTTPManagerActionRequest
/// The URL for the request, including any query items as appropriate.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The Content-Type for the request.
///
/// returns:
/// Either <code>"application/x-www-form-urlencoded"</code> or <code>"multipart/form-data"</code>
/// depending on the nature of the upload.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// Specifies a named multipart body for this request.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> and <code>filename</code> are assumed to be ASCII and not need any escaping.
/// \param data The data for the multipart body, such as an image or text.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
/// \param mimeType The MIME content type of the multipart body. Optional.
///
/// \param filename The filename of the attachment. Optional.
///
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/// Specifies a named multipart body for this request.
/// The Content-Type of the multipart body will always be
/// <code>text/plain; charset=utf-8</code>.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> is assumed to be ASCII and not need any escaping.
/// \param text The text of the multipart body.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
/// Adds a block that’s invoked asynchronously to provide multipart bodies for this request.
/// The block is invoked on an arbitrary thread when task requests a new body stream.
/// Any multipart bodies added by the block will be inserted into the request body.
/// The associated block will only ever be invoked once even if the request is used to create
/// multiple tasks.
/// note:
/// Using this method means that the <code>Content-Length</code> cannot be calculated for this
/// request. When calling APIs that need a defined <code>Content-Length</code> you must provide all
/// of the upload data up-front.
/// seealso:
/// <code>addMultipart(data:withName:mimeType:filename:)</code>,
/// <code>addMultipart(text:withName:)</code>.
/// \param block The block that provides the multipart bodies. This block is
/// invoked on an arbitrary background thread. The <code>HTTPManagerUploadMultipart</code>
/// parameter can be used to add multipart bodies to the request. This object is
/// only valid for the duration of the block’s execution.
///
- (void)addMultipartBodyWithBlock:(void (^ _Nonnull)(HTTPManagerUploadMultipart * _Nonnull))block;
@end






/// An HTTP POST/PUT/PATCH for JSON data that does not yet have a parse handler.
/// The body of this request is a JSON blob. Any <code>parameters</code> are passed in the
/// query string.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadJSONRequest")
@interface HTTPManagerUploadJSONRequest : HTTPManagerActionRequest
/// The Content-Type for the request.
///
/// returns:
/// <code>"application/json"</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@end


@interface HTTPManagerUploadJSONRequest (SWIFT_EXTENSION(PMHTTP))
/// The JSON data to upload.
/// requires:
/// Values assigned to this property must be json-compatible.
@property (nonatomic) id _Nonnull uploadJSON;
@end


/// Helper class for <code>HTTPManagerUploadFormRequest.addMultipartBody(with:)</code>.
SWIFT_CLASS("_TtC6PMHTTP26HTTPManagerUploadMultipart")
@interface HTTPManagerUploadMultipart : NSObject
/// Specifies a named multipart body for this request.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> and <code>filename</code> are assumed to be ASCII and not need any escaping.
/// \param data The data for the multipart body, such as an image or text.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
/// \param mimeType The MIME content type of the multipart body. Optional.
///
/// \param filename The filename of the attachment. Optional.
///
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/// Specifies a named multipart body for this request.
/// The Content-Type of the multipart body will always be
/// <code>text/plain; charset=utf-8</code>.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> is assumed to be ASCII and not need any escaping.
/// \param text The text of the multipart body.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@protocol HTTPMockToken;
@class HTTPMockSequence;

/// Manages a set of mocks for the <code>HTTPManager</code>.
/// The mocks associated with this class may match requests based on path (relative to the environment)
/// or absolute URL. If the path or URL contains any path component of the form <code>:name</code>, any (non-empty)
/// component value will match and the matched value will be made available to block-based mocks.
/// For example the path <code>"users/:id"</code> will match a request for <code>"users/1234"</code> but will not match
/// a request for <code>"users"</code>.
/// All mocks are evaluated in reverse order of addition. This means that if two mocks would match the
/// same URL, whichever mock was added last is used.
/// <em>Thread safety:</em> All methods in this class are safe to call from any thread.
SWIFT_CLASS("_TtC6PMHTTP15HTTPMockManager")
@interface HTTPMockManager : NSObject
/// If <code>true</code>, any URL that is part of the current environment but not handled by any mocks
/// will return an error. The default value is <code>false</code>.
/// note:
/// Testing for unmocked intercepted requests should be done with
/// <code>URLResponse.isUnmockedInterceptedRequest</code>.
/// seealso:
/// interceptUnhandledExternalURLs
@property (nonatomic) BOOL interceptUnhandledEnvironmentURLs;
/// If <code>true</code>, any URL that is not part of the current environment but not handled by any mocks
/// will return an error. The default value is <code>false</code>.
/// note:
/// Testing for unmocked intercepted requests should be done with
/// <code>URLResponse.isUnmockedInterceptedRequest</code>.
/// seealso:
/// interceptUnhandledEnvironmentURLs
@property (nonatomic) BOOL interceptUnhandledExternalURLs;
/// Adds a mock to the mock manager that returns a given response.
/// All requests that match this mock will be given the same response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/// Adds a mock to the mock manager that returns a given plain text response.
/// All requests that match this mock will be given the same response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
/// Adds a mock to the mock manager that returns a given sequence of responses.
/// Each request that matches this mock will be given the next response in the sequence.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param sequence an <code>HTTPMockSequence</code> with the sequence of responses to provide.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod sequence:(HTTPMockSequence * _Nonnull)sequence;
/// Adds a mock to the mock manager that evaluates a block to provide the response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param queue (Optional) A <code>dispatch_queue_t</code> to run the handler on. The default value
/// of <code>nil</code> means to use a private serial queue.
///
/// \param handler A block to execute in order to provide the mock response. The block
/// has arguments <code>request</code>, <code>parameters</code>, and <code>completion</code>. <code>request</code> is the <code>URLRequest</code>
/// that matched the mock. <code>parameters</code> is a dictionary that contains a value for each <code>:name</code>
/// token from the <code>url</code> (note: the key is just <code>"name"</code>, not <code>":name"</code>). <code>completion</code> is a
/// block that must be invoked to provide the response. The <code>completion</code> block may be invoked
/// from any queue, but it is an error to not invoke it at all or to invoke it twice.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod queue:(dispatch_queue_t _Nullable)queue handler:(void (^ _Nonnull)(NSURLRequest * _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull, void (^ _Nonnull)(NSHTTPURLResponse * _Nonnull, NSData * _Nonnull)))handler;
/// Removes a previously-registered mock from the mock manager.
/// Calling this with a token that was already removed, or with a token from another mock
/// manager, is a no-op.
/// \param token An <code>HTTPMockToken</code> returned by a previous call to <code>addMock</code>.
///
- (void)removeMock:(id <HTTPMockToken> _Nonnull)token;
/// Removes all mocks from the mock manager.
- (void)removeAllMocks;
/// Resets the mock manager back to the defaults.
/// This removes all mocks and resets all properties back to their default values.
- (void)reset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPMockManager (SWIFT_EXTENSION(PMHTTP))
/// A convenience function for reading the body data from a <code>URLRequest</code>.
/// If the request has <code>HTTPBody</code> set, it is returned, otherwise if it has <code>HTTPBodyStream</code>,
/// the stream is read to exhaustion. If the request has no body, an empty <code>NSData</code> is returned.
/// warning:
/// If the request has an <code>HTTPBodyStream</code> but it cannot be opened (e.g. because it
/// has already been read), an empty <code>NSData</code> is returned. Similarly, if the stream takes longer
/// than 400ms to open, an empty <code>NSData</code> is returned.
/// This function is primarily intended to be used from within a handler block passed to
/// <code>addMock(for:httpMethod:queue:handler:)</code>.
- (NSData * _Nonnull)dataFromRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@end




/// Represents a sequence of mock responses that will be returned from successive requests
/// that are handled by the same mock.
/// Responses added to the sequence are returned in the same order. If more requests are made
/// than responses added to the sequence, all subsequence requests will return a generic
/// 500 Internal Server Error response. The property <code>repeatsLastResponse</code> can be used to
/// instead repeat the final response over and over.
/// <em>Thread safety:</em> Instances of this class may not be accessed concurrently from multiple
/// threads at the same time.
SWIFT_CLASS("_TtC6PMHTTP16HTTPMockSequence")
@interface HTTPMockSequence : NSObject
/// If <code>true</code>, the last response in the sequence is repeated for all future requests.
/// Otherwise, once the sequence has been exhausted, future requests will serve up a
/// 500 Internal Server Error response. The default value is <code>false</code>.
@property (nonatomic) BOOL repeatsLastResponse;
/// Adds a mock to the sequence that returns a given response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/// Adds a mock to the sequence that returns a given plain text response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A token that can be used to unregister a mock from an <code>HTTPMockManager</code>.
SWIFT_PROTOCOL("_TtP6PMHTTP13HTTPMockToken_")
@protocol HTTPMockToken
@end

@class NSCachedURLResponse;
@protocol NSURLProtocolClient;

SWIFT_CLASS("_TtC6PMHTTP19HTTPMockURLProtocol")
@interface HTTPMockURLProtocol : NSURLProtocol
+ (BOOL)canInitWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
+ (NSURLRequest * _Nonnull)canonicalRequestForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id <NSURLProtocolClient> _Nullable)client OBJC_DESIGNATED_INITIALIZER;
- (void)startLoading;
- (void)stopLoading;
@end


/// The base class for <code>HTTPAuth</code> implementations that refresh their authentication automatically.
/// This class provides support for refreshing authentication information, e.g. for OAuth2 token
/// refresh. It is recommended that you subclass this class in order to provide your own
/// initializer.
/// note:
/// This class assumes that each instance manages a single authentication realm, and makes
/// no provision for refreshing authentication for multiple realms simultaneously.
SWIFT_CLASS("_TtC6PMHTTP19HTTPRefreshableAuth")
@interface HTTPRefreshableAuth : NSObject <HTTPAuth>
/// Returns a new <code>HTTPRefreshableAuth</code>.
/// \param info A value that is used to calculate authentication headers and refresh
/// authentication information. This parameter may have any type, as long as it’s thread-safe.
///
/// \param authenticationHeadersBlock A block that is used to return the authentication
/// headers for a request. The <code>info</code> parameter is provided to this block.
/// This block may be called from any thread.
///
/// \param authenticationRefreshBlock A block that is invoked in response to a 401
/// Unauthorized response in order to refresh the authentication information. This block will
/// not be invoked multiple times concurrent with each other. Any requests that fail while
/// refreshing will use the results of the outstanding refresh.
/// This block returns an optional <code>HTTPManagerTask</code>. If non-<code>nil</code>, the task will be tracked
/// and will be canceled if the <code>HTTPRefreshableAuth</code> is deinited.
/// This block may be called from any thread.
/// The <code>completion</code> parameter to this block must be invoked with the results of the refresh.
/// The first parameter to this block is the new <code>info</code> value that represents the new
/// authentication information, or <code>nil</code> if there is no new info. The second parameter is a
/// boolean that indicates whether the refresh succeeded. If this parameter is <code>true</code> all
/// pending failed tasks are retried with the new info. If <code>false</code> all pending failed tasks
/// will complete with the error <code>HTTPManagerError.unauthorized</code>. The <code>completion</code> block may
/// be invoked from any thread, including being invoked synchronously from
/// <code>authenticationRefreshBlock</code>.
///
- (nonnull instancetype)initWithInfo:(id _Nonnull)info authenticationHeadersBlock:(NSDictionary<NSString *, NSString *> * _Nonnull (^ _Nonnull)(NSURLRequest * _Nonnull, id _Nonnull))authenticationHeadersBlock authenticationRefreshBlock:(HTTPManagerTask * _Nullable (^ _Nonnull)(NSHTTPURLResponse * _Nonnull, NSData * _Nonnull, id _Nonnull, void (^ _Nonnull)(id _Nullable, BOOL)))authenticationRefreshBlock;
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)opaqueTokenForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Invoked when a 401 Unauthorized response is received.
/// The default implementation refreshes the authentication information if necessary. If you
/// override this method, you should call <code>super</code> unless you want to skip refreshing
/// authentication information for any reason.
- (void)handleUnauthorizedResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC6PMHTTP22NetworkActivityManager")
@interface NetworkActivityManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The results of an HTTP request.
SWIFT_CLASS("_TtC6PMHTTP12PMHTTPResult")
@interface PMHTTPResult : NSObject <NSCopying>
/// <code>true</code> iff the task finished successfully.
@property (nonatomic, readonly) BOOL isSuccess;
/// <code>true</code> iff the task failed with an error.
@property (nonatomic, readonly) BOOL isError;
/// <code>true</code> iff the task was canceled before it finished.
@property (nonatomic, readonly) BOOL isCanceled;
/// If the task finished successfully, returns the resulting value, if any.
/// Otherwise, returns <code>nil</code>.
/// note:
/// A successful result may still have a <code>nil</code> value if the parse handler
/// returns <code>nil</code> or if it’s a POST/PUT/PATCH/DELETE request and the response
/// is 204 No Content.
@property (nonatomic, readonly) id _Nullable value;
/// If the task finished successfully, or if it failed with an error
/// during processing after receiving the response, returns the <code>NSURLResponse</code>.
/// Otherwise, if the task failed with a networking error or was canceled,
/// returns <code>nil</code>.
@property (nonatomic, readonly, strong) NSURLResponse * _Nullable response;
/// If the task failed with an error, returns the <code>NSError</code>.
/// Otherwise, returns <code>nil</code>.
/// note:
/// Canceled tasks are not considered to be in error and therefore
/// return <code>nil</code> from both <code>value</code> and <code>error</code>.
@property (nonatomic, readonly, strong) NSError * _Nullable error;
/// Returns the error or canceled state as an <code>NSError</code>, or <code>nil</code> if successful.
/// Canceled results are converted into <code>NSURLErrorCancelled</code> errors.
@property (nonatomic, readonly, strong) NSError * _Nullable objcError;
/// Creates and returns a new <code>PMHTTPResult</code> representing a successful result.
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPResult</code> representing a failed task.
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPResult</code> representing a canceled task.
+ (PMHTTPResult * _Nonnull)canceledResult SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The results of an HTTP request that returns an <code>NSData</code>.
SWIFT_CLASS("_TtC6PMHTTP16PMHTTPDataResult")
@interface PMHTTPDataResult : PMHTTPResult
/// If the task finished successfully, returns the resulting <code>Data</code>, if any.
/// Otherwise, returns <code>nil</code>.
/// note:
/// A successful result may still have a <code>nil</code> value if it’s a
/// POST/PUT/PATCH/DELETE request and the response is 204 No Content.
/// Successful GET/HEAD requests will never have a <code>nil</code> value.
/// note:
/// This property returns the same value that <code>value</code> does.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a successful result.
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a failed task.
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a canceled task.
+ (PMHTTPDataResult * _Nonnull)canceledResult SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response SWIFT_UNAVAILABLE;
@end





@interface NSURLProtocol (SWIFT_EXTENSION(PMHTTP))
/// Returns the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param key The key of the desired property.
///
/// \param request The request whose properties are to be queried.
///
///
/// returns:
/// The property associated with <code>key</code>, or <code>nil</code> if no property has been stored for
/// <code>key</code>.
+ (id _Nullable)propertyForKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Sets the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param value The value to set for the specified property.
///
/// \param key The key for the specified property.
///
/// \param request The request for which to create the property.
///
+ (void)setProperty:(id _Nonnull)value forKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request;
/// Removes the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param key The key whose value should be removed.
///
/// \param request The request from which to remove the property value.
///
+ (void)removePropertyForKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request;
@end


@interface NSURLResponse (SWIFT_EXTENSION(PMHTTP))
/// Returns whether the response represents an unmocked intercepted request.
/// When <code>HTTPMockManager</code> is configured to intercept unmocked requests, this property will
/// return <code>true</code> for the response generated for any such intercepted request. Otherwise it will
/// return <code>false</code> for any mocked request or any request that wasn’t intercepted.
@property (nonatomic, readonly) BOOL pmhttp_IsUnmockedInterceptedRequest;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.3 effective-4.1.50 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PMHTTP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSHTTPURLResponse;
@class HTTPManagerTask;

/// The <code>HTTPAuth</code> protocol defines the common interface that authentication mechanisms can use.
/// This includes the ability to set headers and to handle authorization failures.
SWIFT_PROTOCOL("_TtP6PMHTTP8HTTPAuth_")
@protocol HTTPAuth
/// Returns the headers that should be added to the given request.
/// This is most commonly used to set the <code>"Authorization"</code> header.
/// note:
/// This method may be called from any thread.
/// note:
/// <code>HTTPAuth</code> is not allowed to set <code>"Content-Type"</code>, <code>"Content-Length"</code>, or
/// <code>"Accept"</code>, and any attempt to do so will be ignored.
/// \param request The <code>URLRequest</code> that the headers should be added to.
///
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns an opaque token that is associated with the request.
/// If implemented, this method is called immediately after<code> headers(for:)</code>.
/// note:
/// This method is not guaranteed to be called every time <code>headers(for:)</code> is. Notably,
/// when <code>preparedURLRequest</code> is accessed, <code>headers(for:)</code> will be invoked but not
/// <code>opaqueToken(for:)</code>.
/// This token can be used to uniquely identify the authorization information used for the
/// request. Then in <code>handleUnauthorized(_:for:token:completion:)</code> you can use this token to
/// determine if you’ve already refreshed your stored authorization information or if you need
/// to do extra work (such as fetching a new OAuth2 token) before you can retry the request.
- (id _Nullable)opaqueTokenForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Invoked when a 401 Unauthorized response is received.
/// This method is only called once per request. If this method is invoked and requests a retry,
/// and the subsequent retry fails due to 401 Unauthorized, this is considered a permanent
/// failure. Note that a 403 Forbidden after a 401 Unauthorized may trigger a second retry.
/// note:
/// This method will be called on an arbitrary background thread.
/// note:
/// Special care must be taken when implementing this method. Multiple tasks may be
/// created with the same authorization headers in parallel and may all fail even after you’ve
/// refreshed your authorization information (e.g. with OAuth2). You can use
/// <code>opaqueToken(for:)</code> in order to keep track of whether a given request was created with old
/// authorization information or whether you need to refresh your authorization information.
/// important:
/// The completion block <em>MUST</em> be called once and only once. Failing to call the
/// completion block will leave the task stuck in the processing state forever. Calling the
/// completion block multiple times may cause bad behavior.
/// note:
/// When the completion block is invoked, if the task is not retried, the task’s own
/// completion block may run synchronously on the current queue.
/// \param response The <code>HTTPURLResponse</code> that was received.
///
/// \param body The body that was received.
///
/// \param task The <code>HTTPManagerTask</code> that received the response.
///
/// \param token The opaque token returned from <code>opaqueToken(for:)</code>, otherwise <code>nil</code>.
///
/// \param completion A completion block that must be called when the <code>HTTPAuth</code> object
/// has finished handling the response. This block may be called synchronously, or it may be
/// called from any thread.
///
- (void)handleUnauthorizedResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
/// Invoked when a 403 Forbidden response is received.
/// This is intended for situations where you can’t access a resource with your existing
/// credentials but you can request new credentials that have greater access.
/// This method is only called once per request. If this method is invoked and requests a retry,
/// and the subsequent retry fails due to 403 Forbidden or 401 Unauthorized, this is considered
/// a permanent failure.
/// note:
/// This method will be called on an arbitrary background thread.
/// note:
/// Special care must be taken when implementing this method. Multiple tasks may be
/// created with the same authorization headers in parallel and may all fail even after you’ve
/// refreshed your authorization information (e.g. with OAuth2). You can use
/// <code>opaqueToken(for:)</code> in order to keep track of whether a given request was created with old
/// authorization information or whether you need to refresh your authorization information.
/// important:
/// The completion block <em>MUST</em> be called once and only once. Failing to call the
/// completion block will leave the task stuck in the processing state forever. Calling the
/// completion block multiple times may cause bad behavior.
/// note:
/// When the completion block is invoked, if the task is not retried, the task’s own
/// completion block may run synchronously on the current queue.
/// \param response The <code>HTTPURLResponse</code> that was received.
///
/// \param body The body that was received.
///
/// \param task The <code>HTTPManagerTask</code> that received the response.
///
/// \param token The opaque token returned from <code>opaqueToken(for:)</code>, otherwise <code>nil</code>.
///
/// \param completion A completion block that must be called when the <code>HTTPAuth</code> object
/// has finished handling the response. This block may be called synchronously, or it may be
/// called from any thread.
///
- (void)handleForbiddenResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
/// Returns the localized description for an unauthorized error.
/// \param error The unauthorized error. This will always be an instance of
/// <code>HTTPManagerError.unauthorized</code>.
///
///
/// returns:
/// The string to use for the localized description, or <code>nil</code> to use the default
/// description.
- (NSString * _Nullable)localizedDescriptionForError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLCredential;

/// An <code>HTTPAuth</code> implementation that provides basic auth.
SWIFT_CLASS("_TtC6PMHTTP13HTTPBasicAuth")
@interface HTTPBasicAuth : NSObject <HTTPAuth>
/// The <code>URLCredential</code> that the <code>HTTPBasicAuth</code> was initialized with.
/// This is guaranteed to be a password-based credential.
@property (nonatomic, readonly, strong) NSURLCredential * _Nonnull credential;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Returns a new instance of <code>HTTPBasicAuth</code> from a given password-based credential.
/// \param credential A <code>URLCredential</code>. This must be a password-based credential.
///
///
/// returns:
/// An <code>HTTPBasicAuth</code> instance, or <code>nil</code> if <code>credential</code> isn’t a password-based
/// credential.
- (nullable instancetype)initWithCredential:(NSURLCredential * _Nonnull)credential OBJC_DESIGNATED_INITIALIZER;
/// Returns a new instance of <code>HTTPBasicAuth</code> with the given username and password.
/// note:
/// The <code>URLCredential</code> that this creates has a persistence of <code>.none</code>.
/// \param username The username to use.
///
/// \param password The password to use.
///
///
/// returns:
/// An <code>HTTPBasicAuth</code> instance.
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class HTTPManagerEnvironment;
@class NSURLSessionConfiguration;
@class NSURLAuthenticationChallenge;
@class HTTPManagerMetricsCallback;
@class HTTPManagerRetryBehavior;
@class HTTPMockManager;

/// Manages access to a REST API.
/// This class is thread-safe. Requests may be created and used from any thread.
/// <code>HTTPManagerRequest</code>s support concurrent reading from multiple threads, but it is not safe to mutate
/// a request while concurrently accessing it from another thread. <code>HTTPManagerTask</code>s are safe to access
/// from any thread.
SWIFT_CLASS("_TtC6PMHTTP11HTTPManager")
@interface HTTPManager : NSObject
/// A block that is invoked whenever the number of outstanding <code>HTTPManagerTask</code>s changes.
/// If the value of this property changes while there are outstanding tasks, the old
/// value is not invoked, but the new value will be invoked asynchronously with the current
/// number of tasks. If there are no outstanding tasks the new value will not be invoked.
/// note:
/// This block is always invoked on the main thread.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable networkActivityHandler)(NSInteger);)
+ (void (^ _Nullable)(NSInteger))networkActivityHandler SWIFT_WARN_UNUSED_RESULT;
+ (void)setNetworkActivityHandler:(void (^ _Nullable)(NSInteger))newValue;
/// The current environment. The default value is <code>nil</code>.
/// Changes to this property affects any newly-created requests but do not
/// affect any existing requests or any tasks that are in-progress.
/// Changing this property also resets the default auth if the new value differs from the old
/// one. Setting this property to the existing value has no effect.
/// important:
/// If <code>environment</code> is <code>nil</code>, requests created with relative paths will fail,
/// but requests created with absolute URLs will continue to work. See <code>HTTPManagerConfigurable</code>
/// for how to configure the shared <code>HTTPManager</code> prior to first use.
/// seealso:
/// <code>resetSession()</code>, <code>HTTPManagerConfigurable</code>, <code>defaultAuth</code>,
/// <code>defaultServerRequiresContentLength</code>.
@property (nonatomic, strong) HTTPManagerEnvironment * _Nullable environment;
/// The URL session configuration.
/// Changing mutable values within the configuration object has no effect on the
/// HTTP manager, but you can reassign this property with the modified
/// configuration object.
/// Changing this property affects all newly-created tasks but does not cancel
/// any tasks that are in-flight. You can use <code>resetSession()</code> if you need to
/// cancel any in-flight tasks.
/// seealso:
/// <code>resetSession()</code>
@property (nonatomic, strong) NSURLSessionConfiguration * _Nonnull sessionConfiguration;
/// The authentication handler for session-level authentication challenges.
/// This handler is invoked for all session-level authentication challenges. At the time of this
/// writing, these challenges are <code>NSURLAuthenticationMethodNTLM</code>,
/// <code>NSURLAuthenticationMethodNegotiate</code>, <code>NSURLAuthenticationMethodClientCertificate</code>, and
/// <code>NSURLAuthenticationMethodServerTrust</code>.
/// The default value of <code>nil</code> means to use the system-provided default behavior.
/// This property is typically used to implement SSL Pinning using something like
/// <a href="https://github.com/datatheorem/TrustKit">TrustKit</a>.
/// important:
/// This handler must invoke its completion handler.
/// seealso:
/// <code>URLSessionDelegate.urlSession(_:didReceive:completionHandler:)</code>.
/// \param httpManager The <code>HTTPManager</code> that the session belongs to.
///
/// \param challenge the <code>URLAuthenticationChallenge</code> that contains the request for
/// authentication.
///
/// \param completionHandler A completion block that must be invoked with the results.
///
@property (nonatomic, copy) void (^ _Nullable sessionLevelAuthenticationHandler)(HTTPManager * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));
/// The callback that will be invoked whenever task metrics are collected.
/// This callback is invoked every time the underlying <code>URLSession</code> collects task metrics for a
/// task. This means if the task is automatically retried, metrics may be collected multiple
/// times.
/// note:
/// As task metric collection is not free, task metrics are only collected for tasks
/// when the <code>metricsCallback</code> was non-<code>nil</code> prior to the task being created. Furthermore,
/// assigning the <code>metricsCallback</code> to <code>nil</code> disables task metric reporting for all
/// outstanding tasks, even if the <code>metricsCallback</code> is subsequently assigned to a non-<code>nil</code>
/// value again before the outstanding task completes.
/// note:
/// The callback will be scheduled on the configured operation queue immediately from
/// within the <code>URLSession</code> delegate method. This means that if the same serial operation
/// queue is used both for the metrics callback and as the completion queue for the task
/// itself, the metrics will be collected before the task’s completion block is executed.
/// note:
/// Changing or clearing this property after a task has finished but before it has
/// executed the metrics callback won’t prevent the old callback from executing, even if this
/// property is cleared from the same operation queue that the callback is scheduled on.
@property (nonatomic, strong) HTTPManagerMetricsCallback * _Nullable metricsCallback SWIFT_AVAILABILITY(watchos,introduced=3) SWIFT_AVAILABILITY(tvos,introduced=10) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10);
/// The auth to use for HTTP requests. The default value is <code>nil</code>.
/// Individual requests may override this auth with their own auth.
/// Changes to this property affect any newly-created requests but do not affect any existing
/// requests or any tasks that are in-progress.
/// note:
/// This auth is only used for HTTP requests that are located within the current
/// environment’s base URL. If a request is created with an absolute path or absolute URL, and
/// the resulting URL does not represent a resource found within the environment’s base URL,
/// the request will not be assigned the default auth.
/// seealso:
/// <code>environment</code>, <code>HTTPBasicAuth</code>, <code>HTTPManagerRequest.auth</code>.
@property (nonatomic, strong) id <HTTPAuth> _Nullable defaultAuth;
/// The default retry behavior to use for requests. The default value is <code>nil</code>.
/// Individual requests may override this behavior with their own behavior.
/// Changes to this property affect any newly-created requests but do not affect
/// any existing requests or any tasks that are in-progress.
/// seealso:
/// <code>HTTPManagerRequest.retryBehavior</code>.
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable defaultRetryBehavior;
/// Whether errors should be assumed to be JSON. The default value is <code>false</code>.
/// If <code>true</code>, all error bodies are parsed as JSON regardless of their declared
/// Content-Type. This setting is intended to work around bad servers that
/// don’t declare their Content-Types properly.
/// Changes to this property affect any newly-created requests but do not affect
/// any existing requests or any tasks that are in-progress.
/// seealso:
/// <code>HTTPManagerRequest.assumeErrorsAreJSON</code>.
@property (nonatomic) BOOL defaultAssumeErrorsAreJSON;
/// If <code>true</code>, assume the server requires the <code>Content-Length</code> header for uploads. The default
/// value is <code>false</code>.
/// Setting this to <code>true</code> forces JSON and multipart/mixed uploads to be encoded synchronously
/// when the request is performed rather than happening in the background.
/// note:
/// This property is only used for HTTP requests that are located within the current
/// environment’s base URL. If a request is created with an absolute path or absolute URL, and
/// the resulting URL does not represent a resource found within the environment’s base URL,
/// the request will not be assigned this value.
/// Changes to this property affect any newly-created requests but do not affect any existing
/// requests or any tasks that are in-progress.
/// seealso:
/// <code>environment</code>, <code>HTTPManagerRequest.serverRequiresContentLength</code>.
@property (nonatomic) BOOL defaultServerRequiresContentLength;
/// The user agent that’s passed to every request.
@property (nonatomic, readonly, copy) NSString * _Nonnull userAgent;
/// An <code>HTTPMockManager</code> that can be used to define mocks for this <code>HTTPManager</code>.
@property (nonatomic, readonly, strong) HTTPMockManager * _Nonnull mockManager;
/// Invalidates all in-flight network operations and resets the URL session.
/// note:
/// Any tasks that have finished their network portion and are processing
/// the results are not canceled.
- (void)resetSession;
/// Creates and returns a new <code>HTTPManager</code>.
/// The returned <code>HTTPManager</code> needs its <code>environment</code> set, but is otherwise ready
/// for use.
/// important:
/// Unlike the global <code>HTTP</code> property, calling this initializer does
/// not go through <code>HTTPManagerConfigurable</code>. The calling code must configure
/// the returned <code>HTTPManager</code> instance as appropriate.
/// seealso:
/// <code>HTTP</code>.
- (nonnull instancetype)init;
@end






@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable defaultCredential SWIFT_DEPRECATED_MSG("use 'defaultAuth' with HTTPBasicAuth");
@end

@class NSURLResponse;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// Parses the <code>Date</code> header from a URL response and returns it.
/// \param response A <code>URLResponse</code> that the header is pulled from. If this
/// is not an <code>HTTPURLResponse</code>, <code>nil</code> is returned.
///
///
/// returns:
/// An <code>NSDate</code>, or <code>nil</code> if the header doesn’t exist or has an invalid format.
+ (NSDate * _Nullable)parsedDateHeaderFromResponse:(NSURLResponse * _Nonnull)response SWIFT_WARN_UNUSED_RESULT;
/// Parses a header value that is formatted like the “Date” HTTP header.
/// This parses the specific format allowed for the “Date” header, and any
/// other header that uses the <code>HTTP-date</code> production.
/// See <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">section 3.3.1 of RFC 2616</a> for details.
/// \param dateString The string value of the HTTP header.
///
///
/// returns:
/// An <code>NSDate</code>, or <code>nil</code> if <code>dateString</code> contains an invalid format.
+ (NSDate * _Nullable)parsedDateHeaderFromString:(NSString * _Nonnull)dateString SWIFT_WARN_UNUSED_RESULT;
@end

@class HTTPManagerDataRequest;
@class HTTPManagerActionRequest;
@class HTTPManagerUploadFormRequest;
@class HTTPManagerUploadDataRequest;
@class HTTPManagerUploadJSONRequest;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// The default <code>HTTPManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HTTPManager * _Nonnull defaultManager;)
+ (HTTPManager * _Nonnull)defaultManager SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull defaultHeaderFields;
/// Adds an HTTP header to the list of default header fields.
/// If a value was previously set for the specified <em>field</em>, the supplied <em>value</em> is appended
/// to the existing value using the appropriate field delimiter.
/// \param value The value for the header field.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)addValue:(NSString * _Nonnull)value forDefaultHeaderField:(NSString * _Nonnull)field;
/// Sets a specified default HTTP header field.
/// \param value The value for the header field. If <code>nil</code> the header is deleted.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)setValue:(NSString * _Nullable)value forDefaultHeaderField:(NSString * _Nonnull)field;
/// Returns a specified default HTTP header field, if set.
/// \param field The name of the header field. Header fields are case-insensitive.
///
///
/// returns:
/// The value for the header field, or <code>nil</code> if no value was set.
- (NSString * _Nullable)valueForDefaultHeaderField:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPOSTWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPUTWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>NSURL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param path The path for the request, interpreted relative to the environment. May be
/// an absolute URL.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot be parsed by
/// <code>NSURL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// note:
/// The request’s <code>contentType</code> will default to <code>"application/octet-stream"</code>.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>NSURL</code> or <code>json</code> is not a JSON-compatible object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param json The JSON-compatible object to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadJSONRequest</code>, or <code>nil</code> if <code>json</code> is not a JSON-compatible
/// object.
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPATCHWithURL:(NSURL * _Nonnull)url json:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>, or <code>nil</code> if the <code>path</code>  cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a GET request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerDataRequest</code>.
- (HTTPManagerDataRequest * _Nonnull)requestForGETWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a DELETE request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the query
/// string.
///
///
/// returns:
/// An <code>HTTPManagerActionRequest</code>.
- (HTTPManagerActionRequest * _Nonnull)requestForDELETEWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a POST request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPOSTWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PUT request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPUTWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>, or <code>nil</code> if the <code>path</code> cannot be
/// parsed by <code>URL</code>.
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param path The path for the request, interpreted relative to the
/// environment. May be an absolute URL.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>, or <code>nil</code> if the <code>path</code> cannot
/// be parsed by <code>URL</code>.
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>. Default is <code>[:]</code>.
/// For every value in the dictionary, if it’s a <code>Dictionary</code>, <code>Array</code>, or <code>Set</code>, it will be
/// recursively expanded. If it’s a <code>URLQueryItem</code> it will expand similarly to a dictionary of
/// one element. All other values will use their string representation. For dictionaries and
/// query items, the recursive expansion will produce keys of the form <code>"foo[bar]"</code>. For
/// arrays and sets, the recursive expansion will just repeat the key. If you wish to use the
/// <code>"foo[]"</code> key syntax, then you can use <code>"foo[]"</code> as the key.
/// <em>Note</em> If a dictionary entry or nested <code>URLQueryItem</code> has a key of the form <code>"foo[]"</code>,
/// the trailing <code>"[]"</code> will be moved outside of the enclosing <code>"dict[key]"</code> brackets. For
/// example, if the parameters are <code>["foo": ["bar[]": [1,2,3]]]</code>, the resulting query string
/// will be <code>"foo[bar][]=1&foo[bar][]=2&foo[bar][]=3"</code>.
/// <em>Important</em>: For dictionary and set expansion, the order of the values is
/// implementation-defined. If the ordering is important, you must expand it yourself.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param parameters The request parameters, passed in the body as
/// <code>application/x-www-form-urlencoded</code>.
///
///
/// returns:
/// An <code>HTTPManagerUploadFormRequest</code>.
- (HTTPManagerUploadFormRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Creates a PATCH request.
/// \param url The URL for the request. If relative, it’s interpreted relative to the
/// environment.
///
/// \param contentType The MIME type of the data. Defaults to <code>"application/octet-stream"</code>.
///
/// \param data The data to upload as the body of the request.
///
///
/// returns:
/// An <code>HTTPManagerUploadDataRequest</code>.
- (HTTPManagerUploadDataRequest * _Nonnull)requestForPATCHWithURL:(NSURL * _Nonnull)url contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end


/// An HTTP request.
/// <em>Thread safety:</em>
/// This class can be safely read from concurrent threads, but any modifications require exclusive access.
SWIFT_CLASS("_TtC6PMHTTP18HTTPManagerRequest")
@interface HTTPManagerRequest : NSObject <NSCopying>
/// The URL for the request, including any query items as appropriate.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The Content-Type for the request.
/// If no data is being submitted in the request body, the <code>contentType</code>
/// will be empty.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// The request parameters, or <code>[]</code> if there are no parameters.
/// The parameters are passed by default in the URL query string.
/// Subclasses may override this behavior.
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/// The <code>HTTPAuth</code> value to use for the request. Default is the value of
/// <code>HTTPManager.defaultAuth</code> for requests in the current environment, otherwise <code>nil</code>.
/// seealso:
/// <code>HTTPBasicAuth</code>, <code>HTTPManager.defaultAuth</code>.
@property (nonatomic, strong) id <HTTPAuth> _Nullable auth;
/// The default cache storage policy to use for the response if the response does not
/// include appropriate caching headers. If the response does include appropriate headers
/// such as <code>Cache-Control</code> or <code>Expires</code>, this property is ignored.
/// This property only establishes an upper bound on the cache storage allowed. If the
/// URL session proposes to store the cached response in-memory only and the default policy
/// is set to <code>.allowed</code>, the response will still be stored in-memory only, and if the URL
/// session proposes to not cache the response at all, the response will not be cached.
/// The default value is <code>.allowed</code> for most requests, and <code>.notAllowed</code> for parse requests
/// created from <code>parseAsJSON()</code> or <code>parseAsJSON(with:)</code>.
@property (nonatomic) NSURLCacheStoragePolicy defaultResponseCacheStoragePolicy;
/// <code>true</code> iff redirects should be followed when processing the response.
/// If <code>false</code>, network requests return a successful result containing the redirection
/// response, and parse requests return an error with <code>HTTPManagerError.unexpectedRedirect</code>.
/// Default is <code>true</code>.
@property (nonatomic) BOOL shouldFollowRedirects;
/// Indicates whether the request is allowed to use the cellular radio. Default is <code>true</code>.
/// If the session configuration’s <code>allowsCellularAccess</code> is <code>false</code>, access to the cellular
/// radio is always denied regardless of the request’s <code>allowsCellularAccess</code> property.
@property (nonatomic) BOOL allowsCellularAccess;
/// The main document URL associated with the request.
/// This URL is used for the cookie “same domain as main document” policy.
/// seealso:
/// <code>URLRequest.mainDocumentURL</code>.
@property (nonatomic, copy) NSURL * _Nullable mainDocumentURL;
/// Indicates whether cookies will be sent with and set for this request. Default is <code>true</code>.
@property (nonatomic) BOOL httpShouldHandleCookies;
/// Whether the request represents an action the user is waiting on.
/// Set this to <code>true</code> to increase the priority. Default is <code>false</code>.
@property (nonatomic) BOOL userInitiated;
/// The retry behavior to use for the request. Default is the value of
/// <code>HTTPManager.defaultRetryBehavior</code> for requests in the current environment, otherwise <code>nil</code>.
/// seealso:
/// <code>HTTPManager.defaultRetryBehavior</code>.
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
/// Whether errors should be assumed to be JSON.
/// If <code>true</code>, all error bodies are parsed as JSON regardless of their declared
/// Content-Type. This setting is intended to work around bad servers that
/// don’t declare their Content-Types properly.
/// The default value is provided by <code>HTTPManager.defaultAssumeErrorsAreJSON</code>.
/// seealso:
/// <code>HTTPManager.defaultAssumeErrorsAreJSON</code>.
@property (nonatomic) BOOL assumeErrorsAreJSON;
/// If <code>true</code>, assume the server requires the <code>Content-Length</code> header for uploads. The default
/// value is <code>false</code>.
/// Setting this to <code>true</code> forces JSON and multipart/mixed uploads to be encoded synchronously
/// when the request is performed rather than happening in the background.
/// The default value is provided by <code>HTTPManager.defaultServerRequiresContentLength</code>.
/// seealso:
/// <code>HTTPManager.defaultServerRequiresContentLength</code>.
@property (nonatomic) BOOL serverRequiresContentLength;
/// Whether tasks created from this request should affect the visiblity of the
/// network activity indicator. Default is <code>true</code>.
/// Strictly speaking, this controls whether the task is visible to the network activity
/// handler (if any), and it’s the handler’s job to show the activity indicator.
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
/// Sets properties whose default values depend on the environment.
/// This will set all properties whose default value depends on the environment to the value
/// they would have if the request was located within the environment. For example, this will
/// set the <code>auth</code> property to <code>HTTP.defaultAuth</code>.
/// This is intended for use with requests that are constructed using an absolute path (and
/// therefore are still at the same domain), but want to be treated as though they’re within the
/// environment path.
/// <em>Example:</em>
/// \code
/// HTTP.request(GET: "/foo")
///     .with({ $0.setDefaultEnvironmentalProperties() })
///     .performRequest { task, result in
///         // ....
/// }
///
/// \endcode
- (void)setDefaultEnvironmentalProperties;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An HTTP request that does not yet have a parse handler.
SWIFT_CLASS("_TtC6PMHTTP25HTTPManagerNetworkRequest")
@interface HTTPManagerNetworkRequest : HTTPManagerRequest
/// The request parameters, or <code>[]</code> if there are no parameters.
/// The parameters are passed by default in the URL query string.
/// Subclasses may override this behavior.
@property (nonatomic, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/// Creates and returns a <code>URLRequest</code> object from the properties of <code>self</code>.
/// For upload requests, the request will include the <code>HTTPBody</code> or <code>HTTPBodyStream</code>
/// as appropriate.
@property (nonatomic, readonly, copy) NSURLRequest * _Nonnull preparedURLRequest;
@end


/// An HTTP POST/PUT/PATCH/DELETE request that does not yet have a parse handler.
/// Similar to an <code>HTTPManagerDataRequest</code> except that it handles 204 No Content
/// instead of throwing <code>HTTPManagerError.unexpectedNoContent</code>.
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerActionRequest")
@interface HTTPManagerActionRequest : HTTPManagerNetworkRequest
@end



@class HTTPManagerObjectParseRequest;
@class NSError;

@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as JSON.
/// Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// The parse result is <code>nil</code> if and only if the server responded with
/// 204 No Content.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON.
/// note:
/// The parse result is <code>nil</code> if and only if the server responded with
/// 204 No Content.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler. Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the <code>json</code> argument to the handler is <code>nil</code>, this means the server
/// responded with 204 No Content and the <code>response</code> argument is guaranteed
/// to be an instance of <code>NSHTTPURLResponse</code>.
/// note:
/// If the response is a 204 No Content, the result object
/// will return <code>nil</code> for <code>value</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler.
/// note:
/// If the <code>json</code> argument to the handler is <code>nil</code>, this means the server
/// responded with 204 No Content and the <code>response</code> argument is guaranteed
/// to be an instance of <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the parse result is <code>nil</code>, this means the server responded with 204 No
/// Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImage SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the parse result is <code>nil</code>, this means the server responded with 204 No
/// Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// \param scale The scale to use for the resulting image.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the <code>value</code> argument to the handler is <code>nil</code>, this means the server responded
/// with 204 No Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the <code>value</code> argument to the handler is <code>nil</code>, this means the server responded
/// with 204 No Content and the <code>response</code> argument is guaranteed to be an instance of
/// <code>NSHTTPURLResponse</code>.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param scale The scale to use for the resulting image.
///
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale handler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nullable, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


/// A protocol that provides hooks for configuring the shared <code>HTTPManager</code>.
/// If the application delegate conforms to this protocol, it will be asked to configure the shared <code>HTTPManager</code>.
/// This will occur on first access to the global <code>HTTP</code> property.
SWIFT_PROTOCOL("_TtP6PMHTTP23HTTPManagerConfigurable_")
@protocol HTTPManagerConfigurable
/// Invoked on first access to the global <code>HTTP</code> property.
/// note:
/// You should not create any requests from within this method. Doing so is not
/// supported and will likely result in a misconfigured request.
/// important:
/// You MUST NOT access the global <code>HTTP</code> property from within this method.
/// Any attempt to do so will deadlock as the property has not finished initializing.
- (void)configureWithHttpManager:(HTTPManager * _Nonnull)httpManager;
- (void)configureHTTPManager:(HTTPManager * _Nonnull)httpManager SWIFT_UNAVAILABLE_MSG("'configureHTTPManager' has been renamed to 'configureWithHttpManager:'");
@end


/// An HTTP GET/HEAD request that does not yet have a parse handler.
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerDataRequest")
@interface HTTPManagerDataRequest : HTTPManagerNetworkRequest
@end




@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImage SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// \param scale The scale to use for the resulting image.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as an image and passes it through the
/// specified handler.
/// If the image container has multiple images, only the first one is returned.
/// note:
/// If the server responds with 204 No Content, the parse is skipped and
/// <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main thread, you
/// should use <code>performRequest(withCompletionQueue:completion:)</code> instead.
/// warning:
/// If the request is canceled, the results of the handler may be discarded. Any
/// side-effects performed by your handler must be safe in the event of a cancelation.
/// warning:
/// The parse request inherits the <code>isIdempotent</code> value of <code>self</code>. If the parse
/// handler has side effects and can throw, you should either ensure that it’s safe to run
/// the parse handler again or set <code>isIdempotent</code> to <code>false</code>.
/// \param scale The scale to use for the resulting image.
///
/// \param handler The handler to call as part of the request processing. This handler
/// is not guaranteed to be called on any particular thread. The handler returns the new
/// value for the request.
///
///
/// returns:
/// An <code>HTTPManagerParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsImageWithScale:(CGFloat)scale handler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, UIImage * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
/// The cache policy to use for the request. If <code>NSURLRequestUseProtocolCachePolicy</code>,
/// the default cache policy is used. Default is <code>NSURLRequestUseProtocolCachePolicy</code>.
@property (nonatomic) NSURLRequestCachePolicy cachePolicy;
/// Returns a new request that parses the data as JSON.
/// Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler. Any nulls in the JSON are represented as <code>NSNull</code>.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that parses the data as JSON and passes it through
/// the specified handler.
/// note:
/// If the server responds with 204 No Content, the parse is skipped
/// and <code>HTTPManagerError.unexpectedNoContent</code> is returned as the parse result.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param omitNulls If <code>true</code>, nulls in the JSON are omitted from the result.
/// If <code>false</code>, nulls are represented as <code>NSNull</code>. If the top-level value is null,
/// it is always represented as <code>NSNull</code> regardless of this parameter.
///
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
@end


/// The environment for an <code>HTTPManager</code>.
/// This class does not define any default environments. You can extend this class in your application
/// to add environment definitions for convenient access. For example:
/// \code
/// extension HTTPManagerEnvironment {
///     /// The Production environment.
///     @nonobjc static let Production = HTTPManagerEnvironment(baseURL: URL(string: "https://example.com/api/v1")!)!
///     /// The Staging environment.
///     @nonobjc static let Staging = HTTPManagerEnvironment(baseURL: URL(string: "https://stage.example.com/api/v1")!)!
/// }
///
/// \endcodeYou can also use <code>HTTPManagerConfigurable</code> to configure the initial environment on the shared <code>HTTPManager</code>.
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerEnvironment")
@interface HTTPManagerEnvironment : NSObject
/// The base URL for the environment.
/// invariant:
/// The URL is an absolute URL that is valid according to RFC 3986, the URL’s path
/// is either empty or has a trailing slash, and the URL has no query or fragment component.
@property (nonatomic, readonly, copy) NSURL * _Nonnull baseURL;
/// Initializes an environment with a base URL.
/// note:
/// If <code>baseURL</code> has a non-empty <code>path</code> that does not end in a slash, the path is modified to
/// include a trailing slash. If <code>baseURL</code> has a query or fragment component, these components are
/// stripped.
/// \param baseURL The base URL to use for the environment. Must be a valid absolute URL
/// according to RFC 3986.
///
///
/// returns:
/// An <code>HTTPManagerEnvironment</code> if the base URL is a valid absolute URL, <code>nil</code> otherwise.
- (nullable instancetype)initWithBaseURL:(NSURL * _Nonnull)baseURL;
- (nullable instancetype)initWithString:(NSString * _Nonnull)string;
/// Returns <code>true</code> if <code>url</code> is prefixed by <code>self.baseURL</code>, <code>false</code> otherwise.
/// For one URL to prefix another, both URLs must have the same scheme, authority info,
/// host, and port, and the first URL’s path must be a prefix of the second URL’s path.
/// Scheme and host are compared case-insensitively, and if the port is nil, an appropriate
/// default value is assumed for the HTTP and HTTPS schemes.
/// \param url The URL to compare against. Must be a valid absolute URL according to RFC 3986,
/// otherwise this method always returns <code>false</code>.
///
- (BOOL)isPrefixOf:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM_NAMED(NSInteger, PMHTTPImageError, "HTTPManagerImageError", closed) {
/// The image returned by the server could not be decoded.
  PMHTTPImageErrorCannotDecode = 0,
};
static NSString * _Nonnull const PMHTTPImageErrorDomain = @"PMHTTP.HTTPManagerImageError";

@class NSOperationQueue;
@class NSURLSessionTask;
@class NSURLSessionTaskMetrics;

/// An object that encapsultes a callback for task metrics and the queue to invoke it on.
SWIFT_CLASS("_TtC6PMHTTP26HTTPManagerMetricsCallback") SWIFT_AVAILABILITY(watchos,introduced=3) SWIFT_AVAILABILITY(tvos,introduced=10) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10)
@interface HTTPManagerMetricsCallback : NSObject
/// The operation queue that the callback will be invoked on.
/// If <code>nil</code>, the callback will be invoked on a global background queue with the <code>.utility</code> QoS.
@property (nonatomic, readonly, strong) NSOperationQueue * _Nullable queue;
/// The callback that will be invoked with task metrics.
/// \param task The task for which metrics were collected.
///
/// \param urlTask The underlying network task for which metrics were collected.
/// This may be different than <code>task.networkTask</code> if the task is configured with
/// automatic retry behavior.
///
/// \param metrics The task metrics that were collected.
///
@property (nonatomic, readonly, copy) void (^ _Nonnull handler)(HTTPManagerTask * _Nonnull, NSURLSessionTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull);
/// The callback that will be invoked with task metrics.
/// \param task The task for which metrics were collected.
///
/// \param metrics The task metrics that were collected.
///
@property (nonatomic, readonly, copy) void (^ _Nonnull callback)(HTTPManagerTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull) SWIFT_DEPRECATED_MSG("Use .handler instead");
/// Returns a new <code>HTTPManagerMetricsCallback</code> object.
/// \param queue The operation queue that the callback will be invoked on. If <code>nil</code>, the
/// callback will be invoked on a global background queue with the <code>.utility</code> QoS.
///
/// \param handler The callback that will be invoked with task metrics.
///
/// \param task The task for which metrics were collected.
///
/// \param urlTask The underlying network task for which metrics were collected.
/// This may be different than <code>task.networkTask</code> if the task is configured with
/// automatic retry behavior.
///
/// \param metrics The task metrics that were collected.
///
- (nonnull instancetype)initWithQueue:(NSOperationQueue * _Nullable)queue handler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSURLSessionTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>HTTPManagerMetricsCallback</code> object.
/// \param queue The operation queue that the callback will be invoked on. If <code>nil</code>, the
/// callback will be invoked on a global background queue with the <code>.utility</code> QoS.
///
/// \param callback The callback that will be invoked with task metrics.
///
/// \param task The task for which metrics were collected.
///
/// \param metrics The task metrics that were collected.
///
- (nonnull instancetype)initWithQueue:(NSOperationQueue * _Nullable)queue callback:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSURLSessionTaskMetrics * _Nonnull))callback SWIFT_DEPRECATED_MSG("Use init(queue:handler:) instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that returns a mock response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
/// Retursn a new request that returns a mock plain text response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock plain text response.
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
@end



@class PMHTTPDataResult;

@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that parses the data with the specified handler.
/// note:
/// If the server responds with 204 No Content, the parse handler is
/// invoked with an empty data. The handler may choose to return the error
/// <code>HTTPManagerError.unexpectedNoContent</code> if it does not handle this case.
/// note:
/// If you need to parse on a particular thread, such as on the main
/// thread, you should just use <code>-performRequestWithCompletionQueue:completion:</code>
/// instead.
/// note:
/// If the request is canceled, the results of the handler may be
/// discarded. Any side-effects performed by your handler must be safe in
/// the event of a cancelation.
/// \param handler The handler to call as part of the request
/// processing. This handler is not guaranteed to be called on any
/// particular thread. The handler returns the new value for the request.
/// If the handler returns <code>nil</code>, then if <code>error</code> is filled in with an
/// error the parse is considered to have errored, otherwise the parse is
/// treated as successful but with a <code>nil</code> value.
///
///
/// returns:
/// An <code>HTTPManagerObjectParseRequest</code>.
- (HTTPManagerObjectParseRequest * _Nonnull)parseWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, NSData * _Nonnull, NSError * _Nullable * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>-resume</code> method.
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>resume()</code> method.
/// \param queue The queue to call the handler on. <code>nil</code> means the handler will
/// be called on a global concurrent queue.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param completion The handler to call when the request is done. This
/// handler is called on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param queue The queue to call the handler on. May be <code>nil</code>.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
@end

@class PMHTTPResult;

/// An HTTP request that has a parse handler.
/// note:
/// This class is only meant to be used from Obj-C.
SWIFT_CLASS("_TtC6PMHTTP29HTTPManagerObjectParseRequest")
@interface HTTPManagerObjectParseRequest : HTTPManagerRequest
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
@property (nonatomic, strong) id <HTTPAuth> _Nullable auth;
@property (nonatomic) BOOL shouldFollowRedirects;
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@property (nonatomic) BOOL allowsCellularAccess;
@property (nonatomic, copy) NSURL * _Nullable mainDocumentURL;
@property (nonatomic) BOOL httpShouldHandleCookies;
@property (nonatomic) BOOL userInitiated;
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
@property (nonatomic) BOOL assumeErrorsAreJSON;
@property (nonatomic) BOOL serverRequiresContentLength;
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
/// The expected MIME type of the response. Defaults to <code>["application/json"]</code>
/// for JSON parse requests, or <code>[]</code> for requests created with <code>-parseWithHandler:</code>.
/// This property is used to generate the <code>Accept</code> header, if not otherwise specified by
/// the request. If multiple values are provided, they’re treated as a priority list
/// for the purposes of the <code>Accept</code> header.
/// This property is also used to validate the MIME type of the response. If the
/// response is a 204 No Content, the MIME type is not checked. For all other 2xx
/// responses, if at least one expected content type is provided, the MIME type
/// must match one of them. If it doesn’t match any, the parse handler will be
/// skipped and <code>HTTPManagerError.unexpectedContentType</code> will be returned as the result.
/// note:
/// The MIME type is only tested if the response includes a <code>Content-Type</code> header.
/// If the <code>Content-Type</code> header is missing, the response will always be assumed to be
/// valid. The value is tested against both the <code>Content-Type</code> header and, if it differs,
/// the <code>NSURLResponse</code> property <code>MIMEType</code>. This is to account for cases where the
/// protocol implementation detects a different content type than the server declared.
/// Each media type in the list may include parameters. These parameters will be included
/// in the <code>Accept</code> header, but will be ignored for the purposes of comparing against the
/// resulting MIME type. If the media type includes a parameter named <code>q</code>, this parameter
/// should be last, as it will be interpreted by the <code>Accept</code> header as the priority
/// instead of as a parameter of the media type.
/// note:
/// Changing the <code>expectedContentTypes</code> does not affect the behavior of the parse
/// handler. If you create a request using <code>-parseAsJSON</code> and then change the
/// <code>expectedContentTypes</code> to <code>["text/plain"]</code>, if the server returns a <code>"text/plain"</code>
/// response, the parse handler will still assume it’s JSON and attempt to decode it.
/// important:
/// The media types in this list will not be checked for validity. They must
/// follow the rules for well-formed media types, otherwise the server may handle the
/// request incorrectly.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull expectedContentTypes;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>-resume</code> method.
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a suspended <code>HTTPManagerTask</code> for the request with the given completion handler.
/// This method is intended for cases where you need access to the <code>NSURLSessionTask</code> prior to
/// the task executing, e.g. if you need to record the task identifier somewhere before the
/// completion block fires.
/// important:
/// After you create the task, you must start it by calling the <code>resume()</code> method.
/// \param queue The queue to call the handler on. <code>nil</code> means the handler will
/// be called on a global concurrent queue.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param completion The handler to call when the request is done. This
/// handler is called on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
/// Performs an asynchronous request and calls the specified handler when
/// done.
/// \param queue The queue to call the handler on. May be <code>nil</code>.
///
/// \param completion The handler to call when the request is done. This handler
/// will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.
///
///
/// returns:
/// An <code>HTTPManagerTask</code> that represents the operation.
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
/// Returns a new request that returns a mock response.
/// Requests with a mock response will not hit the network and will not invoke the
/// parse handler.
/// Any network mock inherited from an <code>HTTPManagerNetworkRequest</code> will be overwritten
/// by this method.
/// seealso:
/// <code>mock(headers:value:delay:)</code>.
/// \param value The parsed value to return.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (HTTPManagerObjectParseRequest * _Nonnull)mock:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Returns a new request that returns a mock response.
/// Requests with a mock response will not hit the network and will not invoke the
/// parse handler.
/// Any network mock inherited from an <code>HTTPManagerNetworkRequest</code> will be overwritten
/// by this method.
/// \param headers A collection of HTTP headers to return.
///
/// \param value The parsed object to return.
///
/// \param delay The amount of time in seconds to wait before returning the
/// response.
///
///
/// returns:
/// A copy of <code>self</code> that returns a mock response.
- (HTTPManagerObjectParseRequest * _Nonnull)mockWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers value:(id _Nullable)value delay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' with HTTPBasicAuth");
@end





@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' with HTTPBasicAuth");
@end

@class NSNumber;

@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
/// The request method.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestMethod;
/// <code>true</code> if the request is idempotent, otherwise <code>false</code>. A request is idempotent if
/// the side-effects of N > 0 identical requests is the same as for a single request,
/// or in other words, the request can be repeated without changing anything.
/// note:
/// A sequence of several idempotent requests may not be idempotent as a whole.
/// This could be because a later request in the sequence changes something that
/// affects an earlier request.
/// This property normally only affects retry behavior for failed requests, although
/// it could be used for external functionality such as showing a Retry button in an
/// error dialog. The value of this property is exposed on <code>HTTPManagerTask</code> as well.
/// note:
/// When writing external functionality that uses <code>isIdempotent</code> (such as showing
/// a Retry button) it’s generally a good idea to only repeat requests that failed.
/// It should be safe to repeat successful idempotent network requests, but parse requests
/// may have parse handlers with side-effects. If you care about idempotence for successful
/// or canceled requests, you should ensure that all parse handlers are idempotent or
/// mark any relevant parse requests as non-idempotent.
/// The default value is <code>true</code> for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests,
/// and <code>false</code> for POST, PATCH, CONNECT, or unknown request methods.
@property (nonatomic, getter=isIdempotent) BOOL idempotent;
/// The timeout interval of the request, in seconds. If <code>nil</code>, the session’s default
/// timeout interval is used. Default is <code>nil</code>.
@property (nonatomic, strong) NSNumber * _Nullable timeoutInterval;
/// The cache policy to use for the request. If <code>NSURLRequestUseProtocolCachePolicy</code>,
/// the default cache policy is used. Default is <code>NSURLRequestUseProtocolCachePolicy</code>
/// for GET/HEAD requests and <code>NSURLRequestReloadIgnoringLocalCacheData</code> for
/// POST/PUT/PATCH/DELETE requests.
@property (nonatomic, readonly) NSURLRequestCachePolicy cachePolicy;
/// Additional HTTP header fields to pass in the request. Default is the value of
/// <code>HTTPManager.defaultHeaderFields</code> for requests in the current environment, otherwise <code>@{}</code>.
/// If not specified, the request will fill in <code>Accept</code> and <code>Accept-Language</code>
/// automatically when performing the request.
/// note:
/// If <code>self.credential</code> is non-<code>nil</code>, the <code>Authorization</code> header will be
/// ignored. <code>Content-Type</code> and <code>Content-Length</code> are always ignored.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headerFields;
/// Adds an HTTP header to the list of header fields.
/// If a value was previously set for the specified <em>field</em>, the supplied <em>value</em> is appended
/// to the existing value using the appropriate field delimiter.
/// \param value The value for the header field.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)addValue:(NSString * _Nonnull)value forHeaderField:(NSString * _Nonnull)field;
/// Sets a specified HTTP header field.
/// \param value The value for the header field. If <code>nil</code> the header is deleted.
///
/// \param field The name of the header field. Header fields are case-insensitive.
///
- (void)setValue:(NSString * _Nullable)value forHeaderField:(NSString * _Nonnull)field;
/// Returns a specified HTTP header field, if set.
/// \param field The name of the header field. Header fields are case-insensitive.
///
///
/// returns:
/// The value for the header field, or <code>nil</code> if no value was set.
- (NSString * _Nullable)valueForHeaderField:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents the retry behavior for an HTTP request.
/// Retry behaviors provide a mechanism for requests to automatically retry upon failure before
/// notifying the caller about the failure. Any arbitrary retry behavior can be implemented, but
/// convenience methods are provided for some of the more common behaviors.
/// Unless otherwise specified, retry behaviors are only evaluated for idempotent requests.
/// This is controlled by the <code>isIdempotent</code> property of <code>HTTPManagerRequest</code>, which defaults to
/// <code>true</code> for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests, and <code>false</code> otherwise.
/// note:
/// Retry behaviors are evaluated on an arbitrary dispatch queue.
/// note:
/// If a task is retried after an authentication failure through the use of an <code>HTTPAuth</code>
/// object, the attempt count for <code>HTTPManagerRetryBehavior</code> is reset to zero.
/// note:
/// If the request fails due to a 401 Unauthorized, and the request’s <code>auth</code> property was
/// set, the <code>HTTPManagerRetryBehavior</code> is not consulted. When the <code>auth</code> property is set, the
/// only way to retry a 401 Unauthorized is via the <code>HTTPAuth</code> object.
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerRetryBehavior")
@interface HTTPManagerRetryBehavior : NSObject
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated only for idempotent requests. If the request involves
/// redirections, the original request will be evaluated for idempotence (and in the event of a retry,
/// the original request is the one that is retried).
/// note:
/// The block will be executed on an arbitrary dispatch queue.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)init:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated for all requests regardless of whether the request
/// is idempotent. If the request involves redirections, the original request is the one that is retried.
/// important:
/// Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
/// and only retry those requests where performing the request twice is safe. Your handler shold consult
/// the <code>originalRequest</code> property of the task for making this determination.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)initWithIgnoringIdempotence:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
/// Returns a retry behavior that evaluates an array of behaviors until one of them succeeds.
/// The returned behavior will evaluate the first behavior in the array. If that invokes the
/// callback with <code>false</code> it will evaluate the second, and so on until some behavior has invoked
/// the callback with <code>true</code> or all behaviors have been exhausted.
/// \param retryBehaviors The array of retry behaviors to try in turn.
///
- (nonnull instancetype)initWithAnyRetryBehavior:(NSArray<HTTPManagerRetryBehavior *> * _Nonnull)retryBehaviors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTTPManagerRetryBehavior (SWIFT_EXTENSION(PMHTTP))
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated only for idempotent requests. If the request involves
/// redirections, the original request will be evaluated for idempotence (and in the event of a retry,
/// the original request is the one that is retried).
/// note:
/// The block will be executed on an arbitrary dispatch queue.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)retryBehaviorWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler SWIFT_METHOD_FAMILY(init);
/// Returns a retry behavior that evaluates a block.
/// The returned retry behavior will be evaluated for all requests regardless of whether the request
/// is idempotent. If the request involves redirections, the original request is the one that is retried.
/// important:
/// Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
/// and only retry those requests where performing the request twice is safe. Your handler shold consult
/// the <code>originalRequest</code> property of the task for making this determination.
/// The block takes the following parameters:
/// \param task The <code>HTTPManagerTask</code> under consideration. You can use this task
/// to retrieve the last <code>networkTask</code> and its <code>originalRequest</code> and <code>response</code>.
///
/// \param error The error that occurred. This may be an error from the networking portion
/// or it may be an error from the processing stage.
///
/// \param attempt The number of retries so far. The first retry block is attempt <code>0</code>, the second is
/// attempt <code>1</code>, etc.
///
/// \param callback A block that must be invoked to determine whether a retry should be done.
/// Passing <code>true</code> means the request should be automatically retried, <code>false</code> means no retry.
/// This block may be executed immediately or it may be saved and executed later on any thread or queue.
/// <em>Important:</em> This block must be executed at some point or the task will be stuck in the
/// <code>.processing</code> state forever.
/// <em>Requires:</em> This block must not be executed more than once.
///
- (nonnull instancetype)retryBehaviorIgnoringIdempotenceWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler SWIFT_METHOD_FAMILY(init);
/// Returns a retry behavior that retries once automatically for networking errors.
/// A networking error is defined as many errors in the <code>NSURLErrorDomain</code>, or a
/// <code>PMJSON.JSONParserError</code> with a code of <code>.unexpectedEOF</code> (as this may indicate a
/// truncated response). The request will not be retried for networking errors that
/// are unlikely to change when retrying.
/// If the request is non-idempotent, it only retries if the error indicates that a
/// connection was never made to the server (such as cannot find host).
/// \param including503ServiceUnavailable If <code>YES</code>, retries on a 503 Service Unavailable
/// response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
/// as the server did not handle the original request. If <code>NO</code>, only networking failures
/// are retried.
///
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureOnceIncluding503ServiceUnavailable:(BOOL)including503ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
/// Returns a retry behavior that retries twice automatically for networking errors.
/// The first retry happens immediately, and the second retry happens after a given
/// delay.
/// A networking error is defined as many errors in the <code>NSURLErrorDomain</code>, or a
/// <code>PMJSON.JSONParserError</code> with a code of <code>.unexpectedEOF</code> (as this may indicate a
/// truncated response). The request will not be retried for networking errors that
/// are unlikely to change when retrying.
/// If the request is non-idempotent, it only retries if the error indicates that a
/// connection was never made to the server (such as cannot find host).
/// \param delay The amount of time in seconds to wait before the second retry.
///
/// \param including503ServiceUnavailable If <code>YES</code>, retries on a 503 Service Unavailable
/// response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
/// as the server did not handle the original request. If <code>NO</code>, only networking failures
/// are retried.
///
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureTwiceWithDelay:(NSTimeInterval)delay including503ServiceUnavailable:(BOOL)including503ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
@end

enum HTTPManagerTaskState : unsigned char;

/// An initiated HTTP operation.
/// <em>Thread safety:</em> All methods in this class are safe to call from any thread.
SWIFT_CLASS("_TtC6PMHTTP15HTTPManagerTask")
@interface HTTPManagerTask : NSObject
/// The underlying <code>URLSessionTask</code>.
/// If a failed request is automatically retried, this property value
/// will change.
/// note:
/// This property supports key-value observing.
@property (nonatomic, readonly, strong) NSURLSessionTask * _Nonnull networkTask;
/// The <code>HTTPAuth</code> used to authenticate the request, if any.
@property (nonatomic, readonly, strong) id <HTTPAuth> _Nullable auth;
/// The current state of the task.
/// note:
/// This property is thread-safe and may be accessed concurrently.
/// note:
/// This property supports KVO. The KVO notifications will execute
/// on an arbitrary thread.
@property (nonatomic, readonly) enum HTTPManagerTaskState state;
/// The value of the original request’s <code>userInitiated</code> property.
/// If <code>true</code> this means the task executed at a higher priority than it would have if this
/// property were <code>false</code>.
/// This property can be used to make decisions about things such as what dispatch queue to use
/// when implementing custom retry logic.
@property (nonatomic, readonly) BOOL userInitiated;
+ (BOOL)automaticallyNotifiesObserversForKey:(NSString * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
/// Invokes <code>resume()</code> on the underlying <code>URLSessionTask</code>.
/// important:
/// You should always use this method instead of invoking <code>resume()</code>
/// on the <code>networkTask</code>.
/// note:
/// To suspend the underlying task you can access it with the
/// <code>networkTask</code> property. However, suspending the task will not remove it from
/// the list of outstanding tasks used to control the network activity indicator.
- (void)resume;
/// Cancels the operation, if it hasn’t already completed.
/// If the operation is still talking to the network, the underlying network
/// task is canceled. If the operation is processing the results, the
/// results processor is canceled at the earliest opportunity.
/// Calling this on a task that’s already moved to <code>.completed</code> is a no-op.
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, readonly, strong) NSURLCredential * _Nullable credential SWIFT_DEPRECATED_MSG("use 'auth' instead");
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
/// <code>true</code> if the request is idempotent, otherwise <code>false</code>. A request is idempotent if
/// the side-effects of N > 0 identical requests is the same as for a single request,
/// or in other words, the request can be repeated without changing anything.
/// note:
/// A sequence of several idempotent requests may not be idempotent as a whole.
/// This could be because a later request in the sequence changes something that
/// affects an earlier request.
/// This property normally only affects retry behavior for failed requests, although
/// it could be used for external functionality such as showing a Retry button in an
/// error dialog.
@property (nonatomic, readonly, getter=isIdempotent) BOOL idempotent;
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// The state of an <code>HTTPManagerTask</code>.
typedef SWIFT_ENUM(unsigned char, HTTPManagerTaskState, closed) {
/// The task is currently running.
  HTTPManagerTaskStateRunning = 0,
/// The task is processing results (e.g. parsing JSON).
  HTTPManagerTaskStateProcessing = 1,
/// The task has been canceled. The completion handler may or may not
/// have been invoked yet.
  HTTPManagerTaskStateCanceled = 2,
/// The task has completed. The completion handler may or may not have
/// been invoked yet.
  HTTPManagerTaskStateCompleted = 3,
};


/// An HTTP POST/PUT/PATCH request with binary data that does not yet have a parse handler.
/// The body of this request is a given <code>NSData</code> object. Any <code>parameters</code> are passed in the
/// query string.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadDataRequest")
@interface HTTPManagerUploadDataRequest : HTTPManagerActionRequest
/// The data to upload.
@property (nonatomic, copy) NSData * _Nonnull uploadData;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@end

@class HTTPManagerUploadMultipart;

/// An HTTP POST/PUT/PATCH request with form data that does not yet have a parse handler.
/// By default, any request parameters (see <code>HTTPManagerRequest.parameters</code>) are
/// passed as <code>application/x-www-form-urlencoded</code>. Adding any multipart bodies
/// passes everything as <code>multipart/form-data</code> instead. When mixing <em>parameters</em>
/// and multipart bodies, the <em>parameters</em> are sent prior to any multipart bodies.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadFormRequest")
@interface HTTPManagerUploadFormRequest : HTTPManagerActionRequest
/// The URL for the request, including any query items as appropriate.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The Content-Type for the request.
///
/// returns:
/// Either <code>"application/x-www-form-urlencoded"</code> or <code>"multipart/form-data"</code>
/// depending on the nature of the upload.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// Specifies a named multipart body for this request.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> and <code>filename</code> are assumed to be ASCII and not need any escaping.
/// \param data The data for the multipart body, such as an image or text.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
/// \param mimeType The MIME content type of the multipart body. Optional.
///
/// \param filename The filename of the attachment. Optional.
///
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/// Specifies a named multipart body for this request.
/// The Content-Type of the multipart body will always be
/// <code>text/plain; charset=utf-8</code>.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> is assumed to be ASCII and not need any escaping.
/// \param text The text of the multipart body.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
/// Adds a block that’s invoked asynchronously to provide multipart bodies for this request.
/// The block is invoked on an arbitrary thread when task requests a new body stream.
/// Any multipart bodies added by the block will be inserted into the request body.
/// The associated block will only ever be invoked once even if the request is used to create
/// multiple tasks.
/// note:
/// Using this method means that the <code>Content-Length</code> cannot be calculated for this
/// request. When calling APIs that need a defined <code>Content-Length</code> you must provide all
/// of the upload data up-front.
/// seealso:
/// <code>addMultipart(data:withName:mimeType:filename:)</code>,
/// <code>addMultipart(text:withName:)</code>.
/// \param block The block that provides the multipart bodies. This block is
/// invoked on an arbitrary background thread. The <code>HTTPManagerUploadMultipart</code>
/// parameter can be used to add multipart bodies to the request. This object is
/// only valid for the duration of the block’s execution.
///
- (void)addMultipartBodyWithBlock:(void (^ _Nonnull)(HTTPManagerUploadMultipart * _Nonnull))block;
@end






/// An HTTP POST/PUT/PATCH for JSON data that does not yet have a parse handler.
/// The body of this request is a JSON blob. Any <code>parameters</code> are passed in the
/// query string.
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadJSONRequest")
@interface HTTPManagerUploadJSONRequest : HTTPManagerActionRequest
/// The Content-Type for the request.
///
/// returns:
/// <code>"application/json"</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@end


@interface HTTPManagerUploadJSONRequest (SWIFT_EXTENSION(PMHTTP))
/// The JSON data to upload.
/// requires:
/// Values assigned to this property must be json-compatible.
@property (nonatomic) id _Nonnull uploadJSON;
@end


/// Helper class for <code>HTTPManagerUploadFormRequest.addMultipartBody(with:)</code>.
SWIFT_CLASS("_TtC6PMHTTP26HTTPManagerUploadMultipart")
@interface HTTPManagerUploadMultipart : NSObject
/// Specifies a named multipart body for this request.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> and <code>filename</code> are assumed to be ASCII and not need any escaping.
/// \param data The data for the multipart body, such as an image or text.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
/// \param mimeType The MIME content type of the multipart body. Optional.
///
/// \param filename The filename of the attachment. Optional.
///
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/// Specifies a named multipart body for this request.
/// The Content-Type of the multipart body will always be
/// <code>text/plain; charset=utf-8</code>.
/// Calling this method sets the request’s overall Content-Type to
/// <code>multipart/form-data</code>.
/// bug:
/// <code>name</code> is assumed to be ASCII and not need any escaping.
/// \param text The text of the multipart body.
///
/// \param name The name of the multipart body. This is the name the server expects.
///
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@protocol HTTPMockToken;
@class HTTPMockSequence;

/// Manages a set of mocks for the <code>HTTPManager</code>.
/// The mocks associated with this class may match requests based on path (relative to the environment)
/// or absolute URL. If the path or URL contains any path component of the form <code>:name</code>, any (non-empty)
/// component value will match and the matched value will be made available to block-based mocks.
/// For example the path <code>"users/:id"</code> will match a request for <code>"users/1234"</code> but will not match
/// a request for <code>"users"</code>.
/// All mocks are evaluated in reverse order of addition. This means that if two mocks would match the
/// same URL, whichever mock was added last is used.
/// <em>Thread safety:</em> All methods in this class are safe to call from any thread.
SWIFT_CLASS("_TtC6PMHTTP15HTTPMockManager")
@interface HTTPMockManager : NSObject
/// If <code>true</code>, any URL that is part of the current environment but not handled by any mocks
/// will return an error. The default value is <code>false</code>.
/// note:
/// Testing for unmocked intercepted requests should be done with
/// <code>URLResponse.isUnmockedInterceptedRequest</code>.
/// seealso:
/// interceptUnhandledExternalURLs
@property (nonatomic) BOOL interceptUnhandledEnvironmentURLs;
/// If <code>true</code>, any URL that is not part of the current environment but not handled by any mocks
/// will return an error. The default value is <code>false</code>.
/// note:
/// Testing for unmocked intercepted requests should be done with
/// <code>URLResponse.isUnmockedInterceptedRequest</code>.
/// seealso:
/// interceptUnhandledEnvironmentURLs
@property (nonatomic) BOOL interceptUnhandledExternalURLs;
/// Adds a mock to the mock manager that returns a given response.
/// All requests that match this mock will be given the same response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/// Adds a mock to the mock manager that returns a given plain text response.
/// All requests that match this mock will be given the same response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
/// Adds a mock to the mock manager that returns a given sequence of responses.
/// Each request that matches this mock will be given the next response in the sequence.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param sequence an <code>HTTPMockSequence</code> with the sequence of responses to provide.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod sequence:(HTTPMockSequence * _Nonnull)sequence;
/// Adds a mock to the mock manager that evaluates a block to provide the response.
/// \param url The URL to mock. This may be a relative URL, which is evaluated against the
/// environment active at the time the request is made, or it may be an absolute URL. The URL
/// may include path components of the form <code>:name</code> to match any (non-empty) component value.
///
/// \param httpMethod (Optional) The HTTP method to be mocked. The default value of <code>nil</code>
/// means this mock will match any HTTP method.
///
/// \param queue (Optional) A <code>dispatch_queue_t</code> to run the handler on. The default value
/// of <code>nil</code> means to use a private serial queue.
///
/// \param handler A block to execute in order to provide the mock response. The block
/// has arguments <code>request</code>, <code>parameters</code>, and <code>completion</code>. <code>request</code> is the <code>URLRequest</code>
/// that matched the mock. <code>parameters</code> is a dictionary that contains a value for each <code>:name</code>
/// token from the <code>url</code> (note: the key is just <code>"name"</code>, not <code>":name"</code>). <code>completion</code> is a
/// block that must be invoked to provide the response. The <code>completion</code> block may be invoked
/// from any queue, but it is an error to not invoke it at all or to invoke it twice.
///
///
/// returns:
/// An <code>HTTPMockToken</code> object that can be used to unregister the mock later.
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod queue:(dispatch_queue_t _Nullable)queue handler:(void (^ _Nonnull)(NSURLRequest * _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull, void (^ _Nonnull)(NSHTTPURLResponse * _Nonnull, NSData * _Nonnull)))handler;
/// Removes a previously-registered mock from the mock manager.
/// Calling this with a token that was already removed, or with a token from another mock
/// manager, is a no-op.
/// \param token An <code>HTTPMockToken</code> returned by a previous call to <code>addMock</code>.
///
- (void)removeMock:(id <HTTPMockToken> _Nonnull)token;
/// Removes all mocks from the mock manager.
- (void)removeAllMocks;
/// Resets the mock manager back to the defaults.
/// This removes all mocks and resets all properties back to their default values.
- (void)reset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPMockManager (SWIFT_EXTENSION(PMHTTP))
/// A convenience function for reading the body data from a <code>URLRequest</code>.
/// If the request has <code>HTTPBody</code> set, it is returned, otherwise if it has <code>HTTPBodyStream</code>,
/// the stream is read to exhaustion. If the request has no body, an empty <code>NSData</code> is returned.
/// warning:
/// If the request has an <code>HTTPBodyStream</code> but it cannot be opened (e.g. because it
/// has already been read), an empty <code>NSData</code> is returned. Similarly, if the stream takes longer
/// than 400ms to open, an empty <code>NSData</code> is returned.
/// This function is primarily intended to be used from within a handler block passed to
/// <code>addMock(for:httpMethod:queue:handler:)</code>.
- (NSData * _Nonnull)dataFromRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@end




/// Represents a sequence of mock responses that will be returned from successive requests
/// that are handled by the same mock.
/// Responses added to the sequence are returned in the same order. If more requests are made
/// than responses added to the sequence, all subsequence requests will return a generic
/// 500 Internal Server Error response. The property <code>repeatsLastResponse</code> can be used to
/// instead repeat the final response over and over.
/// <em>Thread safety:</em> Instances of this class may not be accessed concurrently from multiple
/// threads at the same time.
SWIFT_CLASS("_TtC6PMHTTP16HTTPMockSequence")
@interface HTTPMockSequence : NSObject
/// If <code>true</code>, the last response in the sequence is repeated for all future requests.
/// Otherwise, once the sequence has been exhausted, future requests will serve up a
/// 500 Internal Server Error response. The default value is <code>false</code>.
@property (nonatomic) BOOL repeatsLastResponse;
/// Adds a mock to the sequence that returns a given response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return.
///
/// \param data (Optional) The body of the response. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the data.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/// Adds a mock to the sequence that returns a given plain text response.
/// \param statusCode The HTTP status code to return.
///
/// \param headers (Optional) A collection of HTTP headers to return. If <code>"Content-Type"</code>
/// is not specified, it will default to <code>"text/plain"</code>.
///
/// \param text The body text to return. If the <code>headers</code> does not provide a
/// <code>"Content-Length"</code> header, one is synthesized from the text.
///
/// \param delay (Optional) The amount of time in seconds to wait before returning the
/// response. The default value is 10ms.
///
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A token that can be used to unregister a mock from an <code>HTTPMockManager</code>.
SWIFT_PROTOCOL("_TtP6PMHTTP13HTTPMockToken_")
@protocol HTTPMockToken
@end

@class NSCachedURLResponse;
@protocol NSURLProtocolClient;

SWIFT_CLASS("_TtC6PMHTTP19HTTPMockURLProtocol")
@interface HTTPMockURLProtocol : NSURLProtocol
+ (BOOL)canInitWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
+ (NSURLRequest * _Nonnull)canonicalRequestForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id <NSURLProtocolClient> _Nullable)client OBJC_DESIGNATED_INITIALIZER;
- (void)startLoading;
- (void)stopLoading;
@end


/// The base class for <code>HTTPAuth</code> implementations that refresh their authentication automatically.
/// This class provides support for refreshing authentication information, e.g. for OAuth2 token
/// refresh. It is recommended that you subclass this class in order to provide your own
/// initializer.
/// note:
/// This class assumes that each instance manages a single authentication realm, and makes
/// no provision for refreshing authentication for multiple realms simultaneously.
SWIFT_CLASS("_TtC6PMHTTP19HTTPRefreshableAuth")
@interface HTTPRefreshableAuth : NSObject <HTTPAuth>
/// Returns a new <code>HTTPRefreshableAuth</code>.
/// \param info A value that is used to calculate authentication headers and refresh
/// authentication information. This parameter may have any type, as long as it’s thread-safe.
///
/// \param authenticationHeadersBlock A block that is used to return the authentication
/// headers for a request. The <code>info</code> parameter is provided to this block.
/// This block may be called from any thread.
///
/// \param authenticationRefreshBlock A block that is invoked in response to a 401
/// Unauthorized response in order to refresh the authentication information. This block will
/// not be invoked multiple times concurrent with each other. Any requests that fail while
/// refreshing will use the results of the outstanding refresh.
/// This block returns an optional <code>HTTPManagerTask</code>. If non-<code>nil</code>, the task will be tracked
/// and will be canceled if the <code>HTTPRefreshableAuth</code> is deinited.
/// This block may be called from any thread.
/// The <code>completion</code> parameter to this block must be invoked with the results of the refresh.
/// The first parameter to this block is the new <code>info</code> value that represents the new
/// authentication information, or <code>nil</code> if there is no new info. The second parameter is a
/// boolean that indicates whether the refresh succeeded. If this parameter is <code>true</code> all
/// pending failed tasks are retried with the new info. If <code>false</code> all pending failed tasks
/// will complete with the error <code>HTTPManagerError.unauthorized</code>. The <code>completion</code> block may
/// be invoked from any thread, including being invoked synchronously from
/// <code>authenticationRefreshBlock</code>.
///
- (nonnull instancetype)initWithInfo:(id _Nonnull)info authenticationHeadersBlock:(NSDictionary<NSString *, NSString *> * _Nonnull (^ _Nonnull)(NSURLRequest * _Nonnull, id _Nonnull))authenticationHeadersBlock authenticationRefreshBlock:(HTTPManagerTask * _Nullable (^ _Nonnull)(NSHTTPURLResponse * _Nonnull, NSData * _Nonnull, id _Nonnull, void (^ _Nonnull)(id _Nullable, BOOL)))authenticationRefreshBlock;
- (NSDictionary<NSString *, NSString *> * _Nonnull)headersForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)opaqueTokenForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Invoked when a 401 Unauthorized response is received.
/// The default implementation refreshes the authentication information if necessary. If you
/// override this method, you should call <code>super</code> unless you want to skip refreshing
/// authentication information for any reason.
- (void)handleUnauthorizedResponse:(NSHTTPURLResponse * _Nonnull)response body:(NSData * _Nonnull)body forTask:(HTTPManagerTask * _Nonnull)task token:(id _Nullable)token completion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC6PMHTTP22NetworkActivityManager")
@interface NetworkActivityManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The results of an HTTP request.
SWIFT_CLASS("_TtC6PMHTTP12PMHTTPResult")
@interface PMHTTPResult : NSObject <NSCopying>
/// <code>true</code> iff the task finished successfully.
@property (nonatomic, readonly) BOOL isSuccess;
/// <code>true</code> iff the task failed with an error.
@property (nonatomic, readonly) BOOL isError;
/// <code>true</code> iff the task was canceled before it finished.
@property (nonatomic, readonly) BOOL isCanceled;
/// If the task finished successfully, returns the resulting value, if any.
/// Otherwise, returns <code>nil</code>.
/// note:
/// A successful result may still have a <code>nil</code> value if the parse handler
/// returns <code>nil</code> or if it’s a POST/PUT/PATCH/DELETE request and the response
/// is 204 No Content.
@property (nonatomic, readonly) id _Nullable value;
/// If the task finished successfully, or if it failed with an error
/// during processing after receiving the response, returns the <code>NSURLResponse</code>.
/// Otherwise, if the task failed with a networking error or was canceled,
/// returns <code>nil</code>.
@property (nonatomic, readonly, strong) NSURLResponse * _Nullable response;
/// If the task failed with an error, returns the <code>NSError</code>.
/// Otherwise, returns <code>nil</code>.
/// note:
/// Canceled tasks are not considered to be in error and therefore
/// return <code>nil</code> from both <code>value</code> and <code>error</code>.
@property (nonatomic, readonly, strong) NSError * _Nullable error;
/// Returns the error or canceled state as an <code>NSError</code>, or <code>nil</code> if successful.
/// Canceled results are converted into <code>NSURLErrorCancelled</code> errors.
@property (nonatomic, readonly, strong) NSError * _Nullable objcError;
/// Creates and returns a new <code>PMHTTPResult</code> representing a successful result.
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPResult</code> representing a failed task.
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPResult</code> representing a canceled task.
+ (PMHTTPResult * _Nonnull)canceledResult SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The results of an HTTP request that returns an <code>NSData</code>.
SWIFT_CLASS("_TtC6PMHTTP16PMHTTPDataResult")
@interface PMHTTPDataResult : PMHTTPResult
/// If the task finished successfully, returns the resulting <code>Data</code>, if any.
/// Otherwise, returns <code>nil</code>.
/// note:
/// A successful result may still have a <code>nil</code> value if it’s a
/// POST/PUT/PATCH/DELETE request and the response is 204 No Content.
/// Successful GET/HEAD requests will never have a <code>nil</code> value.
/// note:
/// This property returns the same value that <code>value</code> does.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a successful result.
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a failed task.
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a new <code>PMHTTPDataResult</code> representing a canceled task.
+ (PMHTTPDataResult * _Nonnull)canceledResult SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response SWIFT_UNAVAILABLE;
@end





@interface NSURLProtocol (SWIFT_EXTENSION(PMHTTP))
/// Returns the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param key The key of the desired property.
///
/// \param request The request whose properties are to be queried.
///
///
/// returns:
/// The property associated with <code>key</code>, or <code>nil</code> if no property has been stored for
/// <code>key</code>.
+ (id _Nullable)propertyForKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Sets the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param value The value to set for the specified property.
///
/// \param key The key for the specified property.
///
/// \param request The request for which to create the property.
///
+ (void)setProperty:(id _Nonnull)value forKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request;
/// Removes the property associated with the specified key in the specified request.
/// This method is used to provide an interface for protocol implementors to customize
/// protocol-specific information associated with <code>HTTPManagerRequest</code> objects. Any properties
/// set by this interface will be applied to the underlying <code>URLRequest</code> object used to create
/// the network task.
/// \param key The key whose value should be removed.
///
/// \param request The request from which to remove the property value.
///
+ (void)removePropertyForKey:(NSString * _Nonnull)key inHTTPManagerRequest:(HTTPManagerRequest * _Nonnull)request;
@end


@interface NSURLResponse (SWIFT_EXTENSION(PMHTTP))
/// Returns whether the response represents an unmocked intercepted request.
/// When <code>HTTPMockManager</code> is configured to intercept unmocked requests, this property will
/// return <code>true</code> for the response generated for any such intercepted request. Otherwise it will
/// return <code>false</code> for any mocked request or any request that wasn’t intercepted.
@property (nonatomic, readonly) BOOL pmhttp_IsUnmockedInterceptedRequest;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
